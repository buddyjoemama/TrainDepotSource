
SerialConnector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002570  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000100  20000000  00002570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000006f4  20000100  00002670  00020100  2**2
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
  4 .comment      00000059  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
  5 .debug_info   00029b0e  00000000  00000000  00020181  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003e18  00000000  00000000  00049c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00006b5a  00000000  00000000  0004daa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000868  00000000  00000000  00054601  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000f18  00000000  00000000  00054e69  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001b119  00000000  00000000  00055d81  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d643  00000000  00000000  00070e9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0007eb9b  00000000  00000000  0007e4dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000015dc  00000000  00000000  000fd078  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__text_start__>:

void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
       0:	20008000 	.word	0x20008000
  return malloc(size);
       4:	0000015d 	.word	0x0000015d
       8:	00000145 	.word	0x00000145
       c:	00000145 	.word	0x00000145
	...
      2c:	00000145 	.word	0x00000145
	...
      38:	00000145 	.word	0x00000145
      3c:	000001b1 	.word	0x000001b1
      40:	00000145 	.word	0x00000145
      44:	00000145 	.word	0x00000145
      48:	00000145 	.word	0x00000145
      4c:	00000145 	.word	0x00000145
      50:	00000145 	.word	0x00000145
      54:	00000145 	.word	0x00000145
      58:	00000145 	.word	0x00000145
      5c:	00000149 	.word	0x00000149
      60:	00000145 	.word	0x00000145
      64:	0000183d 	.word	0x0000183d
      68:	00000145 	.word	0x00000145
      6c:	00000145 	.word	0x00000145
      70:	00000145 	.word	0x00000145
      74:	00000145 	.word	0x00000145
      78:	0000184d 	.word	0x0000184d
      7c:	00000145 	.word	0x00000145
      80:	00000145 	.word	0x00000145
      84:	00000145 	.word	0x00000145
      88:	00000145 	.word	0x00000145
      8c:	00000145 	.word	0x00000145
      90:	00000000 	.word	0x00000000
      94:	00000145 	.word	0x00000145
      98:	00000145 	.word	0x00000145
      9c:	00000145 	.word	0x00000145
      a0:	00000145 	.word	0x00000145
      a4:	00000145 	.word	0x00000145
      a8:	00000145 	.word	0x00000145
      ac:	00000145 	.word	0x00000145
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000100 	.word	0x20000100
      d4:	00000000 	.word	0x00000000
      d8:	0000256c 	.word	0x0000256c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000104 	.word	0x20000104
     108:	0000256c 	.word	0x0000256c
     10c:	200000fc 	.word	0x200000fc
     110:	00000000 	.word	0x00000000

00000114 <setup>:
int thirdSensor = 0;    // digital sensor
int inByte = 0;         // incoming serial byte

void setup() {
  // start serial port at 9600 bps:
  SerialUSB.begin(9600);
     114:	2196      	movs	r1, #150	; 0x96
int firstSensor = 0;    // first analog sensor
int secondSensor = 0;   // second analog sensor
int thirdSensor = 0;    // digital sensor
int inByte = 0;         // incoming serial byte

void setup() {
     116:	b510      	push	{r4, lr}
  // start serial port at 9600 bps:
  SerialUSB.begin(9600);
     118:	4c05      	ldr	r4, [pc, #20]	; (130 <setup+0x1c>)
     11a:	0189      	lsls	r1, r1, #6
     11c:	0020      	movs	r0, r4
     11e:	f000 fa33 	bl	588 <_ZN7Serial_5beginEm>
  while (!SerialUSB) {
     122:	0020      	movs	r0, r4
     124:	f000 fa32 	bl	58c <_ZN7Serial_cvbEv>
     128:	2800      	cmp	r0, #0
     12a:	d0fa      	beq.n	122 <setup+0xe>
    ; // wait for serial port to connect. Needed for native USB port only
  }

}
     12c:	bd10      	pop	{r4, pc}
     12e:	46c0      	nop			; (mov r8, r8)
     130:	20000124 	.word	0x20000124

00000134 <loop>:

void loop() {
     134:	b510      	push	{r4, lr}
  // if we get a valid byte, read analog ins:
  if (SerialUSB.available() > 0) {
     136:	4802      	ldr	r0, [pc, #8]	; (140 <loop+0xc>)
     138:	f000 f99e 	bl	478 <_ZN7Serial_9availableEv>
  
  }
}
     13c:	bd10      	pop	{r4, pc}
     13e:	46c0      	nop			; (mov r8, r8)
     140:	20000124 	.word	0x20000124

00000144 <Dummy_Handler>:

/* Default empty handler */
void Dummy_Handler(void)
{
#if defined DEBUG
  __BKPT(3);
     144:	be03      	bkpt	0x0003
     146:	e7fe      	b.n	146 <Dummy_Handler+0x2>

00000148 <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
     148:	4b03      	ldr	r3, [pc, #12]	; (158 <USB_Handler+0x10>)
}

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
     14a:	b510      	push	{r4, lr}
  if (usb_isr)
     14c:	681b      	ldr	r3, [r3, #0]
     14e:	2b00      	cmp	r3, #0
     150:	d000      	beq.n	154 <USB_Handler+0xc>
    usb_isr();
     152:	4798      	blx	r3
}
     154:	bd10      	pop	{r4, pc}
     156:	46c0      	nop			; (mov r8, r8)
     158:	2000011c 	.word	0x2000011c

0000015c <Reset_Handler>:

extern int main(void);

/* This is called on processor reset to initialize the device and call main() */
void Reset_Handler(void)
{
     15c:	b570      	push	{r4, r5, r6, lr}
     15e:	490f      	ldr	r1, [pc, #60]	; (19c <Reset_Handler+0x40>)
     160:	4c0f      	ldr	r4, [pc, #60]	; (1a0 <Reset_Handler+0x44>)

  /* Initialize the initialized data section */
  pSrc = &__etext;
  pDest = &__data_start__;

  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     162:	42a1      	cmp	r1, r4
     164:	d104      	bne.n	170 <Reset_Handler+0x14>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
      *pDest = 0;
  }

  SystemInit();
     166:	f000 f8bd 	bl	2e4 <SystemInit>

  main();
     16a:	f000 f851 	bl	210 <main>
     16e:	e00b      	b.n	188 <Reset_Handler+0x2c>

  /* Initialize the initialized data section */
  pSrc = &__etext;
  pDest = &__data_start__;

  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     170:	4d0c      	ldr	r5, [pc, #48]	; (1a4 <Reset_Handler+0x48>)
     172:	2300      	movs	r3, #0
     174:	428d      	cmp	r5, r1
     176:	d0f6      	beq.n	166 <Reset_Handler+0xa>
     178:	18ca      	adds	r2, r1, r3
     17a:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
     17c:	42a2      	cmp	r2, r4
     17e:	d204      	bcs.n	18a <Reset_Handler+0x2e>
      *pDest = *pSrc;
     180:	6800      	ldr	r0, [r0, #0]
     182:	3304      	adds	r3, #4
     184:	6010      	str	r0, [r2, #0]
     186:	e7f7      	b.n	178 <Reset_Handler+0x1c>
     188:	e7fe      	b.n	188 <Reset_Handler+0x2c>
  }

  /* Clear the zero section */
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     18a:	4290      	cmp	r0, r2
     18c:	d0eb      	beq.n	166 <Reset_Handler+0xa>
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
      *pDest = 0;
     18e:	2200      	movs	r2, #0
     190:	4b05      	ldr	r3, [pc, #20]	; (1a8 <Reset_Handler+0x4c>)
      *pDest = *pSrc;
  }

  /* Clear the zero section */
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     192:	4906      	ldr	r1, [pc, #24]	; (1ac <Reset_Handler+0x50>)
     194:	428b      	cmp	r3, r1
     196:	d2e6      	bcs.n	166 <Reset_Handler+0xa>
      *pDest = 0;
     198:	c304      	stmia	r3!, {r2}
     19a:	e7fb      	b.n	194 <Reset_Handler+0x38>
     19c:	20000000 	.word	0x20000000
     1a0:	20000100 	.word	0x20000100
     1a4:	00002570 	.word	0x00002570
     1a8:	20000100 	.word	0x20000100
     1ac:	200007f4 	.word	0x200007f4

000001b0 <SysTick_Handler>:

/* Default Arduino systick handler */
extern void SysTick_DefaultHandler(void);

void SysTick_Handler(void)
{
     1b0:	b510      	push	{r4, lr}
  if (sysTickHook())
     1b2:	f000 f82a 	bl	20a <sysTickHook>
     1b6:	2800      	cmp	r0, #0
     1b8:	d101      	bne.n	1be <SysTick_Handler+0xe>
    return;
  SysTick_DefaultHandler();
     1ba:	f000 f81b 	bl	1f4 <SysTick_DefaultHandler>
}
     1be:	bd10      	pop	{r4, pc}

000001c0 <USB_SetHandler>:
    usb_isr();
}

void USB_SetHandler(void (*new_usb_isr)(void))
{
  usb_isr = new_usb_isr;
     1c0:	4b01      	ldr	r3, [pc, #4]	; (1c8 <USB_SetHandler+0x8>)
     1c2:	6018      	str	r0, [r3, #0]
}
     1c4:	4770      	bx	lr
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	2000011c 	.word	0x2000011c

000001cc <millis>:
static volatile uint32_t _ulTickCount=0 ;

uint32_t millis( void )
{
// todo: ensure no interrupts
  return _ulTickCount ;
     1cc:	4b01      	ldr	r3, [pc, #4]	; (1d4 <millis+0x8>)
     1ce:	6818      	ldr	r0, [r3, #0]
}
     1d0:	4770      	bx	lr
     1d2:	46c0      	nop			; (mov r8, r8)
     1d4:	20000120 	.word	0x20000120

000001d8 <delay>:
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}

void delay( uint32_t ms )
{
     1d8:	b570      	push	{r4, r5, r6, lr}
     1da:	1e05      	subs	r5, r0, #0
  if ( ms == 0 )
     1dc:	d007      	beq.n	1ee <delay+0x16>
  {
    return ;
  }

  uint32_t start = _ulTickCount ;
     1de:	4c04      	ldr	r4, [pc, #16]	; (1f0 <delay+0x18>)
     1e0:	6826      	ldr	r6, [r4, #0]

  do
  {
    yield() ;
     1e2:	f000 f811 	bl	208 <yield>
  } while ( _ulTickCount - start < ms ) ;
     1e6:	6823      	ldr	r3, [r4, #0]
     1e8:	1b9b      	subs	r3, r3, r6
     1ea:	429d      	cmp	r5, r3
     1ec:	d8f9      	bhi.n	1e2 <delay+0xa>
}
     1ee:	bd70      	pop	{r4, r5, r6, pc}
     1f0:	20000120 	.word	0x20000120

000001f4 <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
     1f4:	b510      	push	{r4, lr}
  // Increment tick count each ms
  _ulTickCount++;
     1f6:	4a03      	ldr	r2, [pc, #12]	; (204 <SysTick_DefaultHandler+0x10>)
     1f8:	6813      	ldr	r3, [r2, #0]
     1fa:	3301      	adds	r3, #1
     1fc:	6013      	str	r3, [r2, #0]
  tickReset();
     1fe:	f000 f835 	bl	26c <tickReset>
}
     202:	bd10      	pop	{r4, pc}
     204:	20000120 	.word	0x20000120

00000208 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
     208:	4770      	bx	lr

0000020a <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
     20a:	2000      	movs	r0, #0
     20c:	4770      	bx	lr

0000020e <_Z11initVariantv>:
#include "Arduino.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
     20e:	4770      	bx	lr

00000210 <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
     210:	b510      	push	{r4, lr}
  init();
     212:	f001 f983 	bl	151c <init>

  __libc_init_array();
     216:	f001 fe7f 	bl	1f18 <__libc_init_array>

  initVariant();
     21a:	f7ff fff8 	bl	20e <_Z11initVariantv>

  delay(1);
     21e:	2001      	movs	r0, #1
     220:	f7ff ffda 	bl	1d8 <delay>
#if defined(USBCON)
  USBDevice.init();
     224:	4c08      	ldr	r4, [pc, #32]	; (248 <main+0x38>)
     226:	0020      	movs	r0, r4
     228:	f000 fc00 	bl	a2c <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
     22c:	0020      	movs	r0, r4
     22e:	f000 fc75 	bl	b1c <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
     232:	f7ff ff6f 	bl	114 <setup>

  for (;;)
  {
    loop();
     236:	f7ff ff7d 	bl	134 <loop>
    if (serialEventRun) serialEventRun();
     23a:	4b04      	ldr	r3, [pc, #16]	; (24c <main+0x3c>)
     23c:	2b00      	cmp	r3, #0
     23e:	d0fa      	beq.n	236 <main+0x26>
     240:	e000      	b.n	244 <main+0x34>
     242:	bf00      	nop
     244:	e7f7      	b.n	236 <main+0x26>
     246:	46c0      	nop			; (mov r8, r8)
     248:	200005ef 	.word	0x200005ef
     24c:	00000000 	.word	0x00000000

00000250 <initiateReset>:
}

static int ticks = -1;

void initiateReset(int _ticks) {
	ticks = _ticks;
     250:	4b01      	ldr	r3, [pc, #4]	; (258 <initiateReset+0x8>)
     252:	6018      	str	r0, [r3, #0]
}
     254:	4770      	bx	lr
     256:	46c0      	nop			; (mov r8, r8)
     258:	20000000 	.word	0x20000000

0000025c <cancelReset>:

void cancelReset() {
	ticks = -1;
     25c:	2201      	movs	r2, #1
     25e:	4b02      	ldr	r3, [pc, #8]	; (268 <cancelReset+0xc>)
     260:	4252      	negs	r2, r2
     262:	601a      	str	r2, [r3, #0]
}
     264:	4770      	bx	lr
     266:	46c0      	nop			; (mov r8, r8)
     268:	20000000 	.word	0x20000000

0000026c <tickReset>:

void tickReset() {
	if (ticks == -1)
     26c:	4a16      	ldr	r2, [pc, #88]	; (2c8 <tickReset+0x5c>)

void cancelReset() {
	ticks = -1;
}

void tickReset() {
     26e:	b510      	push	{r4, lr}
	if (ticks == -1)
     270:	6813      	ldr	r3, [r2, #0]
     272:	1c59      	adds	r1, r3, #1
     274:	d027      	beq.n	2c6 <tickReset+0x5a>
		return;
	ticks--;
     276:	3b01      	subs	r3, #1
     278:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
     27a:	2b00      	cmp	r3, #0
     27c:	d123      	bne.n	2c6 <tickReset+0x5a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     27e:	b672      	cpsid	i
	__disable_irq();

	// Avoid erasing the application if APP_START is < than the minimum bootloader size
	// This could happen if without_bootloader linker script was chosen
	// Minimum bootloader size in SAMD21 family is 512bytes (RM section 22.6.5)
	if (APP_START < (0x200 + 4)) {
     280:	4b12      	ldr	r3, [pc, #72]	; (2cc <tickReset+0x60>)
     282:	4a13      	ldr	r2, [pc, #76]	; (2d0 <tickReset+0x64>)
     284:	3304      	adds	r3, #4
     286:	4293      	cmp	r3, r2
     288:	d807      	bhi.n	29a <tickReset+0x2e>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
     28a:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
                 SCB_AIRCR_SYSRESETREQ_Msk);
     28e:	4a11      	ldr	r2, [pc, #68]	; (2d4 <tickReset+0x68>)
     290:	4b11      	ldr	r3, [pc, #68]	; (2d8 <tickReset+0x6c>)
     292:	60da      	str	r2, [r3, #12]
     294:	f3bf 8f4f 	dsb	sy
     298:	e014      	b.n	2c4 <tickReset+0x58>
		goto reset;
	}

	// Erase application
	while (!nvmReady())
     29a:	2101      	movs	r1, #1
#else
#define APP_START 0x00002004
#endif

static inline bool nvmReady(void) {
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     29c:	4c0f      	ldr	r4, [pc, #60]	; (2dc <tickReset+0x70>)
     29e:	7d20      	ldrb	r0, [r4, #20]
     2a0:	4a0e      	ldr	r2, [pc, #56]	; (2dc <tickReset+0x70>)
	if (APP_START < (0x200 + 4)) {
		goto reset;
	}

	// Erase application
	while (!nvmReady())
     2a2:	4208      	tst	r0, r1
     2a4:	d0fb      	beq.n	29e <tickReset+0x32>
		;
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     2a6:	2020      	movs	r0, #32
     2a8:	8b11      	ldrh	r1, [r2, #24]
     2aa:	30ff      	adds	r0, #255	; 0xff
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     2ac:	089b      	lsrs	r3, r3, #2
     2ae:	005b      	lsls	r3, r3, #1
	}

	// Erase application
	while (!nvmReady())
		;
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     2b0:	4301      	orrs	r1, r0
     2b2:	8311      	strh	r1, [r2, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     2b4:	61d3      	str	r3, [r2, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
     2b6:	4b0a      	ldr	r3, [pc, #40]	; (2e0 <tickReset+0x74>)
     2b8:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
     2ba:	2301      	movs	r3, #1
#else
#define APP_START 0x00002004
#endif

static inline bool nvmReady(void) {
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     2bc:	7d11      	ldrb	r1, [r2, #20]
	while (!nvmReady())
		;
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
	while (!nvmReady())
     2be:	4219      	tst	r1, r3
     2c0:	d0fc      	beq.n	2bc <tickReset+0x50>
     2c2:	e7e2      	b.n	28a <tickReset+0x1e>
     2c4:	e7fe      	b.n	2c4 <tickReset+0x58>
	if (ticks == -1)
		return;
	ticks--;
	if (ticks == 0)
		banzai();
}
     2c6:	bd10      	pop	{r4, pc}
     2c8:	20000000 	.word	0x20000000
     2cc:	00000000 	.word	0x00000000
     2d0:	00000203 	.word	0x00000203
     2d4:	05fa0004 	.word	0x05fa0004
     2d8:	e000ed00 	.word	0xe000ed00
     2dc:	41004000 	.word	0x41004000
     2e0:	ffffa502 	.word	0xffffa502

000002e4 <SystemInit>:
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     2e4:	221e      	movs	r2, #30
#define GENERIC_CLOCK_GENERATOR_OSC8M     (3u)
// Constants for Clock multiplexers
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
     2e6:	b570      	push	{r4, r5, r6, lr}
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     2e8:	2408      	movs	r4, #8
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     2ea:	484d      	ldr	r0, [pc, #308]	; (420 <SystemInit+0x13c>)

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     2ec:	494d      	ldr	r1, [pc, #308]	; (424 <SystemInit+0x140>)
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     2ee:	6843      	ldr	r3, [r0, #4]
     2f0:	4393      	bics	r3, r2
     2f2:	3a1c      	subs	r2, #28
     2f4:	4313      	orrs	r3, r2
     2f6:	6043      	str	r3, [r0, #4]

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     2f8:	698b      	ldr	r3, [r1, #24]
     2fa:	4323      	orrs	r3, r4
     2fc:	618b      	str	r3, [r1, #24]
#else // has crystal

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     2fe:	4c4a      	ldr	r4, [pc, #296]	; (428 <SystemInit+0x144>)
     300:	4b4a      	ldr	r3, [pc, #296]	; (42c <SystemInit+0x148>)
     302:	829c      	strh	r4, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
     304:	8a9c      	ldrh	r4, [r3, #20]
     306:	4314      	orrs	r4, r2
     308:	829c      	strh	r4, [r3, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
     30a:	68dc      	ldr	r4, [r3, #12]
     30c:	4214      	tst	r4, r2
     30e:	d0fc      	beq.n	30a <SystemInit+0x26>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
     310:	4a47      	ldr	r2, [pc, #284]	; (430 <SystemInit+0x14c>)
     312:	2401      	movs	r4, #1

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
     314:	0016      	movs	r6, r2

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
     316:	7014      	strb	r4, [r2, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
     318:	7815      	ldrb	r5, [r2, #0]
     31a:	4225      	tst	r5, r4
     31c:	d003      	beq.n	326 <SystemInit+0x42>
     31e:	7875      	ldrb	r5, [r6, #1]
     320:	b26d      	sxtb	r5, r5
     322:	2d00      	cmp	r5, #0
     324:	dbf8      	blt.n	318 <SystemInit+0x34>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
     326:	2401      	movs	r4, #1
     328:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     32a:	7854      	ldrb	r4, [r2, #1]
     32c:	b264      	sxtb	r4, r4
     32e:	2c00      	cmp	r4, #0
     330:	dbfb      	blt.n	32a <SystemInit+0x46>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
     332:	4d40      	ldr	r5, [pc, #256]	; (434 <SystemInit+0x150>)
     334:	4c3e      	ldr	r4, [pc, #248]	; (430 <SystemInit+0x14c>)
     336:	6065      	str	r5, [r4, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     338:	7854      	ldrb	r4, [r2, #1]
     33a:	b264      	sxtb	r4, r4
     33c:	2c00      	cmp	r4, #0
     33e:	dbfb      	blt.n	338 <SystemInit+0x54>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
     340:	2582      	movs	r5, #130	; 0x82
     342:	4c3b      	ldr	r4, [pc, #236]	; (430 <SystemInit+0x14c>)
     344:	01ed      	lsls	r5, r5, #7
     346:	8065      	strh	r5, [r4, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     348:	7854      	ldrb	r4, [r2, #1]
     34a:	b264      	sxtb	r4, r4
     34c:	2c00      	cmp	r4, #0
     34e:	dbfb      	blt.n	348 <SystemInit+0x64>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.bit.ONDEMAND = 0 ;
     350:	2580      	movs	r5, #128	; 0x80
     352:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
     354:	43ac      	bics	r4, r5
     356:	849c      	strh	r4, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     358:	2410      	movs	r4, #16
     35a:	68dd      	ldr	r5, [r3, #12]
     35c:	4225      	tst	r5, r4
     35e:	d0fc      	beq.n	35a <SystemInit+0x76>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
     360:	4c32      	ldr	r4, [pc, #200]	; (42c <SystemInit+0x148>)
     362:	4d35      	ldr	r5, [pc, #212]	; (438 <SystemInit+0x154>)
     364:	62e5      	str	r5, [r4, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK/VARIANT_MAINOSC) ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     366:	2410      	movs	r4, #16
     368:	68de      	ldr	r6, [r3, #12]
     36a:	4d30      	ldr	r5, [pc, #192]	; (42c <SystemInit+0x148>)
     36c:	4226      	tst	r6, r4
     36e:	d0fb      	beq.n	368 <SystemInit+0x84>
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
     370:	8cac      	ldrh	r4, [r5, #36]	; 0x24
     372:	4e32      	ldr	r6, [pc, #200]	; (43c <SystemInit+0x158>)
     374:	4334      	orrs	r4, r6
     376:	84ac      	strh	r4, [r5, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     378:	2410      	movs	r4, #16
     37a:	68de      	ldr	r6, [r3, #12]
     37c:	4d2b      	ldr	r5, [pc, #172]	; (42c <SystemInit+0x148>)
     37e:	4226      	tst	r6, r4
     380:	d0fb      	beq.n	37a <SystemInit+0x96>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     382:	2602      	movs	r6, #2
     384:	8cac      	ldrh	r4, [r5, #36]	; 0x24
     386:	4334      	orrs	r4, r6
     388:	84ac      	strh	r4, [r5, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     38a:	2440      	movs	r4, #64	; 0x40
     38c:	367e      	adds	r6, #126	; 0x7e
     38e:	68dd      	ldr	r5, [r3, #12]
     390:	4235      	tst	r5, r6
     392:	d0fc      	beq.n	38e <SystemInit+0xaa>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     394:	4d25      	ldr	r5, [pc, #148]	; (42c <SystemInit+0x148>)
     396:	68ed      	ldr	r5, [r5, #12]
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     398:	4225      	tst	r5, r4
     39a:	d0f8      	beq.n	38e <SystemInit+0xaa>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     39c:	2410      	movs	r4, #16
     39e:	68dd      	ldr	r5, [r3, #12]
     3a0:	4225      	tst	r5, r4
     3a2:	d0fc      	beq.n	39e <SystemInit+0xba>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
     3a4:	2400      	movs	r4, #0
     3a6:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     3a8:	7854      	ldrb	r4, [r2, #1]
     3aa:	b264      	sxtb	r4, r4
     3ac:	2c00      	cmp	r4, #0
     3ae:	dbfb      	blt.n	3a8 <SystemInit+0xc4>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
     3b0:	4d23      	ldr	r5, [pc, #140]	; (440 <SystemInit+0x15c>)
     3b2:	4c1f      	ldr	r4, [pc, #124]	; (430 <SystemInit+0x14c>)
     3b4:	6065      	str	r5, [r4, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     3b6:	7854      	ldrb	r4, [r2, #1]
     3b8:	4d1d      	ldr	r5, [pc, #116]	; (430 <SystemInit+0x14c>)
     3ba:	b264      	sxtb	r4, r4
     3bc:	2c00      	cmp	r4, #0
     3be:	dbfa      	blt.n	3b6 <SystemInit+0xd2>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_1_Val ;
     3c0:	6a1e      	ldr	r6, [r3, #32]
     3c2:	4c20      	ldr	r4, [pc, #128]	; (444 <SystemInit+0x160>)
     3c4:	4034      	ands	r4, r6
     3c6:	2680      	movs	r6, #128	; 0x80
     3c8:	0076      	lsls	r6, r6, #1
     3ca:	4334      	orrs	r4, r6
     3cc:	621c      	str	r4, [r3, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     3ce:	6a1c      	ldr	r4, [r3, #32]
     3d0:	3e80      	subs	r6, #128	; 0x80
     3d2:	43b4      	bics	r4, r6
     3d4:	621c      	str	r4, [r3, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
     3d6:	2303      	movs	r3, #3
     3d8:	60ab      	str	r3, [r5, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
     3da:	4b1b      	ldr	r3, [pc, #108]	; (448 <SystemInit+0x164>)
     3dc:	606b      	str	r3, [r5, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     3de:	7853      	ldrb	r3, [r2, #1]
     3e0:	b25b      	sxtb	r3, r3
     3e2:	2b00      	cmp	r3, #0
     3e4:	dbfb      	blt.n	3de <SystemInit+0xfa>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     3e6:	2300      	movs	r3, #0
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;

  SystemCoreClock=VARIANT_MCK ;
     3e8:	4a18      	ldr	r2, [pc, #96]	; (44c <SystemInit+0x168>)

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     3ea:	720b      	strb	r3, [r1, #8]
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
     3ec:	724b      	strb	r3, [r1, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
     3ee:	728b      	strb	r3, [r1, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
     3f0:	72cb      	strb	r3, [r1, #11]

  SystemCoreClock=VARIANT_MCK ;
     3f2:	4b17      	ldr	r3, [pc, #92]	; (450 <SystemInit+0x16c>)
     3f4:	601a      	str	r2, [r3, #0]
  /* ----------------------------------------------------------------------------------------------
   * 8) Load ADC factory calibration values
   */

  // ADC Bias Calibration
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     3f6:	4b17      	ldr	r3, [pc, #92]	; (454 <SystemInit+0x170>)
     3f8:	681c      	ldr	r4, [r3, #0]

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     3fa:	4b17      	ldr	r3, [pc, #92]	; (458 <SystemInit+0x174>)

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     3fc:	06a1      	lsls	r1, r4, #26

  // ADC Bias Calibration
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     3fe:	681b      	ldr	r3, [r3, #0]

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     400:	0164      	lsls	r4, r4, #5

  // ADC Bias Calibration
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     402:	0eda      	lsrs	r2, r3, #27

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     404:	23ff      	movs	r3, #255	; 0xff
     406:	0f49      	lsrs	r1, r1, #29
     408:	4023      	ands	r3, r4
     40a:	0209      	lsls	r1, r1, #8
     40c:	4313      	orrs	r3, r2
     40e:	4a13      	ldr	r2, [pc, #76]	; (45c <SystemInit+0x178>)
     410:	430b      	orrs	r3, r1
     412:	8513      	strh	r3, [r2, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
     414:	2280      	movs	r2, #128	; 0x80
     416:	6843      	ldr	r3, [r0, #4]
     418:	4313      	orrs	r3, r2
     41a:	6043      	str	r3, [r0, #4]
}
     41c:	bd70      	pop	{r4, r5, r6, pc}
     41e:	46c0      	nop			; (mov r8, r8)
     420:	41004000 	.word	0x41004000
     424:	40000400 	.word	0x40000400
     428:	0000060c 	.word	0x0000060c
     42c:	40000800 	.word	0x40000800
     430:	40000c00 	.word	0x40000c00
     434:	00010501 	.word	0x00010501
     438:	7dff05b8 	.word	0x7dff05b8
     43c:	00000a04 	.word	0x00000a04
     440:	00030700 	.word	0x00030700
     444:	fffffcff 	.word	0xfffffcff
     448:	00010603 	.word	0x00010603
     44c:	02dc6c00 	.word	0x02dc6c00
     450:	20000080 	.word	0x20000080
     454:	00806024 	.word	0x00806024
     458:	00806020 	.word	0x00806020
     45c:	42004000 	.word	0x42004000

00000460 <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
     460:	203f      	movs	r0, #63	; 0x3f
     462:	4770      	bx	lr

00000464 <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
     464:	b513      	push	{r0, r1, r4, lr}
     466:	466b      	mov	r3, sp
	return write(&c, 1);
     468:	6802      	ldr	r2, [r0, #0]
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
     46a:	71d9      	strb	r1, [r3, #7]
     46c:	3307      	adds	r3, #7
	return write(&c, 1);
     46e:	6854      	ldr	r4, [r2, #4]
     470:	0019      	movs	r1, r3
     472:	2201      	movs	r2, #1
     474:	47a0      	blx	r4
}
     476:	bd16      	pop	{r1, r2, r4, pc}

00000478 <_ZN7Serial_9availableEv>:
void Serial_::end(void)
{
}

int Serial_::available(void)
{
     478:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT);
     47a:	2102      	movs	r1, #2
     47c:	6900      	ldr	r0, [r0, #16]
     47e:	f000 fc4d 	bl	d1c <_ZN14USBDeviceClass9availableEm>
}
     482:	bd10      	pop	{r4, pc}

00000484 <_ZN7Serial_5flushEv>:
	}
	return count;
}

void Serial_::flush(void)
{
     484:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
     486:	2103      	movs	r1, #3
     488:	6900      	ldr	r0, [r0, #16]
     48a:	f000 fc5d 	bl	d48 <_ZN14USBDeviceClass5flushEm>
}
     48e:	bd10      	pop	{r4, pc}

00000490 <_ZN7Serial_5writeEPKhj>:

size_t Serial_::write(const uint8_t *buffer, size_t size)
{
     490:	b510      	push	{r4, lr}
     492:	0013      	movs	r3, r2
     494:	0004      	movs	r4, r0
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
     496:	000a      	movs	r2, r1
     498:	6900      	ldr	r0, [r0, #16]
     49a:	2103      	movs	r1, #3
     49c:	f000 fd50 	bl	f40 <_ZN14USBDeviceClass4sendEmPKvm>

	if (r > 0) {
     4a0:	2800      	cmp	r0, #0
     4a2:	d101      	bne.n	4a8 <_ZN7Serial_5writeEPKhj+0x18>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     4a4:	2301      	movs	r3, #1
     4a6:	6063      	str	r3, [r4, #4]
		return r;
	} else {
		setWriteError();
		return 0;
	}
}
     4a8:	bd10      	pop	{r4, pc}
	...

000004ac <_ZN7Serial_4readEv>:
	return _serialPeek;
}

int Serial_::read(void)
{
	if (_serialPeek != -1) {
     4ac:	4b07      	ldr	r3, [pc, #28]	; (4cc <_ZN7Serial_4readEv+0x20>)
	_serialPeek = read();
	return _serialPeek;
}

int Serial_::read(void)
{
     4ae:	0002      	movs	r2, r0
	if (_serialPeek != -1) {
     4b0:	6818      	ldr	r0, [r3, #0]
	_serialPeek = read();
	return _serialPeek;
}

int Serial_::read(void)
{
     4b2:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
     4b4:	1c41      	adds	r1, r0, #1
     4b6:	d003      	beq.n	4c0 <_ZN7Serial_4readEv+0x14>
		int res = _serialPeek;
		_serialPeek = -1;
     4b8:	2201      	movs	r2, #1
     4ba:	4252      	negs	r2, r2
     4bc:	601a      	str	r2, [r3, #0]
		return res;
     4be:	e003      	b.n	4c8 <_ZN7Serial_4readEv+0x1c>
	}
	return usb.recv(CDC_ENDPOINT_OUT);
     4c0:	2102      	movs	r1, #2
     4c2:	6910      	ldr	r0, [r2, #16]
     4c4:	f000 fd2e 	bl	f24 <_ZN14USBDeviceClass4recvEm>
}
     4c8:	bd10      	pop	{r4, pc}
     4ca:	46c0      	nop			; (mov r8, r8)
     4cc:	20000054 	.word	0x20000054

000004d0 <_ZN7Serial_4peekEv>:
}

int _serialPeek = -1;

int Serial_::peek(void)
{
     4d0:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
     4d2:	4c05      	ldr	r4, [pc, #20]	; (4e8 <_ZN7Serial_4peekEv+0x18>)
     4d4:	6823      	ldr	r3, [r4, #0]
     4d6:	1c5a      	adds	r2, r3, #1
     4d8:	d104      	bne.n	4e4 <_ZN7Serial_4peekEv+0x14>
		return _serialPeek;
	_serialPeek = read();
     4da:	6803      	ldr	r3, [r0, #0]
     4dc:	68db      	ldr	r3, [r3, #12]
     4de:	4798      	blx	r3
     4e0:	0003      	movs	r3, r0
     4e2:	6020      	str	r0, [r4, #0]
	return _serialPeek;
}
     4e4:	0018      	movs	r0, r3
     4e6:	bd10      	pop	{r4, pc}
     4e8:	20000054 	.word	0x20000054

000004ec <_Z16CDC_GetInterfacePh>:
{
	return sizeof(_cdcInterface);
}

int CDC_GetInterface(uint8_t* interfaceNum)
{
     4ec:	b510      	push	{r4, lr}
	interfaceNum[0] += 2;	// uses 2
     4ee:	7803      	ldrb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
     4f0:	2242      	movs	r2, #66	; 0x42
	return sizeof(_cdcInterface);
}

int CDC_GetInterface(uint8_t* interfaceNum)
{
	interfaceNum[0] += 2;	// uses 2
     4f2:	3302      	adds	r3, #2
     4f4:	7003      	strb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
     4f6:	4902      	ldr	r1, [pc, #8]	; (500 <_Z16CDC_GetInterfacePh+0x14>)
     4f8:	4802      	ldr	r0, [pc, #8]	; (504 <_Z16CDC_GetInterfacePh+0x18>)
     4fa:	f000 fdd3 	bl	10a4 <_ZN14USBDeviceClass11sendControlEPKvm>
}
     4fe:	bd10      	pop	{r4, pc}
     500:	20000010 	.word	0x20000010
     504:	200005ef 	.word	0x200005ef

00000508 <_Z9CDC_SetupR8USBSetup>:

bool CDC_Setup(USBSetup& setup)
{
     508:	b510      	push	{r4, lr}
	uint8_t requestType = setup.bmRequestType;
     50a:	7801      	ldrb	r1, [r0, #0]
	interfaceNum[0] += 2;	// uses 2
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
}

bool CDC_Setup(USBSetup& setup)
{
     50c:	0003      	movs	r3, r0
	uint8_t requestType = setup.bmRequestType;
	uint8_t r = setup.bRequest;
     50e:	7842      	ldrb	r2, [r0, #1]
		{
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
			return false;
		}
	}
	return false;
     510:	2000      	movs	r0, #0
bool CDC_Setup(USBSetup& setup)
{
	uint8_t requestType = setup.bmRequestType;
	uint8_t r = setup.bRequest;

	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
     512:	29a1      	cmp	r1, #161	; 0xa1
     514:	d108      	bne.n	528 <_Z9CDC_SetupR8USBSetup+0x20>
	{
		if (r == CDC_GET_LINE_CODING)
     516:	2a21      	cmp	r2, #33	; 0x21
     518:	d12e      	bne.n	578 <_Z9CDC_SetupR8USBSetup+0x70>
		{
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
     51a:	3a1a      	subs	r2, #26
     51c:	4917      	ldr	r1, [pc, #92]	; (57c <_Z9CDC_SetupR8USBSetup+0x74>)
     51e:	4818      	ldr	r0, [pc, #96]	; (580 <_Z9CDC_SetupR8USBSetup+0x78>)
     520:	f000 fdc0 	bl	10a4 <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
     524:	2001      	movs	r0, #1
     526:	e027      	b.n	578 <_Z9CDC_SetupR8USBSetup+0x70>
		}
	}

	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
     528:	2921      	cmp	r1, #33	; 0x21
     52a:	d125      	bne.n	578 <_Z9CDC_SetupR8USBSetup+0x70>
	{
		if (r == CDC_SET_LINE_CODING)
     52c:	2a20      	cmp	r2, #32
     52e:	d105      	bne.n	53c <_Z9CDC_SetupR8USBSetup+0x34>
		{
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
     530:	3a19      	subs	r2, #25
     532:	4912      	ldr	r1, [pc, #72]	; (57c <_Z9CDC_SetupR8USBSetup+0x74>)
     534:	4812      	ldr	r0, [pc, #72]	; (580 <_Z9CDC_SetupR8USBSetup+0x78>)
     536:	f000 fc4d 	bl	dd4 <_ZN14USBDeviceClass11recvControlEPvm>
     53a:	e004      	b.n	546 <_Z9CDC_SetupR8USBSetup+0x3e>
		}

		if (r == CDC_SET_CONTROL_LINE_STATE)
     53c:	2a22      	cmp	r2, #34	; 0x22
     53e:	d112      	bne.n	566 <_Z9CDC_SetupR8USBSetup+0x5e>
		{
			_usbLineInfo.lineState = setup.wValueL;
     540:	789a      	ldrb	r2, [r3, #2]
     542:	4b0e      	ldr	r3, [pc, #56]	; (57c <_Z9CDC_SetupR8USBSetup+0x74>)
     544:	71da      	strb	r2, [r3, #7]
		if (r == CDC_SET_LINE_CODING || r == CDC_SET_CONTROL_LINE_STATE)
		{
			// auto-reset into the bootloader is triggered when the port, already
			// open at 1200 bps, is closed. We check DTR state to determine if host 
			// port is open (bit 0 of lineState).
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
     546:	2296      	movs	r2, #150	; 0x96
     548:	4b0c      	ldr	r3, [pc, #48]	; (57c <_Z9CDC_SetupR8USBSetup+0x74>)
     54a:	00d2      	lsls	r2, r2, #3
     54c:	6819      	ldr	r1, [r3, #0]
     54e:	4291      	cmp	r1, r2
     550:	d10f      	bne.n	572 <_Z9CDC_SetupR8USBSetup+0x6a>
     552:	79d8      	ldrb	r0, [r3, #7]
     554:	2301      	movs	r3, #1
     556:	4018      	ands	r0, r3
     558:	1e04      	subs	r4, r0, #0
     55a:	d10a      	bne.n	572 <_Z9CDC_SetupR8USBSetup+0x6a>
			{
				initiateReset(250);
     55c:	20fa      	movs	r0, #250	; 0xfa
     55e:	f7ff fe77 	bl	250 <initiateReset>
			}
			else
			{
				cancelReset();
			}
			return false;
     562:	0020      	movs	r0, r4
     564:	e008      	b.n	578 <_Z9CDC_SetupR8USBSetup+0x70>
		}

		if (CDC_SEND_BREAK == r)
     566:	2a23      	cmp	r2, #35	; 0x23
     568:	d106      	bne.n	578 <_Z9CDC_SetupR8USBSetup+0x70>
		{
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
     56a:	885a      	ldrh	r2, [r3, #2]
     56c:	4b05      	ldr	r3, [pc, #20]	; (584 <_Z9CDC_SetupR8USBSetup+0x7c>)
     56e:	601a      	str	r2, [r3, #0]
			return false;
     570:	e002      	b.n	578 <_Z9CDC_SetupR8USBSetup+0x70>
			{
				initiateReset(250);
			}
			else
			{
				cancelReset();
     572:	f7ff fe73 	bl	25c <cancelReset>
			}
			return false;
     576:	2000      	movs	r0, #0
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
			return false;
		}
	}
	return false;
}
     578:	bd10      	pop	{r4, pc}
     57a:	46c0      	nop			; (mov r8, r8)
     57c:	20000004 	.word	0x20000004
     580:	200005ef 	.word	0x200005ef
     584:	2000000c 	.word	0x2000000c

00000588 <_ZN7Serial_5beginEm>:

void Serial_::begin(uint32_t /* baud_count */)
{
	// uart config is ignored in USB-CDC
}
     588:	4770      	bx	lr
	...

0000058c <_ZN7Serial_cvbEv>:
// setup() before printing to ensure that an application on the host is
// actually ready to receive and display the data.
// We add a short delay before returning to fix a bug observed by Federico
// where the port is configured (lineState != 0) but not quite opened.
Serial_::operator bool()
{
     58c:	b510      	push	{r4, lr}
	// this is here to avoid spurious opening after upload
	if (millis() < 500)
     58e:	f7ff fe1d 	bl	1cc <millis>
     592:	23f4      	movs	r3, #244	; 0xf4
     594:	33ff      	adds	r3, #255	; 0xff
		return false;
     596:	2400      	movs	r4, #0
// We add a short delay before returning to fix a bug observed by Federico
// where the port is configured (lineState != 0) but not quite opened.
Serial_::operator bool()
{
	// this is here to avoid spurious opening after upload
	if (millis() < 500)
     598:	4298      	cmp	r0, r3
     59a:	d907      	bls.n	5ac <_ZN7Serial_cvbEv+0x20>
		return false;

	bool result = false;

	if (_usbLineInfo.lineState > 0)
     59c:	4b04      	ldr	r3, [pc, #16]	; (5b0 <_ZN7Serial_cvbEv+0x24>)
	{
		result = true;
	}

	delay(10);
     59e:	200a      	movs	r0, #10
	if (millis() < 500)
		return false;

	bool result = false;

	if (_usbLineInfo.lineState > 0)
     5a0:	79dc      	ldrb	r4, [r3, #7]
     5a2:	1e63      	subs	r3, r4, #1
     5a4:	419c      	sbcs	r4, r3
     5a6:	b2e4      	uxtb	r4, r4
	{
		result = true;
	}

	delay(10);
     5a8:	f7ff fe16 	bl	1d8 <delay>
	return result;
}
     5ac:	0020      	movs	r0, r4
     5ae:	bd10      	pop	{r4, pc}
     5b0:	20000004 	.word	0x20000004

000005b4 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     5b4:	22fa      	movs	r2, #250	; 0xfa
  public:
    Print() : write_error(0) {}
     5b6:	2100      	movs	r1, #0
     5b8:	4b05      	ldr	r3, [pc, #20]	; (5d0 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x1c>)
     5ba:	0092      	lsls	r2, r2, #2
     5bc:	609a      	str	r2, [r3, #8]
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
	Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
     5be:	4a05      	ldr	r2, [pc, #20]	; (5d4 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x20>)
     5c0:	6059      	str	r1, [r3, #4]
     5c2:	3208      	adds	r2, #8
     5c4:	601a      	str	r2, [r3, #0]
     5c6:	4a04      	ldr	r2, [pc, #16]	; (5d8 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x24>)
     5c8:	7619      	strb	r1, [r3, #24]
     5ca:	611a      	str	r2, [r3, #16]

bool Serial_::rts() {
	return _usbLineInfo.lineState & 0x2;
}

Serial_ SerialUSB(USBDevice);
     5cc:	4770      	bx	lr
     5ce:	46c0      	nop			; (mov r8, r8)
     5d0:	20000124 	.word	0x20000124
     5d4:	000020b0 	.word	0x000020b0
     5d8:	200005ef 	.word	0x200005ef

000005dc <_ZN14USBDeviceClass6initEPEmm.part.5>:
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
     5dc:	b570      	push	{r4, r5, r6, lr}
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     5de:	24c0      	movs	r4, #192	; 0xc0
     5e0:	4e19      	ldr	r6, [pc, #100]	; (648 <_ZN14USBDeviceClass6initEPEmm.part.5+0x6c>)
     5e2:	b2c3      	uxtb	r3, r0
     5e4:	015a      	lsls	r2, r3, #5
     5e6:	18b2      	adds	r2, r6, r2
     5e8:	6895      	ldr	r5, [r2, #8]
     5ea:	4918      	ldr	r1, [pc, #96]	; (64c <_ZN14USBDeviceClass6initEPEmm.part.5+0x70>)
     5ec:	05a4      	lsls	r4, r4, #22
     5ee:	400d      	ands	r5, r1
     5f0:	4325      	orrs	r5, r4
     5f2:	6095      	str	r5, [r2, #8]
	}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
	{
		// Setup Control OUT
		usbd.epBank0SetSize(ep, 64);
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
     5f4:	4d16      	ldr	r5, [pc, #88]	; (650 <_ZN14USBDeviceClass6initEPEmm.part.5+0x74>)
     5f6:	0180      	lsls	r0, r0, #6
     5f8:	1828      	adds	r0, r5, r0
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     5fa:	6050      	str	r0, [r2, #4]

	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     5fc:	6830      	ldr	r0, [r6, #0]
     5fe:	2607      	movs	r6, #7
     600:	3308      	adds	r3, #8
     602:	015b      	lsls	r3, r3, #5
     604:	5c1d      	ldrb	r5, [r3, r0]
     606:	43b5      	bics	r5, r6
     608:	3e06      	subs	r6, #6
     60a:	4335      	orrs	r5, r6
     60c:	541d      	strb	r5, [r3, r0]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     60e:	6996      	ldr	r6, [r2, #24]
     610:	4031      	ands	r1, r6
     612:	4321      	orrs	r1, r4
	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     614:	2470      	movs	r4, #112	; 0x70
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     616:	6191      	str	r1, [r2, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     618:	490e      	ldr	r1, [pc, #56]	; (654 <_ZN14USBDeviceClass6initEPEmm.part.5+0x78>)
     61a:	6151      	str	r1, [r2, #20]
	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     61c:	5c19      	ldrb	r1, [r3, r0]
     61e:	43a1      	bics	r1, r4
     620:	3c60      	subs	r4, #96	; 0x60
     622:	4321      	orrs	r1, r4
     624:	5419      	strb	r1, [r3, r0]
	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     626:	6894      	ldr	r4, [r2, #8]
     628:	490b      	ldr	r1, [pc, #44]	; (658 <_ZN14USBDeviceClass6initEPEmm.part.5+0x7c>)
	inline void epBank1DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT1 = 1; }

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
     62a:	18c3      	adds	r3, r0, r3
	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     62c:	4021      	ands	r1, r4
     62e:	2480      	movs	r4, #128	; 0x80
     630:	0364      	lsls	r4, r4, #13
     632:	4321      	orrs	r1, r4
     634:	6091      	str	r1, [r2, #8]
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     636:	6891      	ldr	r1, [r2, #8]
     638:	0b89      	lsrs	r1, r1, #14
     63a:	0389      	lsls	r1, r1, #14
     63c:	6091      	str	r1, [r2, #8]
	inline void epBank1DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT1 = 1; }

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
     63e:	2140      	movs	r1, #64	; 0x40
     640:	795a      	ldrb	r2, [r3, #5]
     642:	430a      	orrs	r2, r1
     644:	715a      	strb	r2, [r3, #5]
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
     646:	bd70      	pop	{r4, r5, r6, pc}
     648:	200005f8 	.word	0x200005f8
     64c:	8fffffff 	.word	0x8fffffff
     650:	20000410 	.word	0x20000410
     654:	2000024c 	.word	0x2000024c
     658:	f0003fff 	.word	0xf0003fff

0000065c <_ZN20USBDevice_SAMD21G18x5resetEv>:

	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
     65c:	b570      	push	{r4, r5, r6, lr}
	usb.CTRLA.bit.SWRST = 1;
     65e:	0004      	movs	r4, r0
     660:	2101      	movs	r1, #1
     662:	cc04      	ldmia	r4!, {r2}

	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
     664:	0005      	movs	r5, r0
	usb.CTRLA.bit.SWRST = 1;
     666:	7813      	ldrb	r3, [r2, #0]
	memset(EP, 0, sizeof(EP));
     668:	0020      	movs	r0, r4
	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
	usb.CTRLA.bit.SWRST = 1;
     66a:	430b      	orrs	r3, r1
     66c:	7013      	strb	r3, [r2, #0]
	memset(EP, 0, sizeof(EP));
     66e:	2280      	movs	r2, #128	; 0x80
     670:	2100      	movs	r1, #0
     672:	0052      	lsls	r2, r2, #1
     674:	f001 fc89 	bl	1f8a <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
     678:	682b      	ldr	r3, [r5, #0]
     67a:	789a      	ldrb	r2, [r3, #2]
     67c:	07d2      	lsls	r2, r2, #31
     67e:	d4fc      	bmi.n	67a <_ZN20USBDevice_SAMD21G18x5resetEv+0x1e>
	usb.DESCADD.reg = (uint32_t)(&EP);
     680:	625c      	str	r4, [r3, #36]	; 0x24
}
     682:	bd70      	pop	{r4, r5, r6, pc}

00000684 <_ZN20USBDevice_SAMD21G18x9calibrateEv>:
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
     684:	221f      	movs	r2, #31
     686:	4b14      	ldr	r3, [pc, #80]	; (6d8 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x54>)
	memset(EP, 0, sizeof(EP));
	while (usb.SYNCBUSY.bit.SWRST) {}
	usb.DESCADD.reg = (uint32_t)(&EP);
}

void USBDevice_SAMD21G18x::calibrate() {
     688:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
     68a:	681b      	ldr	r3, [r3, #0]
     68c:	0b59      	lsrs	r1, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
     68e:	0c9c      	lsrs	r4, r3, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
     690:	019b      	lsls	r3, r3, #6
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
     692:	4011      	ands	r1, r2
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
     694:	0f5b      	lsrs	r3, r3, #29
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
     696:	4022      	ands	r2, r4
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;

	if (pad_transn == 0x1F)  // maximum value (31)
     698:	291f      	cmp	r1, #31
     69a:	d100      	bne.n	69e <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x1a>
		pad_transn = 5;
     69c:	391a      	subs	r1, #26
	if (pad_transp == 0x1F)  // maximum value (31)
     69e:	2a1f      	cmp	r2, #31
     6a0:	d100      	bne.n	6a4 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x20>
		pad_transp = 29;
     6a2:	3a02      	subs	r2, #2
	if (pad_trim == 0x7)     // maximum value (7)
     6a4:	2b07      	cmp	r3, #7
     6a6:	d100      	bne.n	6aa <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x26>
		pad_trim = 3;
     6a8:	3b04      	subs	r3, #4

	usb.PADCAL.bit.TRANSN = pad_transn;
     6aa:	251f      	movs	r5, #31
     6ac:	6806      	ldr	r6, [r0, #0]
     6ae:	018c      	lsls	r4, r1, #6
     6b0:	8d37      	ldrh	r7, [r6, #40]	; 0x28
     6b2:	490a      	ldr	r1, [pc, #40]	; (6dc <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x58>)
	usb.PADCAL.bit.TRANSP = pad_transp;
     6b4:	402a      	ands	r2, r5
	if (pad_transp == 0x1F)  // maximum value (31)
		pad_transp = 29;
	if (pad_trim == 0x7)     // maximum value (7)
		pad_trim = 3;

	usb.PADCAL.bit.TRANSN = pad_transn;
     6b6:	4039      	ands	r1, r7
     6b8:	4321      	orrs	r1, r4
     6ba:	8531      	strh	r1, [r6, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
     6bc:	6804      	ldr	r4, [r0, #0]
     6be:	8d21      	ldrh	r1, [r4, #40]	; 0x28
     6c0:	43a9      	bics	r1, r5
     6c2:	430a      	orrs	r2, r1
     6c4:	8522      	strh	r2, [r4, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
     6c6:	6801      	ldr	r1, [r0, #0]
     6c8:	031a      	lsls	r2, r3, #12
     6ca:	8d08      	ldrh	r0, [r1, #40]	; 0x28
     6cc:	4b04      	ldr	r3, [pc, #16]	; (6e0 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x5c>)
     6ce:	4003      	ands	r3, r0
     6d0:	4313      	orrs	r3, r2
     6d2:	850b      	strh	r3, [r1, #40]	; 0x28
}
     6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6d6:	46c0      	nop			; (mov r8, r8)
     6d8:	00806024 	.word	0x00806024
     6dc:	fffff83f 	.word	0xfffff83f
     6e0:	ffff8fff 	.word	0xffff8fff

000006e4 <_ZN7__GuardC1Ev>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     6e4:	f3ef 8310 	mrs	r3, PRIMASK
 * TODO: Move into a separate header file and make an API out of it
 */

class __Guard {
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
     6e8:	6003      	str	r3, [r0, #0]
     6ea:	2301      	movs	r3, #1
     6ec:	6043      	str	r3, [r0, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     6ee:	b672      	cpsid	i
		__disable_irq();
	}
     6f0:	4770      	bx	lr

000006f2 <_ZN7__GuardD1Ev>:
	~__Guard() {
		if (primask == 0) {
     6f2:	6803      	ldr	r3, [r0, #0]
     6f4:	2b00      	cmp	r3, #0
     6f6:	d102      	bne.n	6fe <_ZN7__GuardD1Ev+0xc>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     6f8:	b662      	cpsie	i
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
     6fa:	f3bf 8f6f 	isb	sy
			__enable_irq();
			// http://infocenter.arm.com/help/topic/com.arm.doc.dai0321a/BIHBFEIB.html
			__ISB();
		}
	}
     6fe:	4770      	bx	lr

00000700 <_ZNK26DoubleBufferedEPOutHandler9availableEv>:
			release();
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
     700:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (current == 0) {
     702:	6905      	ldr	r5, [r0, #16]
			release();
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
     704:	0004      	movs	r4, r0
		if (current == 0) {
			bool ready = false;
			synchronized {
     706:	4668      	mov	r0, sp
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
		if (current == 0) {
     708:	2d00      	cmp	r5, #0
     70a:	d113      	bne.n	734 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x34>
			bool ready = false;
			synchronized {
     70c:	f7ff ffea 	bl	6e4 <_ZN7__GuardC1Ev>
     710:	9b01      	ldr	r3, [sp, #4]
				ready = ready0;
     712:	1d62      	adds	r2, r4, #5

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
		if (current == 0) {
			bool ready = false;
			synchronized {
     714:	3b01      	subs	r3, #1
     716:	d302      	bcc.n	71e <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x1e>
				ready = ready0;
     718:	7fd5      	ldrb	r5, [r2, #31]
     71a:	b2ed      	uxtb	r5, r5
     71c:	e7fa      	b.n	714 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x14>

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
		if (current == 0) {
			bool ready = false;
			synchronized {
     71e:	4668      	mov	r0, sp
     720:	9301      	str	r3, [sp, #4]
     722:	f7ff ffe6 	bl	6f2 <_ZN7__GuardD1Ev>
				ready = ready0;
			}
			return ready ? (last0 - first0) : 0;
     726:	2d00      	cmp	r5, #0
     728:	d101      	bne.n	72e <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2e>
     72a:	2000      	movs	r0, #0
     72c:	e016      	b.n	75c <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x5c>
     72e:	6a23      	ldr	r3, [r4, #32]
     730:	69e0      	ldr	r0, [r4, #28]
     732:	e012      	b.n	75a <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x5a>
		} else {
			bool ready = false;
     734:	2500      	movs	r5, #0
			synchronized {
     736:	f7ff ffd5 	bl	6e4 <_ZN7__GuardC1Ev>
     73a:	9b01      	ldr	r3, [sp, #4]
     73c:	3b01      	subs	r3, #1
     73e:	d304      	bcc.n	74a <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x4a>
				ready = ready1;
     740:	0022      	movs	r2, r4
     742:	3234      	adds	r2, #52	; 0x34
     744:	7815      	ldrb	r5, [r2, #0]
     746:	b2ed      	uxtb	r5, r5
				ready = ready0;
			}
			return ready ? (last0 - first0) : 0;
		} else {
			bool ready = false;
			synchronized {
     748:	e7f8      	b.n	73c <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x3c>
     74a:	4668      	mov	r0, sp
     74c:	9301      	str	r3, [sp, #4]
     74e:	f7ff ffd0 	bl	6f2 <_ZN7__GuardD1Ev>
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
     752:	2d00      	cmp	r5, #0
     754:	d0e9      	beq.n	72a <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2a>
     756:	6b23      	ldr	r3, [r4, #48]	; 0x30
     758:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
     75a:	1a18      	subs	r0, r3, r0
		}
	}
     75c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00000760 <_ZN26DoubleBufferedEPOutHandler7releaseEv>:
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     760:	6843      	ldr	r3, [r0, #4]
			}
			return ready ? (last1 - first1) : 0;
		}
	}

	void release() {
     762:	b530      	push	{r4, r5, lr}
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     764:	6819      	ldr	r1, [r3, #0]
     766:	23ff      	movs	r3, #255	; 0xff
     768:	2401      	movs	r4, #1
     76a:	6882      	ldr	r2, [r0, #8]
     76c:	401a      	ands	r2, r3
     76e:	0152      	lsls	r2, r2, #5
     770:	188a      	adds	r2, r1, r2
     772:	18d2      	adds	r2, r2, r3
     774:	7a91      	ldrb	r1, [r2, #10]
     776:	4321      	orrs	r1, r4
     778:	7291      	strb	r1, [r2, #10]
	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     77a:	6882      	ldr	r2, [r0, #8]
     77c:	6841      	ldr	r1, [r0, #4]
     77e:	401a      	ands	r2, r3
     780:	0152      	lsls	r2, r2, #5
     782:	188a      	adds	r2, r1, r2
     784:	68c1      	ldr	r1, [r0, #12]
     786:	6895      	ldr	r5, [r2, #8]
     788:	048c      	lsls	r4, r1, #18
     78a:	490d      	ldr	r1, [pc, #52]	; (7c0 <_ZN26DoubleBufferedEPOutHandler7releaseEv+0x60>)
     78c:	0924      	lsrs	r4, r4, #4
     78e:	4029      	ands	r1, r5
     790:	4321      	orrs	r1, r4
     792:	6091      	str	r1, [r2, #8]
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     794:	6882      	ldr	r2, [r0, #8]
     796:	6841      	ldr	r1, [r0, #4]
     798:	401a      	ands	r2, r3
     79a:	0152      	lsls	r2, r2, #5
     79c:	188a      	adds	r2, r1, r2
     79e:	6891      	ldr	r1, [r2, #8]
     7a0:	0b89      	lsrs	r1, r1, #14
     7a2:	0389      	lsls	r1, r1, #14
     7a4:	6091      	str	r1, [r2, #8]
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     7a6:	6881      	ldr	r1, [r0, #8]
     7a8:	6842      	ldr	r2, [r0, #4]
     7aa:	400b      	ands	r3, r1
     7ac:	2140      	movs	r1, #64	; 0x40
     7ae:	6812      	ldr	r2, [r2, #0]
     7b0:	3308      	adds	r3, #8
     7b2:	015b      	lsls	r3, r3, #5
     7b4:	18d3      	adds	r3, r2, r3
     7b6:	791a      	ldrb	r2, [r3, #4]
     7b8:	430a      	orrs	r2, r1
     7ba:	711a      	strb	r2, [r3, #4]
		// Release OUT EP
		usbd.epBank0EnableTransferComplete(ep);
		usbd.epBank0SetMultiPacketSize(ep, size);
		usbd.epBank0SetByteCount(ep, 0);
		usbd.epBank0ResetReady(ep);
	}
     7bc:	bd30      	pop	{r4, r5, pc}
     7be:	46c0      	nop			; (mov r8, r8)
     7c0:	f0003fff 	.word	0xf0003fff

000007c4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
			}
			return i;
		}
	}

	virtual void handleEndpoint()
     7c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     7c6:	6843      	ldr	r3, [r0, #4]
			}
			return i;
		}
	}

	virtual void handleEndpoint()
     7c8:	0004      	movs	r4, r0
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     7ca:	6818      	ldr	r0, [r3, #0]
     7cc:	23ff      	movs	r3, #255	; 0xff
     7ce:	68a1      	ldr	r1, [r4, #8]
     7d0:	4019      	ands	r1, r3
     7d2:	000a      	movs	r2, r1
     7d4:	3208      	adds	r2, #8
     7d6:	0152      	lsls	r2, r2, #5
     7d8:	1882      	adds	r2, r0, r2
     7da:	79d1      	ldrb	r1, [r2, #7]

	virtual void handleEndpoint()
	{
		// R/W : incoming, ready0/1
		//   W : last0/1, notify
		if (usbd.epBank0IsTransferComplete(ep))
     7dc:	07c9      	lsls	r1, r1, #31
     7de:	d552      	bpl.n	886 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xc2>
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
     7e0:	2501      	movs	r5, #1
     7e2:	71d5      	strb	r5, [r2, #7]
     7e4:	68a2      	ldr	r2, [r4, #8]
			// Ack Transfer complete
			usbd.epBank0AckTransferComplete(ep);
			//usbd.epBank0AckTransferFailed(ep); // XXX

			// Update counters and swap banks
			if (incoming == 0) {
     7e6:	6960      	ldr	r0, [r4, #20]
     7e8:	6861      	ldr	r1, [r4, #4]
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     7ea:	4013      	ands	r3, r2
			// Ack Transfer complete
			usbd.epBank0AckTransferComplete(ep);
			//usbd.epBank0AckTransferFailed(ep); // XXX

			// Update counters and swap banks
			if (incoming == 0) {
     7ec:	2800      	cmp	r0, #0
     7ee:	d11d      	bne.n	82c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     7f0:	015a      	lsls	r2, r3, #5
     7f2:	188b      	adds	r3, r1, r2
     7f4:	689a      	ldr	r2, [r3, #8]
			//usbd.epBank0AckTransferFailed(ep); // XXX

			// Update counters and swap banks
			if (incoming == 0) {
				last0 = usbd.epBank0ByteCount(ep);
				incoming = 1;
     7f6:	6165      	str	r5, [r4, #20]
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     7f8:	0492      	lsls	r2, r2, #18
     7fa:	0c92      	lsrs	r2, r2, #18
			usbd.epBank0AckTransferComplete(ep);
			//usbd.epBank0AckTransferFailed(ep); // XXX

			// Update counters and swap banks
			if (incoming == 0) {
				last0 = usbd.epBank0ByteCount(ep);
     7fc:	6222      	str	r2, [r4, #32]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     7fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			if (incoming == 0) {
				last0 = usbd.epBank0ByteCount(ep);
				incoming = 1;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
				ready0 = true;
				synchronized {
     800:	4668      	mov	r0, sp
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     802:	605a      	str	r2, [r3, #4]
			// Update counters and swap banks
			if (incoming == 0) {
				last0 = usbd.epBank0ByteCount(ep);
				incoming = 1;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
				ready0 = true;
     804:	1d63      	adds	r3, r4, #5
     806:	77dd      	strb	r5, [r3, #31]
				synchronized {
     808:	f7ff ff6c 	bl	6e4 <_ZN7__GuardC1Ev>
     80c:	0021      	movs	r1, r4
     80e:	9b01      	ldr	r3, [sp, #4]
     810:	3135      	adds	r1, #53	; 0x35
     812:	3b01      	subs	r3, #1
     814:	1c5a      	adds	r2, r3, #1
     816:	d02f      	beq.n	878 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb4>
					if (ready1) {
     818:	0022      	movs	r2, r4
     81a:	3234      	adds	r2, #52	; 0x34
     81c:	7812      	ldrb	r2, [r2, #0]
     81e:	1e58      	subs	r0, r3, #1
     820:	b2d2      	uxtb	r2, r2
     822:	2a00      	cmp	r2, #0
     824:	d11e      	bne.n	864 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xa0>
						notify = true;
						return;
					}
					notify = false;
     826:	700a      	strb	r2, [r1, #0]
			if (incoming == 0) {
				last0 = usbd.epBank0ByteCount(ep);
				incoming = 1;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
				ready0 = true;
				synchronized {
     828:	0003      	movs	r3, r0
     82a:	e7f3      	b.n	814 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x50>
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     82c:	015b      	lsls	r3, r3, #5
     82e:	18cb      	adds	r3, r1, r3
     830:	689a      	ldr	r2, [r3, #8]
				}
			} else {
				last1 = usbd.epBank0ByteCount(ep);
				incoming = 0;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
				synchronized {
     832:	4668      	mov	r0, sp
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     834:	0492      	lsls	r2, r2, #18
     836:	0c92      	lsrs	r2, r2, #18
						return;
					}
					notify = false;
				}
			} else {
				last1 = usbd.epBank0ByteCount(ep);
     838:	6322      	str	r2, [r4, #48]	; 0x30
				incoming = 0;
     83a:	2200      	movs	r2, #0
     83c:	6162      	str	r2, [r4, #20]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     83e:	69a2      	ldr	r2, [r4, #24]
				last1 = usbd.epBank0ByteCount(ep);
				incoming = 0;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
				synchronized {
					ready1 = true;
					if (ready0) {
     840:	1d66      	adds	r6, r4, #5
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     842:	605a      	str	r2, [r3, #4]
				}
			} else {
				last1 = usbd.epBank0ByteCount(ep);
				incoming = 0;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
				synchronized {
     844:	f7ff ff4e 	bl	6e4 <_ZN7__GuardC1Ev>
     848:	0021      	movs	r1, r4
     84a:	9b01      	ldr	r3, [sp, #4]
     84c:	3135      	adds	r1, #53	; 0x35
     84e:	3b01      	subs	r3, #1
     850:	1c5a      	adds	r2, r3, #1
     852:	d011      	beq.n	878 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb4>
					ready1 = true;
     854:	0022      	movs	r2, r4
     856:	3234      	adds	r2, #52	; 0x34
     858:	7015      	strb	r5, [r2, #0]
					if (ready0) {
     85a:	7ff2      	ldrb	r2, [r6, #31]
     85c:	1e58      	subs	r0, r3, #1
     85e:	b2d2      	uxtb	r2, r2
     860:	2a00      	cmp	r2, #0
     862:	d006      	beq.n	872 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xae>
     864:	9301      	str	r3, [sp, #4]
						notify = true;
     866:	2301      	movs	r3, #1
						return;
     868:	4668      	mov	r0, sp
				incoming = 0;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
				synchronized {
					ready1 = true;
					if (ready0) {
						notify = true;
     86a:	700b      	strb	r3, [r1, #0]
						return;
     86c:	f7ff ff41 	bl	6f2 <_ZN7__GuardD1Ev>
     870:	e009      	b.n	886 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xc2>
					}
					notify = false;
     872:	700a      	strb	r2, [r1, #0]
				}
			} else {
				last1 = usbd.epBank0ByteCount(ep);
				incoming = 0;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
				synchronized {
     874:	0003      	movs	r3, r0
     876:	e7eb      	b.n	850 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x8c>
     878:	4668      	mov	r0, sp
     87a:	9301      	str	r3, [sp, #4]
     87c:	f7ff ff39 	bl	6f2 <_ZN7__GuardD1Ev>
						return;
					}
					notify = false;
				}
			}
			release();
     880:	0020      	movs	r0, r4
     882:	f7ff ff6d 	bl	760 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
		}
	}
     886:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

00000888 <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));

		release();
	}

	virtual uint32_t recv(void *_data, uint32_t len)
     888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	{
		uint8_t *data = reinterpret_cast<uint8_t *>(_data);

		// R/W: current, first0/1, ready0/1, notify
		// R  : last0/1, data0/1
		if (current == 0) {
     88a:	6905      	ldr	r5, [r0, #16]
		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));

		release();
	}

	virtual uint32_t recv(void *_data, uint32_t len)
     88c:	0004      	movs	r4, r0
     88e:	000f      	movs	r7, r1
     890:	0016      	movs	r6, r2
		uint8_t *data = reinterpret_cast<uint8_t *>(_data);

		// R/W: current, first0/1, ready0/1, notify
		// R  : last0/1, data0/1
		if (current == 0) {
			synchronized {
     892:	4668      	mov	r0, sp
	{
		uint8_t *data = reinterpret_cast<uint8_t *>(_data);

		// R/W: current, first0/1, ready0/1, notify
		// R  : last0/1, data0/1
		if (current == 0) {
     894:	2d00      	cmp	r5, #0
     896:	d119      	bne.n	8cc <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x44>
			synchronized {
     898:	f7ff ff24 	bl	6e4 <_ZN7__GuardC1Ev>
     89c:	9b01      	ldr	r3, [sp, #4]
				if (!ready0) {
     89e:	1d60      	adds	r0, r4, #5
     8a0:	3b01      	subs	r3, #1
		uint8_t *data = reinterpret_cast<uint8_t *>(_data);

		// R/W: current, first0/1, ready0/1, notify
		// R  : last0/1, data0/1
		if (current == 0) {
			synchronized {
     8a2:	1c5a      	adds	r2, r3, #1
     8a4:	d005      	beq.n	8b2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x2a>
				if (!ready0) {
     8a6:	7fc2      	ldrb	r2, [r0, #31]
     8a8:	1e59      	subs	r1, r3, #1
     8aa:	2a00      	cmp	r2, #0
     8ac:	d040      	beq.n	930 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xa8>
     8ae:	000b      	movs	r3, r1
     8b0:	e7f7      	b.n	8a2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1a>
		uint8_t *data = reinterpret_cast<uint8_t *>(_data);

		// R/W: current, first0/1, ready0/1, notify
		// R  : last0/1, data0/1
		if (current == 0) {
			synchronized {
     8b2:	4668      	mov	r0, sp
     8b4:	9301      	str	r3, [sp, #4]
     8b6:	f7ff ff1c 	bl	6f2 <_ZN7__GuardD1Ev>
					return 0;
				}
			}
			// when ready0==true the buffer is not being filled and last0 is constant
			uint32_t i;
			for (i=0; i<len && first0 < last0; i++) {
     8ba:	2200      	movs	r2, #0
     8bc:	69e3      	ldr	r3, [r4, #28]
     8be:	4296      	cmp	r6, r2
     8c0:	d043      	beq.n	94a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xc2>
     8c2:	6a21      	ldr	r1, [r4, #32]
     8c4:	428b      	cmp	r3, r1
     8c6:	d338      	bcc.n	93a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xb2>
     8c8:	0016      	movs	r6, r2
     8ca:	e03e      	b.n	94a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xc2>
					}
				}
			}
			return i;
		} else {
			synchronized {
     8cc:	f7ff ff0a 	bl	6e4 <_ZN7__GuardC1Ev>
     8d0:	9b01      	ldr	r3, [sp, #4]
     8d2:	3b01      	subs	r3, #1
     8d4:	1c5a      	adds	r2, r3, #1
     8d6:	d008      	beq.n	8ea <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x62>
				if (!ready1) {
     8d8:	0022      	movs	r2, r4
     8da:	3234      	adds	r2, #52	; 0x34
     8dc:	7815      	ldrb	r5, [r2, #0]
     8de:	1e5a      	subs	r2, r3, #1
     8e0:	b2ed      	uxtb	r5, r5
     8e2:	2d00      	cmp	r5, #0
     8e4:	d024      	beq.n	930 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xa8>
     8e6:	0013      	movs	r3, r2
     8e8:	e7f4      	b.n	8d4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x4c>
					}
				}
			}
			return i;
		} else {
			synchronized {
     8ea:	4668      	mov	r0, sp
     8ec:	9301      	str	r3, [sp, #4]
					return 0;
				}
			}
			// when ready1==true the buffer is not being filled and last1 is constant
			uint32_t i;
			for (i=0; i<len && first1 < last1; i++) {
     8ee:	2500      	movs	r5, #0
					}
				}
			}
			return i;
		} else {
			synchronized {
     8f0:	f7ff feff 	bl	6f2 <_ZN7__GuardD1Ev>
     8f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
					return 0;
				}
			}
			// when ready1==true the buffer is not being filled and last1 is constant
			uint32_t i;
			for (i=0; i<len && first1 < last1; i++) {
     8f6:	42b5      	cmp	r5, r6
     8f8:	d00a      	beq.n	910 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x88>
     8fa:	6b22      	ldr	r2, [r4, #48]	; 0x30
     8fc:	4293      	cmp	r3, r2
     8fe:	d207      	bcs.n	910 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x88>
				data[i] = data1[first1++];
     900:	1c5a      	adds	r2, r3, #1
     902:	62e2      	str	r2, [r4, #44]	; 0x2c
     904:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     906:	18d3      	adds	r3, r2, r3
     908:	781b      	ldrb	r3, [r3, #0]
     90a:	557b      	strb	r3, [r7, r5]
					return 0;
				}
			}
			// when ready1==true the buffer is not being filled and last1 is constant
			uint32_t i;
			for (i=0; i<len && first1 < last1; i++) {
     90c:	3501      	adds	r5, #1
     90e:	e7f1      	b.n	8f4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x6c>
				data[i] = data1[first1++];
			}
			if (first1 == last1) {
     910:	6b22      	ldr	r2, [r4, #48]	; 0x30
     912:	4293      	cmp	r3, r2
     914:	d14f      	bne.n	9b6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x12e>
				first1 = 0;
     916:	2300      	movs	r3, #0
				current = 0;
				synchronized {
     918:	4668      	mov	r0, sp
			uint32_t i;
			for (i=0; i<len && first1 < last1; i++) {
				data[i] = data1[first1++];
			}
			if (first1 == last1) {
				first1 = 0;
     91a:	62e3      	str	r3, [r4, #44]	; 0x2c
				current = 0;
     91c:	6123      	str	r3, [r4, #16]
				synchronized {
     91e:	f7ff fee1 	bl	6e4 <_ZN7__GuardC1Ev>
					ready1 = false;
					if (notify) {
     922:	0022      	movs	r2, r4
			}
			if (first1 == last1) {
				first1 = 0;
				current = 0;
				synchronized {
					ready1 = false;
     924:	2600      	movs	r6, #0
     926:	9b01      	ldr	r3, [sp, #4]
					if (notify) {
     928:	3235      	adds	r2, #53	; 0x35
     92a:	3b01      	subs	r3, #1
				data[i] = data1[first1++];
			}
			if (first1 == last1) {
				first1 = 0;
				current = 0;
				synchronized {
     92c:	1c59      	adds	r1, r3, #1
     92e:	d132      	bne.n	996 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x10e>
     930:	4668      	mov	r0, sp
     932:	9301      	str	r3, [sp, #4]
     934:	f7ff fedd 	bl	6f2 <_ZN7__GuardD1Ev>
     938:	e03d      	b.n	9b6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x12e>
				}
			}
			// when ready0==true the buffer is not being filled and last0 is constant
			uint32_t i;
			for (i=0; i<len && first0 < last0; i++) {
				data[i] = data0[first0++];
     93a:	1c59      	adds	r1, r3, #1
     93c:	61e1      	str	r1, [r4, #28]
     93e:	69a1      	ldr	r1, [r4, #24]
     940:	18cb      	adds	r3, r1, r3
     942:	781b      	ldrb	r3, [r3, #0]
     944:	54bb      	strb	r3, [r7, r2]
					return 0;
				}
			}
			// when ready0==true the buffer is not being filled and last0 is constant
			uint32_t i;
			for (i=0; i<len && first0 < last0; i++) {
     946:	3201      	adds	r2, #1
     948:	e7b8      	b.n	8bc <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x34>
				data[i] = data0[first0++];
			}
			if (first0 == last0) {
     94a:	6a22      	ldr	r2, [r4, #32]
     94c:	4293      	cmp	r3, r2
     94e:	d120      	bne.n	992 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x10a>
				first0 = 0;
     950:	2300      	movs	r3, #0
     952:	61e3      	str	r3, [r4, #28]
				current = 1;
     954:	3301      	adds	r3, #1
     956:	6123      	str	r3, [r4, #16]
				synchronized {
     958:	4668      	mov	r0, sp
     95a:	f7ff fec3 	bl	6e4 <_ZN7__GuardC1Ev>
					ready0 = false;
					if (notify) {
     95e:	0022      	movs	r2, r4
			}
			if (first0 == last0) {
				first0 = 0;
				current = 1;
				synchronized {
					ready0 = false;
     960:	2700      	movs	r7, #0
     962:	9b01      	ldr	r3, [sp, #4]
     964:	1d65      	adds	r5, r4, #5
     966:	3b01      	subs	r3, #1
					if (notify) {
     968:	3235      	adds	r2, #53	; 0x35
				data[i] = data0[first0++];
			}
			if (first0 == last0) {
				first0 = 0;
				current = 1;
				synchronized {
     96a:	1c59      	adds	r1, r3, #1
     96c:	d00d      	beq.n	98a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x102>
					ready0 = false;
     96e:	77ef      	strb	r7, [r5, #31]
					if (notify) {
     970:	7811      	ldrb	r1, [r2, #0]
     972:	1e58      	subs	r0, r3, #1
     974:	2900      	cmp	r1, #0
     976:	d101      	bne.n	97c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xf4>
     978:	0003      	movs	r3, r0
     97a:	e7f6      	b.n	96a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xe2>
     97c:	9301      	str	r3, [sp, #4]
						notify = false;
     97e:	2300      	movs	r3, #0
						release();
     980:	0020      	movs	r0, r4
				first0 = 0;
				current = 1;
				synchronized {
					ready0 = false;
					if (notify) {
						notify = false;
     982:	7013      	strb	r3, [r2, #0]
						release();
     984:	f7ff feec 	bl	760 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     988:	e7e9      	b.n	95e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd6>
				data[i] = data0[first0++];
			}
			if (first0 == last0) {
				first0 = 0;
				current = 1;
				synchronized {
     98a:	4668      	mov	r0, sp
     98c:	9301      	str	r3, [sp, #4]
     98e:	f7ff feb0 	bl	6f2 <_ZN7__GuardD1Ev>
			// when ready0==true the buffer is not being filled and last0 is constant
			uint32_t i;
			for (i=0; i<len && first0 < last0; i++) {
				data[i] = data0[first0++];
			}
			if (first0 == last0) {
     992:	0035      	movs	r5, r6
     994:	e00f      	b.n	9b6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x12e>
			}
			if (first1 == last1) {
				first1 = 0;
				current = 0;
				synchronized {
					ready1 = false;
     996:	0021      	movs	r1, r4
     998:	3134      	adds	r1, #52	; 0x34
     99a:	700e      	strb	r6, [r1, #0]
					if (notify) {
     99c:	7811      	ldrb	r1, [r2, #0]
     99e:	1e58      	subs	r0, r3, #1
     9a0:	2900      	cmp	r1, #0
     9a2:	d101      	bne.n	9a8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x120>
     9a4:	0003      	movs	r3, r0
     9a6:	e7c1      	b.n	92c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xa4>
     9a8:	9301      	str	r3, [sp, #4]
						notify = false;
     9aa:	2300      	movs	r3, #0
						release();
     9ac:	0020      	movs	r0, r4
				first1 = 0;
				current = 0;
				synchronized {
					ready1 = false;
					if (notify) {
						notify = false;
     9ae:	7013      	strb	r3, [r2, #0]
						release();
     9b0:	f7ff fed6 	bl	760 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     9b4:	e7b5      	b.n	922 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x9a>
					}
				}
			}
			return i;
		}
	}
     9b6:	0028      	movs	r0, r5
     9b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000009ba <_ZN14USBDeviceClass14SendInterfacesEPm>:
		sendControl(_pack_buffer, _pack_size);
	}
}

uint8_t USBDeviceClass::SendInterfaces(uint32_t* total)
{
     9ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t interfaces = 0;
     9bc:	466b      	mov	r3, sp
     9be:	1ddc      	adds	r4, r3, #7
     9c0:	2300      	movs	r3, #0
		sendControl(_pack_buffer, _pack_size);
	}
}

uint8_t USBDeviceClass::SendInterfaces(uint32_t* total)
{
     9c2:	000d      	movs	r5, r1
	uint8_t interfaces = 0;

#if defined(CDC_ENABLED)
	total[0] += CDC_GetInterface(&interfaces);
     9c4:	0020      	movs	r0, r4
	}
}

uint8_t USBDeviceClass::SendInterfaces(uint32_t* total)
{
	uint8_t interfaces = 0;
     9c6:	7023      	strb	r3, [r4, #0]

#if defined(CDC_ENABLED)
	total[0] += CDC_GetInterface(&interfaces);
     9c8:	f7ff fd90 	bl	4ec <_Z16CDC_GetInterfacePh>
     9cc:	682b      	ldr	r3, [r5, #0]
     9ce:	1818      	adds	r0, r3, r0
     9d0:	6028      	str	r0, [r5, #0]
#endif

#ifdef PLUGGABLE_USB_ENABLED
	total[0] += PluggableUSB().getInterface(&interfaces);
     9d2:	f001 f9ad 	bl	1d30 <_Z12PluggableUSBv>
     9d6:	0021      	movs	r1, r4
     9d8:	f001 f966 	bl	1ca8 <_ZN13PluggableUSB_12getInterfaceEPh>
     9dc:	682b      	ldr	r3, [r5, #0]
     9de:	1818      	adds	r0, r3, r0
     9e0:	6028      	str	r0, [r5, #0]
#endif

	return interfaces;
     9e2:	7820      	ldrb	r0, [r4, #0]
}
     9e4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

000009e8 <_ZN14USBDeviceClass14handleEndpointEh>:
}

void USBDeviceClass::handleEndpoint(uint8_t ep)
{
#if defined(CDC_ENABLED)
	if (ep == CDC_ENDPOINT_IN)
     9e8:	2903      	cmp	r1, #3
     9ea:	d10c      	bne.n	a06 <_ZN14USBDeviceClass14handleEndpointEh+0x1e>
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
     9ec:	2080      	movs	r0, #128	; 0x80
     9ee:	4b0e      	ldr	r3, [pc, #56]	; (a28 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
     9f0:	3162      	adds	r1, #98	; 0x62
     9f2:	681b      	ldr	r3, [r3, #0]
     9f4:	31ff      	adds	r1, #255	; 0xff
     9f6:	5c5a      	ldrb	r2, [r3, r1]
     9f8:	4240      	negs	r0, r0
     9fa:	4302      	orrs	r2, r0
     9fc:	545a      	strb	r2, [r3, r1]

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     9fe:	3963      	subs	r1, #99	; 0x63
     a00:	39ff      	subs	r1, #255	; 0xff
     a02:	2268      	movs	r2, #104	; 0x68
     a04:	e00d      	b.n	a22 <_ZN14USBDeviceClass14handleEndpointEh+0x3a>
	{
		// NAK on endpoint IN, the bank is not yet filled in.
		usbd.epBank1ResetReady(CDC_ENDPOINT_IN);
		usbd.epBank1AckTransferComplete(CDC_ENDPOINT_IN);
	}
	if (ep == CDC_ENDPOINT_ACM)
     a06:	2901      	cmp	r1, #1
     a08:	d10d      	bne.n	a26 <_ZN14USBDeviceClass14handleEndpointEh+0x3e>
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
     a0a:	2080      	movs	r0, #128	; 0x80
     a0c:	4b06      	ldr	r3, [pc, #24]	; (a28 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
     a0e:	3124      	adds	r1, #36	; 0x24
     a10:	681b      	ldr	r3, [r3, #0]
     a12:	31ff      	adds	r1, #255	; 0xff
     a14:	5c5a      	ldrb	r2, [r3, r1]
     a16:	4240      	negs	r0, r0
     a18:	4302      	orrs	r2, r0
     a1a:	545a      	strb	r2, [r3, r1]

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     a1c:	2228      	movs	r2, #40	; 0x28
     a1e:	3923      	subs	r1, #35	; 0x23
     a20:	39ff      	subs	r1, #255	; 0xff
     a22:	32ff      	adds	r2, #255	; 0xff
     a24:	5499      	strb	r1, [r3, r2]
#endif

#if defined(PLUGGABLE_USB_ENABLED)
	// Empty
#endif
}
     a26:	4770      	bx	lr
     a28:	200005f8 	.word	0x200005f8

00000a2c <_ZN14USBDeviceClass4initEv>:

void USBDeviceClass::init()
{
     a2c:	b570      	push	{r4, r5, r6, lr}
#ifdef PIN_LED_TXL
	txLEDPulse = 0;
     a2e:	2500      	movs	r5, #0
     a30:	4b2f      	ldr	r3, [pc, #188]	; (af0 <_ZN14USBDeviceClass4initEv+0xc4>)
	pinMode(PIN_LED_TXL, OUTPUT);
     a32:	2101      	movs	r1, #1
	// Empty
#endif
}

void USBDeviceClass::init()
{
     a34:	0004      	movs	r4, r0
#ifdef PIN_LED_TXL
	txLEDPulse = 0;
	pinMode(PIN_LED_TXL, OUTPUT);
     a36:	201a      	movs	r0, #26
}

void USBDeviceClass::init()
{
#ifdef PIN_LED_TXL
	txLEDPulse = 0;
     a38:	701d      	strb	r5, [r3, #0]
	pinMode(PIN_LED_TXL, OUTPUT);
     a3a:	f000 fe1b 	bl	1674 <pinMode>
	digitalWrite(PIN_LED_TXL, HIGH);
     a3e:	2101      	movs	r1, #1
     a40:	201a      	movs	r0, #26
     a42:	f000 fe6b 	bl	171c <digitalWrite>
#endif

#ifdef PIN_LED_RXL
	rxLEDPulse = 0;
     a46:	4b2b      	ldr	r3, [pc, #172]	; (af4 <_ZN14USBDeviceClass4initEv+0xc8>)
	pinMode(PIN_LED_RXL, OUTPUT);
     a48:	2101      	movs	r1, #1
     a4a:	2019      	movs	r0, #25
	pinMode(PIN_LED_TXL, OUTPUT);
	digitalWrite(PIN_LED_TXL, HIGH);
#endif

#ifdef PIN_LED_RXL
	rxLEDPulse = 0;
     a4c:	701d      	strb	r5, [r3, #0]
	pinMode(PIN_LED_RXL, OUTPUT);
     a4e:	f000 fe11 	bl	1674 <pinMode>
	digitalWrite(PIN_LED_RXL, HIGH);
     a52:	2101      	movs	r1, #1
     a54:	2019      	movs	r0, #25
     a56:	f000 fe61 	bl	171c <digitalWrite>
#endif

	// Enable USB clock
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
     a5a:	2120      	movs	r1, #32
     a5c:	4a26      	ldr	r2, [pc, #152]	; (af8 <_ZN14USBDeviceClass4initEv+0xcc>)

	// Set up the USB DP/DN pins
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
     a5e:	3501      	adds	r5, #1
	pinMode(PIN_LED_RXL, OUTPUT);
	digitalWrite(PIN_LED_RXL, HIGH);
#endif

	// Enable USB clock
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
     a60:	69d3      	ldr	r3, [r2, #28]
     a62:	430b      	orrs	r3, r1
     a64:	61d3      	str	r3, [r2, #28]

	// Set up the USB DP/DN pins
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
     a66:	4a25      	ldr	r2, [pc, #148]	; (afc <_ZN14USBDeviceClass4initEv+0xd0>)
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
     a68:	391a      	subs	r1, #26

	// Enable USB clock
	PM->APBBMASK.reg |= PM_APBBMASK_USB;

	// Set up the USB DP/DN pins
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
     a6a:	7813      	ldrb	r3, [r2, #0]
     a6c:	432b      	orrs	r3, r5
     a6e:	7013      	strb	r3, [r2, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
     a70:	220f      	movs	r2, #15
     a72:	4b23      	ldr	r3, [pc, #140]	; (b00 <_ZN14USBDeviceClass4initEv+0xd4>)
     a74:	7818      	ldrb	r0, [r3, #0]
     a76:	4390      	bics	r0, r2
     a78:	7018      	strb	r0, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
     a7a:	7818      	ldrb	r0, [r3, #0]
     a7c:	4308      	orrs	r0, r1
     a7e:	7018      	strb	r0, [r3, #0]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
     a80:	4820      	ldr	r0, [pc, #128]	; (b04 <_ZN14USBDeviceClass4initEv+0xd8>)
     a82:	7801      	ldrb	r1, [r0, #0]
     a84:	4329      	orrs	r1, r5
     a86:	7001      	strb	r1, [r0, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
     a88:	7819      	ldrb	r1, [r3, #0]
     a8a:	400a      	ands	r2, r1
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
     a8c:	2160      	movs	r1, #96	; 0x60
	// Set up the USB DP/DN pins
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
     a8e:	701a      	strb	r2, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
     a90:	781a      	ldrb	r2, [r3, #0]
     a92:	430a      	orrs	r2, r1
     a94:	701a      	strb	r2, [r3, #0]

	// Put Generic Clock Generator 0 as source for Generic Clock Multiplexer 6 (USB reference)
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
	                    GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
	                    GCLK_CLKCTRL_CLKEN;
     a96:	4b1c      	ldr	r3, [pc, #112]	; (b08 <_ZN14USBDeviceClass4initEv+0xdc>)
     a98:	4a1c      	ldr	r2, [pc, #112]	; (b0c <_ZN14USBDeviceClass4initEv+0xe0>)
     a9a:	805a      	strh	r2, [r3, #2]
	while (GCLK->STATUS.bit.SYNCBUSY)
     a9c:	785a      	ldrb	r2, [r3, #1]
     a9e:	09d2      	lsrs	r2, r2, #7
     aa0:	d1fc      	bne.n	a9c <_ZN14USBDeviceClass4initEv+0x70>
		;

	USB_SetHandler(&UDD_Handler);
     aa2:	481b      	ldr	r0, [pc, #108]	; (b10 <_ZN14USBDeviceClass4initEv+0xe4>)
     aa4:	f7ff fb8c 	bl	1c0 <USB_SetHandler>

	// Reset USB Device
	usbd.reset();
     aa8:	4d1a      	ldr	r5, [pc, #104]	; (b14 <_ZN14USBDeviceClass4initEv+0xe8>)
     aaa:	0028      	movs	r0, r5
     aac:	f7ff fdd6 	bl	65c <_ZN20USBDevice_SAMD21G18x5resetEv>

	usbd.calibrate();
     ab0:	0028      	movs	r0, r5
     ab2:	f7ff fde7 	bl	684 <_ZN20USBDevice_SAMD21G18x9calibrateEv>
	// Enable
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
	inline void disable() { usb.CTRLA.bit.ENABLE = 0; }

	// USB mode (device/host)
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
     ab6:	227f      	movs	r2, #127	; 0x7f
     ab8:	682b      	ldr	r3, [r5, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     aba:	20c1      	movs	r0, #193	; 0xc1
     abc:	7819      	ldrb	r1, [r3, #0]
     abe:	0080      	lsls	r0, r0, #2
     ac0:	400a      	ands	r2, r1
	inline void setUSBHostMode()   { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_HOST_Val;   }

	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
     ac2:	2104      	movs	r1, #4
	// Enable
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
	inline void disable() { usb.CTRLA.bit.ENABLE = 0; }

	// USB mode (device/host)
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
     ac4:	701a      	strb	r2, [r3, #0]
	inline void setUSBHostMode()   { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_HOST_Val;   }

	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
     ac6:	781a      	ldrb	r2, [r3, #0]
     ac8:	430a      	orrs	r2, r1
     aca:	701a      	strb	r2, [r3, #0]
	inline void noRunInStandby() { usb.CTRLA.bit.RUNSTDBY = 0; }

	// USB speed
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
     acc:	891a      	ldrh	r2, [r3, #8]
     ace:	3108      	adds	r1, #8
     ad0:	438a      	bics	r2, r1
     ad2:	4911      	ldr	r1, [pc, #68]	; (b18 <_ZN14USBDeviceClass4initEv+0xec>)
     ad4:	811a      	strh	r2, [r3, #8]
     ad6:	580a      	ldr	r2, [r1, r0]
     ad8:	0212      	lsls	r2, r2, #8
     ada:	0a12      	lsrs	r2, r2, #8
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
     adc:	500a      	str	r2, [r1, r0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     ade:	2280      	movs	r2, #128	; 0x80
     ae0:	600a      	str	r2, [r1, #0]

	// Reset USB Device
	void reset();

	// Enable
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
     ae2:	2102      	movs	r1, #2
     ae4:	781a      	ldrb	r2, [r3, #0]
     ae6:	430a      	orrs	r2, r1
     ae8:	701a      	strb	r2, [r3, #0]
	NVIC_SetPriority((IRQn_Type) USB_IRQn, 0UL);
	NVIC_EnableIRQ((IRQn_Type) USB_IRQn);

	usbd.enable();

	initialized = true;
     aea:	2301      	movs	r3, #1
     aec:	7023      	strb	r3, [r4, #0]
}
     aee:	bd70      	pop	{r4, r5, r6, pc}
     af0:	2000040c 	.word	0x2000040c
     af4:	200005f4 	.word	0x200005f4
     af8:	40000400 	.word	0x40000400
     afc:	41004458 	.word	0x41004458
     b00:	4100443c 	.word	0x4100443c
     b04:	41004459 	.word	0x41004459
     b08:	40000c00 	.word	0x40000c00
     b0c:	00004006 	.word	0x00004006
     b10:	000014fd 	.word	0x000014fd
     b14:	200005f8 	.word	0x200005f8
     b18:	e000e100 	.word	0xe000e100

00000b1c <_ZN14USBDeviceClass6attachEv>:

bool USBDeviceClass::attach()
{
	if (!initialized)
     b1c:	7800      	ldrb	r0, [r0, #0]
     b1e:	2800      	cmp	r0, #0
     b20:	d010      	beq.n	b44 <_ZN14USBDeviceClass6attachEv+0x28>
	inline void setLowSpeed()        { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;   }
	inline void setHiSpeed()         { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_HS_Val;   }
	inline void setHiSpeedTestMode() { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_HSTM_Val; }

	// Authorize attach if Vbus is present
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
     b22:	2101      	movs	r1, #1
     b24:	4b08      	ldr	r3, [pc, #32]	; (b48 <_ZN14USBDeviceClass6attachEv+0x2c>)
     b26:	681b      	ldr	r3, [r3, #0]
     b28:	891a      	ldrh	r2, [r3, #8]
     b2a:	438a      	bics	r2, r1
     b2c:	811a      	strh	r2, [r3, #8]
	inline void detach() { usb.CTRLB.bit.DETACH = 1; }

	// USB Interrupts
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
     b2e:	8b1a      	ldrh	r2, [r3, #24]
     b30:	3107      	adds	r1, #7
     b32:	430a      	orrs	r2, r1
     b34:	831a      	strh	r2, [r3, #24]
	inline void disableEndOfResetInterrupt()   { usb.INTENCLR.bit.EORST = 1; }

	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
     b36:	8b1a      	ldrh	r2, [r3, #24]
     b38:	3904      	subs	r1, #4
     b3a:	430a      	orrs	r2, r1
     b3c:	831a      	strh	r2, [r3, #24]

	usbd.attach();
	usbd.enableEndOfResetInterrupt();
	usbd.enableStartOfFrameInterrupt();

	_usbConfiguration = 0;
     b3e:	2200      	movs	r2, #0
     b40:	4b02      	ldr	r3, [pc, #8]	; (b4c <_ZN14USBDeviceClass6attachEv+0x30>)
     b42:	601a      	str	r2, [r3, #0]
	return true;
}
     b44:	4770      	bx	lr
     b46:	46c0      	nop			; (mov r8, r8)
     b48:	200005f8 	.word	0x200005f8
     b4c:	200006fc 	.word	0x200006fc

00000b50 <_ZN14USBDeviceClass10setAddressEm>:

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     b50:	4a0e      	ldr	r2, [pc, #56]	; (b8c <_ZN14USBDeviceClass10setAddressEm+0x3c>)

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
     b52:	2080      	movs	r0, #128	; 0x80

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     b54:	6993      	ldr	r3, [r2, #24]

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
     b56:	4240      	negs	r0, r0

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     b58:	0b9b      	lsrs	r3, r3, #14
     b5a:	039b      	lsls	r3, r3, #14
     b5c:	6193      	str	r3, [r2, #24]

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     b5e:	6813      	ldr	r3, [r2, #0]
     b60:	2202      	movs	r2, #2
     b62:	33ff      	adds	r3, #255	; 0xff
     b64:	721a      	strb	r2, [r3, #8]

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
     b66:	799a      	ldrb	r2, [r3, #6]
     b68:	4302      	orrs	r2, r0
     b6a:	719a      	strb	r2, [r3, #6]

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
     b6c:	7a1a      	ldrb	r2, [r3, #8]

	// RAM buffer is full, we can send data (IN)
	usbd.epBank1SetReady(0);

	// Wait for transfer to complete
	while (!usbd.epBank1IsTransferComplete(0)) {}
     b6e:	0792      	lsls	r2, r2, #30
     b70:	d5fc      	bpl.n	b6c <_ZN14USBDeviceClass10setAddressEm+0x1c>

	// Set USB address to addr
	USB->DEVICE.DADD.bit.DADD = addr; // Address
     b72:	207f      	movs	r0, #127	; 0x7f
     b74:	4b06      	ldr	r3, [pc, #24]	; (b90 <_ZN14USBDeviceClass10setAddressEm+0x40>)
     b76:	4001      	ands	r1, r0
     b78:	7a9a      	ldrb	r2, [r3, #10]
     b7a:	4382      	bics	r2, r0
     b7c:	4311      	orrs	r1, r2
     b7e:	7299      	strb	r1, [r3, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
     b80:	2180      	movs	r1, #128	; 0x80
     b82:	7a9a      	ldrb	r2, [r3, #10]
     b84:	4249      	negs	r1, r1
     b86:	430a      	orrs	r2, r1
     b88:	729a      	strb	r2, [r3, #10]
}
     b8a:	4770      	bx	lr
     b8c:	200005f8 	.word	0x200005f8
     b90:	41005000 	.word	0x41005000

00000b94 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
	return _usbConfiguration != 0;
}

bool USBDeviceClass::handleClassInterfaceSetup(USBSetup& setup)
{
     b94:	b510      	push	{r4, lr}
	uint8_t i = setup.wIndex;

	#if defined(CDC_ENABLED)
	if (CDC_ACM_INTERFACE == i)
     b96:	790b      	ldrb	r3, [r1, #4]
{
	return _usbConfiguration != 0;
}

bool USBDeviceClass::handleClassInterfaceSetup(USBSetup& setup)
{
     b98:	000c      	movs	r4, r1
	uint8_t i = setup.wIndex;

	#if defined(CDC_ENABLED)
	if (CDC_ACM_INTERFACE == i)
     b9a:	2b00      	cmp	r3, #0
     b9c:	d10b      	bne.n	bb6 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x22>
	{
		if (CDC_Setup(setup) == false) {
     b9e:	0008      	movs	r0, r1
     ba0:	f7ff fcb2 	bl	508 <_Z9CDC_SetupR8USBSetup>
     ba4:	2800      	cmp	r0, #0
     ba6:	d104      	bne.n	bb2 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x1e>

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     ba8:	4a09      	ldr	r2, [pc, #36]	; (bd0 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x3c>)
     baa:	6993      	ldr	r3, [r2, #24]
     bac:	0b9b      	lsrs	r3, r3, #14
     bae:	039b      	lsls	r3, r3, #14
     bb0:	6193      	str	r3, [r2, #24]
			sendZlp(0);
		}
		return true;
     bb2:	2001      	movs	r0, #1
     bb4:	e00b      	b.n	bce <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x3a>
	}
	#endif

	#if defined(PLUGGABLE_USB_ENABLED)
	bool ret = PluggableUSB().setup(setup);
     bb6:	f001 f8bb 	bl	1d30 <_Z12PluggableUSBv>
     bba:	0021      	movs	r1, r4
     bbc:	f001 f8a8 	bl	1d10 <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
     bc0:	2800      	cmp	r0, #0
     bc2:	d1f6      	bne.n	bb2 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x1e>
     bc4:	4a02      	ldr	r2, [pc, #8]	; (bd0 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x3c>)
     bc6:	6993      	ldr	r3, [r2, #24]
     bc8:	0b9b      	lsrs	r3, r3, #14
     bca:	039b      	lsls	r3, r3, #14
     bcc:	6193      	str	r3, [r2, #24]
	}
	return ret;
	#endif

	return false;
}
     bce:	bd10      	pop	{r4, pc}
     bd0:	200005f8 	.word	0x200005f8

00000bd4 <_ZN14USBDeviceClass6initEPEmm>:
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
{
     bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bd6:	000d      	movs	r5, r1
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
     bd8:	2a83      	cmp	r2, #131	; 0x83
     bda:	d116      	bne.n	c0a <_ZN14USBDeviceClass6initEPEmm+0x36>
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     bdc:	4841      	ldr	r0, [pc, #260]	; (ce4 <_ZN14USBDeviceClass6initEPEmm+0x110>)
     bde:	b2cb      	uxtb	r3, r1
     be0:	0159      	lsls	r1, r3, #5
     be2:	1841      	adds	r1, r0, r1
     be4:	698e      	ldr	r6, [r1, #24]
     be6:	4a40      	ldr	r2, [pc, #256]	; (ce8 <_ZN14USBDeviceClass6initEPEmm+0x114>)
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
     be8:	01ad      	lsls	r5, r5, #6
     bea:	4032      	ands	r2, r6
     bec:	26c0      	movs	r6, #192	; 0xc0
     bee:	05b6      	lsls	r6, r6, #22
     bf0:	4332      	orrs	r2, r6
     bf2:	618a      	str	r2, [r1, #24]
     bf4:	4a3d      	ldr	r2, [pc, #244]	; (cec <_ZN14USBDeviceClass6initEPEmm+0x118>)
	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     bf6:	3308      	adds	r3, #8
     bf8:	1955      	adds	r5, r2, r5
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     bfa:	614d      	str	r5, [r1, #20]
	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     bfc:	6801      	ldr	r1, [r0, #0]
     bfe:	2070      	movs	r0, #112	; 0x70
     c00:	015b      	lsls	r3, r3, #5
     c02:	5c5a      	ldrb	r2, [r3, r1]
     c04:	4382      	bics	r2, r0
     c06:	3830      	subs	r0, #48	; 0x30
     c08:	e062      	b.n	cd0 <_ZN14USBDeviceClass6initEPEmm+0xfc>
		usbd.epBank1SetType(ep, 4); // INTERRUPT IN
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
     c0a:	2a02      	cmp	r2, #2
     c0c:	d142      	bne.n	c94 <_ZN14USBDeviceClass6initEPEmm+0xc0>
	{
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
     c0e:	2038      	movs	r0, #56	; 0x38
     c10:	f000 fe6e 	bl	18f0 <_Znwj>
		usbd(usbDev),
		ep(endPoint), size(bufferSize),
		current(0), incoming(0),
		first0(0), last0(0), ready0(false),
		first1(0), last1(0), ready1(false),
		notify(false)
     c14:	4b36      	ldr	r3, [pc, #216]	; (cf0 <_ZN14USBDeviceClass6initEPEmm+0x11c>)
     c16:	2780      	movs	r7, #128	; 0x80
     c18:	6003      	str	r3, [r0, #0]
     c1a:	2300      	movs	r3, #0
     c1c:	4e31      	ldr	r6, [pc, #196]	; (ce4 <_ZN14USBDeviceClass6initEPEmm+0x110>)
     c1e:	007f      	lsls	r7, r7, #1
     c20:	1d42      	adds	r2, r0, #5
     c22:	6203      	str	r3, [r0, #32]
     c24:	6103      	str	r3, [r0, #16]
     c26:	6143      	str	r3, [r0, #20]
     c28:	61c3      	str	r3, [r0, #28]
     c2a:	6046      	str	r6, [r0, #4]
     c2c:	6085      	str	r5, [r0, #8]
     c2e:	60c7      	str	r7, [r0, #12]
     c30:	77d3      	strb	r3, [r2, #31]
     c32:	322f      	adds	r2, #47	; 0x2f
     c34:	0004      	movs	r4, r0
     c36:	62c3      	str	r3, [r0, #44]	; 0x2c
     c38:	6303      	str	r3, [r0, #48]	; 0x30
     c3a:	7013      	strb	r3, [r2, #0]
	{
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
     c3c:	0038      	movs	r0, r7
		usbd(usbDev),
		ep(endPoint), size(bufferSize),
		current(0), incoming(0),
		first0(0), last0(0), ready0(false),
		first1(0), last1(0), ready1(false),
		notify(false)
     c3e:	7053      	strb	r3, [r2, #1]
	{
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
     c40:	f001 f990 	bl	1f64 <malloc>
     c44:	61a0      	str	r0, [r4, #24]
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
     c46:	0038      	movs	r0, r7
     c48:	f001 f98c 	bl	1f64 <malloc>
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     c4c:	23ff      	movs	r3, #255	; 0xff
     c4e:	002a      	movs	r2, r5
     c50:	401a      	ands	r2, r3
		first0(0), last0(0), ready0(false),
		first1(0), last1(0), ready1(false),
		notify(false)
	{
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
     c52:	62a0      	str	r0, [r4, #40]	; 0x28
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     c54:	0150      	lsls	r0, r2, #5
     c56:	1830      	adds	r0, r6, r0
     c58:	6887      	ldr	r7, [r0, #8]
     c5a:	4923      	ldr	r1, [pc, #140]	; (ce8 <_ZN14USBDeviceClass6initEPEmm+0x114>)

	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     c5c:	3208      	adds	r2, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     c5e:	4039      	ands	r1, r7
     c60:	27c0      	movs	r7, #192	; 0xc0
     c62:	05bf      	lsls	r7, r7, #22
     c64:	4339      	orrs	r1, r7
     c66:	6081      	str	r1, [r0, #8]

	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     c68:	6830      	ldr	r0, [r6, #0]
     c6a:	2607      	movs	r6, #7
     c6c:	0152      	lsls	r2, r2, #5
     c6e:	5c11      	ldrb	r1, [r2, r0]
     c70:	00ad      	lsls	r5, r5, #2
     c72:	43b1      	bics	r1, r6
     c74:	3e04      	subs	r6, #4
     c76:	4331      	orrs	r1, r6
     c78:	5411      	strb	r1, [r2, r0]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     c7a:	68a2      	ldr	r2, [r4, #8]
		usbd.epBank0SetSize(ep, 64);
		usbd.epBank0SetType(ep, 3); // BULK OUT

		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));

		release();
     c7c:	0020      	movs	r0, r4
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     c7e:	4013      	ands	r3, r2
     c80:	6862      	ldr	r2, [r4, #4]
     c82:	015b      	lsls	r3, r3, #5
     c84:	18d3      	adds	r3, r2, r3
     c86:	69a2      	ldr	r2, [r4, #24]
     c88:	605a      	str	r2, [r3, #4]
		usbd.epBank0SetSize(ep, 64);
		usbd.epBank0SetType(ep, 3); // BULK OUT

		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));

		release();
     c8a:	f7ff fd69 	bl	760 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     c8e:	4b19      	ldr	r3, [pc, #100]	; (cf4 <_ZN14USBDeviceClass6initEPEmm+0x120>)
     c90:	50ec      	str	r4, [r5, r3]
     c92:	e025      	b.n	ce0 <_ZN14USBDeviceClass6initEPEmm+0x10c>
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
     c94:	2a82      	cmp	r2, #130	; 0x82
     c96:	d11e      	bne.n	cd6 <_ZN14USBDeviceClass6initEPEmm+0x102>
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     c98:	4812      	ldr	r0, [pc, #72]	; (ce4 <_ZN14USBDeviceClass6initEPEmm+0x110>)
     c9a:	b2cb      	uxtb	r3, r1
     c9c:	0159      	lsls	r1, r3, #5
     c9e:	1841      	adds	r1, r0, r1
     ca0:	698e      	ldr	r6, [r1, #24]
     ca2:	4a11      	ldr	r2, [pc, #68]	; (ce8 <_ZN14USBDeviceClass6initEPEmm+0x114>)
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
     ca4:	2480      	movs	r4, #128	; 0x80
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     ca6:	4032      	ands	r2, r6
     ca8:	26c0      	movs	r6, #192	; 0xc0
     caa:	05b6      	lsls	r6, r6, #22
     cac:	4332      	orrs	r2, r6
     cae:	618a      	str	r2, [r1, #24]
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
     cb0:	4a0e      	ldr	r2, [pc, #56]	; (cec <_ZN14USBDeviceClass6initEPEmm+0x118>)
     cb2:	01ad      	lsls	r5, r5, #6
     cb4:	1955      	adds	r5, r2, r5
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     cb6:	614d      	str	r5, [r1, #20]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
     cb8:	3308      	adds	r3, #8
     cba:	6801      	ldr	r1, [r0, #0]
     cbc:	015b      	lsls	r3, r3, #5
     cbe:	18c8      	adds	r0, r1, r3
     cc0:	7902      	ldrb	r2, [r0, #4]
     cc2:	4264      	negs	r4, r4
     cc4:	4322      	orrs	r2, r4
     cc6:	7102      	strb	r2, [r0, #4]
	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     cc8:	2070      	movs	r0, #112	; 0x70
     cca:	5c5a      	ldrb	r2, [r3, r1]
     ccc:	4382      	bics	r2, r0
     cce:	3840      	subs	r0, #64	; 0x40
     cd0:	4302      	orrs	r2, r0
     cd2:	545a      	strb	r2, [r3, r1]
     cd4:	e004      	b.n	ce0 <_ZN14USBDeviceClass6initEPEmm+0x10c>
		// NAK on endpoint IN, the bank is not yet filled in.
		usbd.epBank1ResetReady(ep);

		usbd.epBank1SetType(ep, 3); // BULK IN
	}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
     cd6:	2a00      	cmp	r2, #0
     cd8:	d102      	bne.n	ce0 <_ZN14USBDeviceClass6initEPEmm+0x10c>
     cda:	0008      	movs	r0, r1
     cdc:	f7ff fc7e 	bl	5dc <_ZN14USBDeviceClass6initEPEmm.part.5>
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
     ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ce2:	46c0      	nop			; (mov r8, r8)
     ce4:	200005f8 	.word	0x200005f8
     ce8:	8fffffff 	.word	0x8fffffff
     cec:	2000024c 	.word	0x2000024c
     cf0:	000020dc 	.word	0x000020dc
     cf4:	200005d0 	.word	0x200005d0

00000cf8 <_ZN14USBDeviceClass13initEndpointsEv>:
	0,
	0,
#endif
};

void USBDeviceClass::initEndpoints() {
     cf8:	b570      	push	{r4, r5, r6, lr}
     cfa:	0005      	movs	r5, r0
     cfc:	2401      	movs	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
     cfe:	4b06      	ldr	r3, [pc, #24]	; (d18 <_ZN14USBDeviceClass13initEndpointsEv+0x20>)
     d00:	00a2      	lsls	r2, r4, #2
     d02:	58d2      	ldr	r2, [r2, r3]
     d04:	2a00      	cmp	r2, #0
     d06:	d005      	beq.n	d14 <_ZN14USBDeviceClass13initEndpointsEv+0x1c>
		initEP(i, EndPoints[i]);
     d08:	0021      	movs	r1, r4
     d0a:	0028      	movs	r0, r5
     d0c:	f7ff ff62 	bl	bd4 <_ZN14USBDeviceClass6initEPEmm>
     d10:	3401      	adds	r4, #1
	0,
#endif
};

void USBDeviceClass::initEndpoints() {
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
     d12:	e7f4      	b.n	cfe <_ZN14USBDeviceClass13initEndpointsEv+0x6>
		initEP(i, EndPoints[i]);
	}
}
     d14:	bd70      	pop	{r4, r5, r6, pc}
     d16:	46c0      	nop			; (mov r8, r8)
     d18:	20000058 	.word	0x20000058

00000d1c <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
     d1c:	4b08      	ldr	r3, [pc, #32]	; (d40 <_ZN14USBDeviceClass9availableEm+0x24>)
     d1e:	008a      	lsls	r2, r1, #2
     d20:	58d0      	ldr	r0, [r2, r3]
	return read;
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
     d22:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
     d24:	2800      	cmp	r0, #0
     d26:	d003      	beq.n	d30 <_ZN14USBDeviceClass9availableEm+0x14>
		return epHandlers[ep]->available();
     d28:	6803      	ldr	r3, [r0, #0]
     d2a:	689b      	ldr	r3, [r3, #8]
     d2c:	4798      	blx	r3
     d2e:	e006      	b.n	d3e <_ZN14USBDeviceClass9availableEm+0x22>
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     d30:	b2c9      	uxtb	r1, r1
     d32:	4b04      	ldr	r3, [pc, #16]	; (d44 <_ZN14USBDeviceClass9availableEm+0x28>)
     d34:	0149      	lsls	r1, r1, #5
     d36:	1859      	adds	r1, r3, r1
     d38:	6888      	ldr	r0, [r1, #8]
     d3a:	0480      	lsls	r0, r0, #18
     d3c:	0c80      	lsrs	r0, r0, #18
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
     d3e:	bd10      	pop	{r4, pc}
     d40:	200005d0 	.word	0x200005d0
     d44:	200005f8 	.word	0x200005f8

00000d48 <_ZN14USBDeviceClass5flushEm>:
		usbd.epBank0SetReady(ep);
	}
}

void USBDeviceClass::flush(uint32_t ep)
{
     d48:	b510      	push	{r4, lr}
     d4a:	000c      	movs	r4, r1
	if (available(ep)) {
     d4c:	f7ff ffe6 	bl	d1c <_ZN14USBDeviceClass9availableEm>
     d50:	2800      	cmp	r0, #0
     d52:	d00c      	beq.n	d6e <_ZN14USBDeviceClass5flushEm+0x26>

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
     d54:	2280      	movs	r2, #128	; 0x80
     d56:	4b06      	ldr	r3, [pc, #24]	; (d70 <_ZN14USBDeviceClass5flushEm+0x28>)
     d58:	b2e4      	uxtb	r4, r4
     d5a:	6819      	ldr	r1, [r3, #0]
     d5c:	3408      	adds	r4, #8
     d5e:	0164      	lsls	r4, r4, #5
     d60:	1909      	adds	r1, r1, r4
     d62:	794b      	ldrb	r3, [r1, #5]
     d64:	4252      	negs	r2, r2
     d66:	4313      	orrs	r3, r2
     d68:	714b      	strb	r3, [r1, #5]

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     d6a:	2302      	movs	r3, #2
     d6c:	71cb      	strb	r3, [r1, #7]
		usbd.epBank1SetReady(ep);

	 	// Clear the transfer complete flag
		usbd.epBank1AckTransferComplete(ep);
	}
}
     d6e:	bd10      	pop	{r4, pc}
     d70:	200005f8 	.word	0x200005f8

00000d74 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:
}

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
     d74:	4a14      	ldr	r2, [pc, #80]	; (dc8 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x54>)
		return c;
	}
}

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
     d76:	b5f0      	push	{r4, r5, r6, r7, lr}
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     d78:	b2cb      	uxtb	r3, r1
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
     d7a:	0189      	lsls	r1, r1, #6
     d7c:	1851      	adds	r1, r2, r1
     d7e:	4a13      	ldr	r2, [pc, #76]	; (dcc <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x58>)
     d80:	015c      	lsls	r4, r3, #5
     d82:	1910      	adds	r0, r2, r4
     d84:	6041      	str	r1, [r0, #4]
	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     d86:	6885      	ldr	r5, [r0, #8]
     d88:	4911      	ldr	r1, [pc, #68]	; (dd0 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x5c>)
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     d8a:	2740      	movs	r7, #64	; 0x40
	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     d8c:	4029      	ands	r1, r5
     d8e:	2580      	movs	r5, #128	; 0x80
     d90:	02ad      	lsls	r5, r5, #10
     d92:	4329      	orrs	r1, r5
     d94:	6081      	str	r1, [r0, #8]
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     d96:	6881      	ldr	r1, [r0, #8]
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     d98:	3308      	adds	r3, #8
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     d9a:	0b89      	lsrs	r1, r1, #14
     d9c:	0389      	lsls	r1, r1, #14
     d9e:	6081      	str	r1, [r0, #8]
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     da0:	6810      	ldr	r0, [r2, #0]
     da2:	0159      	lsls	r1, r3, #5
     da4:	1846      	adds	r6, r0, r1
     da6:	7935      	ldrb	r5, [r6, #4]
     da8:	433d      	orrs	r5, r7
     daa:	7135      	strb	r5, [r6, #4]
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
	inline void epBank1DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT1 = 1; }

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
     dac:	1845      	adds	r5, r0, r1
     dae:	79ad      	ldrb	r5, [r5, #6]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
     db0:	066d      	lsls	r5, r5, #25
     db2:	d5fb      	bpl.n	dac <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x38>
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     db4:	015b      	lsls	r3, r3, #5
     db6:	18c1      	adds	r1, r0, r3
     db8:	79c9      	ldrb	r1, [r1, #7]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
     dba:	07c9      	lsls	r1, r1, #31
     dbc:	d5fb      	bpl.n	db6 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x42>
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     dbe:	1914      	adds	r4, r2, r4
     dc0:	68a0      	ldr	r0, [r4, #8]
	return usbd.epBank0ByteCount(ep);
     dc2:	b2c0      	uxtb	r0, r0
}
     dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dc6:	46c0      	nop			; (mov r8, r8)
     dc8:	20000410 	.word	0x20000410
     dcc:	200005f8 	.word	0x200005f8
     dd0:	f0003fff 	.word	0xf0003fff

00000dd4 <_ZN14USBDeviceClass11recvControlEPvm>:
	return f != USB->DEVICE.FNUM.bit.FNUM;
}


uint32_t USBDeviceClass::recvControl(void *_data, uint32_t len)
{
     dd4:	b570      	push	{r4, r5, r6, lr}
     dd6:	000d      	movs	r5, r1
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     dd8:	2140      	movs	r1, #64	; 0x40
     dda:	4b0b      	ldr	r3, [pc, #44]	; (e08 <_ZN14USBDeviceClass11recvControlEPvm+0x34>)
     ddc:	0014      	movs	r4, r2
     dde:	681b      	ldr	r3, [r3, #0]
     de0:	33ff      	adds	r3, #255	; 0xff
     de2:	795a      	ldrb	r2, [r3, #5]
     de4:	430a      	orrs	r2, r1
     de6:	715a      	strb	r2, [r3, #5]

	// The RAM Buffer is empty: we can receive data
	usbd.epBank0ResetReady(0);

	//usbd.epBank0AckSetupReceived(0);
	uint32_t read = armRecvCtrlOUT(0);
     de8:	2100      	movs	r1, #0
     dea:	f7ff ffc3 	bl	d74 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
     dee:	42a0      	cmp	r0, r4
     df0:	d900      	bls.n	df4 <_ZN14USBDeviceClass11recvControlEPvm+0x20>
     df2:	0020      	movs	r0, r4
	if (read > len)
		read = len;
	//while (!usbd.epBank0AckTransferComplete(0)) {}
	uint8_t *buffer = udd_ep_out_cache_buffer[0];
	for (uint32_t i=0; i<len; i++) {
     df4:	2300      	movs	r3, #0
		data[i] = buffer[i];
     df6:	4905      	ldr	r1, [pc, #20]	; (e0c <_ZN14USBDeviceClass11recvControlEPvm+0x38>)
	uint32_t read = armRecvCtrlOUT(0);
	if (read > len)
		read = len;
	//while (!usbd.epBank0AckTransferComplete(0)) {}
	uint8_t *buffer = udd_ep_out_cache_buffer[0];
	for (uint32_t i=0; i<len; i++) {
     df8:	42a3      	cmp	r3, r4
     dfa:	d003      	beq.n	e04 <_ZN14USBDeviceClass11recvControlEPvm+0x30>
		data[i] = buffer[i];
     dfc:	5c5a      	ldrb	r2, [r3, r1]
     dfe:	54ea      	strb	r2, [r5, r3]
	uint32_t read = armRecvCtrlOUT(0);
	if (read > len)
		read = len;
	//while (!usbd.epBank0AckTransferComplete(0)) {}
	uint8_t *buffer = udd_ep_out_cache_buffer[0];
	for (uint32_t i=0; i<len; i++) {
     e00:	3301      	adds	r3, #1
     e02:	e7f9      	b.n	df8 <_ZN14USBDeviceClass11recvControlEPvm+0x24>
		data[i] = buffer[i];
	}

	return read;
}
     e04:	bd70      	pop	{r4, r5, r6, pc}
     e06:	46c0      	nop			; (mov r8, r8)
     e08:	200005f8 	.word	0x200005f8
     e0c:	20000410 	.word	0x20000410

00000e10 <_ZN14USBDeviceClass7armRecvEm>:
	while (!usbd.epBank0IsTransferComplete(ep)) {}
	return usbd.epBank0ByteCount(ep);
}

uint8_t USBDeviceClass::armRecv(uint32_t ep)
{
     e10:	b530      	push	{r4, r5, lr}
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     e12:	b2c9      	uxtb	r1, r1
     e14:	4c0b      	ldr	r4, [pc, #44]	; (e44 <_ZN14USBDeviceClass7armRecvEm+0x34>)
     e16:	0149      	lsls	r1, r1, #5
     e18:	1860      	adds	r0, r4, r1
     e1a:	6883      	ldr	r3, [r0, #8]
     e1c:	049b      	lsls	r3, r3, #18
     e1e:	0c9b      	lsrs	r3, r3, #18
	uint16_t count = usbd.epBank0ByteCount(ep);
	if (count >= 64) {
     e20:	2b3f      	cmp	r3, #63	; 0x3f
     e22:	d907      	bls.n	e34 <_ZN14USBDeviceClass7armRecvEm+0x24>
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     e24:	3b40      	subs	r3, #64	; 0x40
     e26:	6885      	ldr	r5, [r0, #8]
     e28:	049b      	lsls	r3, r3, #18
     e2a:	0c9a      	lsrs	r2, r3, #18
     e2c:	0bab      	lsrs	r3, r5, #14
     e2e:	039b      	lsls	r3, r3, #14
     e30:	4313      	orrs	r3, r2
     e32:	e002      	b.n	e3a <_ZN14USBDeviceClass7armRecvEm+0x2a>
     e34:	6883      	ldr	r3, [r0, #8]
     e36:	0b9b      	lsrs	r3, r3, #14
     e38:	039b      	lsls	r3, r3, #14
     e3a:	6083      	str	r3, [r0, #8]
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     e3c:	1861      	adds	r1, r4, r1
     e3e:	6888      	ldr	r0, [r1, #8]
		usbd.epBank0SetByteCount(ep, count - 64);
	} else {
		usbd.epBank0SetByteCount(ep, 0);
	}
	return usbd.epBank0ByteCount(ep);
     e40:	b2c0      	uxtb	r0, r0
}
     e42:	bd30      	pop	{r4, r5, pc}
     e44:	200005f8 	.word	0x200005f8

00000e48 <_ZN14USBDeviceClass4recvEmPvm>:
}

// Non Blocking receive
// Return number of bytes read
uint32_t USBDeviceClass::recv(uint32_t ep, void *_data, uint32_t len)
{
     e48:	b5f0      	push	{r4, r5, r6, r7, lr}
     e4a:	001c      	movs	r4, r3
	if (!_usbConfiguration)
     e4c:	4b30      	ldr	r3, [pc, #192]	; (f10 <_ZN14USBDeviceClass4recvEmPvm+0xc8>)
}

// Non Blocking receive
// Return number of bytes read
uint32_t USBDeviceClass::recv(uint32_t ep, void *_data, uint32_t len)
{
     e4e:	b085      	sub	sp, #20
	if (!_usbConfiguration)
     e50:	681b      	ldr	r3, [r3, #0]
}

// Non Blocking receive
// Return number of bytes read
uint32_t USBDeviceClass::recv(uint32_t ep, void *_data, uint32_t len)
{
     e52:	0006      	movs	r6, r0
     e54:	000d      	movs	r5, r1
     e56:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
     e58:	2b00      	cmp	r3, #0
     e5a:	d052      	beq.n	f02 <_ZN14USBDeviceClass4recvEmPvm+0xba>
		return -1;

#ifdef PIN_LED_RXL
	if (rxLEDPulse == 0)
     e5c:	4f2d      	ldr	r7, [pc, #180]	; (f14 <_ZN14USBDeviceClass4recvEmPvm+0xcc>)
     e5e:	7839      	ldrb	r1, [r7, #0]
     e60:	b2c9      	uxtb	r1, r1
     e62:	2900      	cmp	r1, #0
     e64:	d102      	bne.n	e6c <_ZN14USBDeviceClass4recvEmPvm+0x24>
		digitalWrite(PIN_LED_RXL, LOW);
     e66:	2019      	movs	r0, #25
     e68:	f000 fc58 	bl	171c <digitalWrite>

	rxLEDPulse = TX_RX_LED_PULSE_MS;
     e6c:	2364      	movs	r3, #100	; 0x64
     e6e:	703b      	strb	r3, [r7, #0]
#endif

	if (epHandlers[ep]) {
     e70:	4b29      	ldr	r3, [pc, #164]	; (f18 <_ZN14USBDeviceClass4recvEmPvm+0xd0>)
     e72:	00aa      	lsls	r2, r5, #2
     e74:	58d0      	ldr	r0, [r2, r3]
     e76:	2800      	cmp	r0, #0
     e78:	d005      	beq.n	e86 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
		return epHandlers[ep]->recv(_data, len);
     e7a:	6803      	ldr	r3, [r0, #0]
     e7c:	0022      	movs	r2, r4
     e7e:	685b      	ldr	r3, [r3, #4]
     e80:	9901      	ldr	r1, [sp, #4]
     e82:	4798      	blx	r3
     e84:	e041      	b.n	f0a <_ZN14USBDeviceClass4recvEmPvm+0xc2>
	}

	if (available(ep) < len)
     e86:	0029      	movs	r1, r5
     e88:	0030      	movs	r0, r6
     e8a:	f7ff ff47 	bl	d1c <_ZN14USBDeviceClass9availableEm>
     e8e:	4284      	cmp	r4, r0
     e90:	d904      	bls.n	e9c <_ZN14USBDeviceClass4recvEmPvm+0x54>
		len = available(ep);
     e92:	0029      	movs	r1, r5
     e94:	0030      	movs	r0, r6
     e96:	f7ff ff41 	bl	d1c <_ZN14USBDeviceClass9availableEm>
     e9a:	0004      	movs	r4, r0

	armRecv(ep);
     e9c:	0029      	movs	r1, r5
     e9e:	0030      	movs	r0, r6
     ea0:	f7ff ffb6 	bl	e10 <_ZN14USBDeviceClass7armRecvEm>
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }

	inline void epBank0DisableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENCLR.bit.RXSTP = 1; }
	inline void epBank0DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL0 = 1; }
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
     ea4:	2101      	movs	r1, #1
     ea6:	b2eb      	uxtb	r3, r5
     ea8:	4f1c      	ldr	r7, [pc, #112]	; (f1c <_ZN14USBDeviceClass4recvEmPvm+0xd4>)
     eaa:	9303      	str	r3, [sp, #12]
     eac:	015b      	lsls	r3, r3, #5
     eae:	9302      	str	r3, [sp, #8]
     eb0:	9a02      	ldr	r2, [sp, #8]
     eb2:	683b      	ldr	r3, [r7, #0]

	usbd.epBank0DisableTransferComplete(ep);

	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
     eb4:	9801      	ldr	r0, [sp, #4]
     eb6:	189b      	adds	r3, r3, r2
     eb8:	33ff      	adds	r3, #255	; 0xff
     eba:	7a5a      	ldrb	r2, [r3, #9]
     ebc:	430a      	orrs	r2, r1
     ebe:	4918      	ldr	r1, [pc, #96]	; (f20 <_ZN14USBDeviceClass4recvEmPvm+0xd8>)
     ec0:	725a      	strb	r2, [r3, #9]
     ec2:	01ab      	lsls	r3, r5, #6
     ec4:	18c9      	adds	r1, r1, r3
     ec6:	0022      	movs	r2, r4
     ec8:	f001 f856 	bl	1f78 <memcpy>

	// release empty buffer
	if (len && !available(ep)) {
     ecc:	2c00      	cmp	r4, #0
     ece:	d01b      	beq.n	f08 <_ZN14USBDeviceClass4recvEmPvm+0xc0>
     ed0:	0029      	movs	r1, r5
     ed2:	0030      	movs	r0, r6
     ed4:	f7ff ff22 	bl	d1c <_ZN14USBDeviceClass9availableEm>
     ed8:	2800      	cmp	r0, #0
     eda:	d115      	bne.n	f08 <_ZN14USBDeviceClass4recvEmPvm+0xc0>
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     edc:	2040      	movs	r0, #64	; 0x40
     ede:	9b03      	ldr	r3, [sp, #12]
     ee0:	6839      	ldr	r1, [r7, #0]
     ee2:	3308      	adds	r3, #8
     ee4:	015b      	lsls	r3, r3, #5
     ee6:	18cb      	adds	r3, r1, r3
     ee8:	791a      	ldrb	r2, [r3, #4]
     eea:	4302      	orrs	r2, r0
     eec:	711a      	strb	r2, [r3, #4]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
     eee:	2201      	movs	r2, #1
     ef0:	71da      	strb	r2, [r3, #7]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     ef2:	9b02      	ldr	r3, [sp, #8]
     ef4:	18cb      	adds	r3, r1, r3
     ef6:	2101      	movs	r1, #1
     ef8:	33ff      	adds	r3, #255	; 0xff
     efa:	7a9a      	ldrb	r2, [r3, #10]
     efc:	430a      	orrs	r2, r1
     efe:	729a      	strb	r2, [r3, #10]
     f00:	e002      	b.n	f08 <_ZN14USBDeviceClass4recvEmPvm+0xc0>
// Non Blocking receive
// Return number of bytes read
uint32_t USBDeviceClass::recv(uint32_t ep, void *_data, uint32_t len)
{
	if (!_usbConfiguration)
		return -1;
     f02:	2001      	movs	r0, #1
     f04:	4240      	negs	r0, r0
     f06:	e000      	b.n	f0a <_ZN14USBDeviceClass4recvEmPvm+0xc2>
     f08:	0020      	movs	r0, r4
		// Enable Transfer complete 0 interrupt
		usbd.epBank0EnableTransferComplete(ep);
	}

	return len;
}
     f0a:	b005      	add	sp, #20
     f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f0e:	46c0      	nop			; (mov r8, r8)
     f10:	200006fc 	.word	0x200006fc
     f14:	200005f4 	.word	0x200005f4
     f18:	200005d0 	.word	0x200005d0
     f1c:	200005f8 	.word	0x200005f8
     f20:	20000410 	.word	0x20000410

00000f24 <_ZN14USBDeviceClass4recvEm>:

// Recv 1 byte if ready
int USBDeviceClass::recv(uint32_t ep)
{
     f24:	b513      	push	{r0, r1, r4, lr}
	uint8_t c;
	if (recv(ep, &c, 1) != 1) {
     f26:	466b      	mov	r3, sp
     f28:	1ddc      	adds	r4, r3, #7
     f2a:	0022      	movs	r2, r4
     f2c:	2301      	movs	r3, #1
     f2e:	f7ff ff8b 	bl	e48 <_ZN14USBDeviceClass4recvEmPvm>
     f32:	2801      	cmp	r0, #1
     f34:	d101      	bne.n	f3a <_ZN14USBDeviceClass4recvEm+0x16>
		return -1;
	} else {
		return c;
     f36:	7820      	ldrb	r0, [r4, #0]
     f38:	e001      	b.n	f3e <_ZN14USBDeviceClass4recvEm+0x1a>
// Recv 1 byte if ready
int USBDeviceClass::recv(uint32_t ep)
{
	uint8_t c;
	if (recv(ep, &c, 1) != 1) {
		return -1;
     f3a:	2001      	movs	r0, #1
     f3c:	4240      	negs	r0, r0
	} else {
		return c;
	}
}
     f3e:	bd16      	pop	{r1, r2, r4, pc}

00000f40 <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
     f40:	b5f0      	push	{r4, r5, r6, r7, lr}
     f42:	001d      	movs	r5, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
     f44:	4b3d      	ldr	r3, [pc, #244]	; (103c <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
     f46:	b085      	sub	sp, #20
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
     f48:	681b      	ldr	r3, [r3, #0]
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
     f4a:	000e      	movs	r6, r1
     f4c:	9203      	str	r2, [sp, #12]
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
     f4e:	2b00      	cmp	r3, #0
     f50:	d06f      	beq.n	1032 <_ZN14USBDeviceClass4sendEmPKvm+0xf2>
		return -1;
	if (len > 16384)
     f52:	2380      	movs	r3, #128	; 0x80
     f54:	01db      	lsls	r3, r3, #7
     f56:	429d      	cmp	r5, r3
     f58:	d86b      	bhi.n	1032 <_ZN14USBDeviceClass4sendEmPKvm+0xf2>
		return -1;

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
     f5a:	4c39      	ldr	r4, [pc, #228]	; (1040 <_ZN14USBDeviceClass4sendEmPKvm+0x100>)
     f5c:	7821      	ldrb	r1, [r4, #0]
     f5e:	b2c9      	uxtb	r1, r1
     f60:	2900      	cmp	r1, #0
     f62:	d102      	bne.n	f6a <_ZN14USBDeviceClass4sendEmPKvm+0x2a>
		digitalWrite(PIN_LED_TXL, LOW);
     f64:	201a      	movs	r0, #26
     f66:	f000 fbd9 	bl	171c <digitalWrite>

	txLEDPulse = TX_RX_LED_PULSE_MS;
     f6a:	2364      	movs	r3, #100	; 0x64
     f6c:	7023      	strb	r3, [r4, #0]
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
	uint32_t written = 0;
     f6e:	2300      	movs	r3, #0
     f70:	9301      	str	r3, [sp, #4]

	txLEDPulse = TX_RX_LED_PULSE_MS;
#endif

	// Flash area
	while (len != 0)
     f72:	2d00      	cmp	r5, #0
     f74:	d052      	beq.n	101c <_ZN14USBDeviceClass4sendEmPKvm+0xdc>
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
	inline void epBank1DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT1 = 1; }

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
     f76:	4f33      	ldr	r7, [pc, #204]	; (1044 <_ZN14USBDeviceClass4sendEmPKvm+0x104>)
     f78:	683b      	ldr	r3, [r7, #0]
     f7a:	9302      	str	r3, [sp, #8]
     f7c:	23ff      	movs	r3, #255	; 0xff
     f7e:	4033      	ands	r3, r6
     f80:	001c      	movs	r4, r3
     f82:	9300      	str	r3, [sp, #0]
     f84:	3408      	adds	r4, #8
     f86:	9b02      	ldr	r3, [sp, #8]
     f88:	0164      	lsls	r4, r4, #5
     f8a:	191b      	adds	r3, r3, r4
     f8c:	799b      	ldrb	r3, [r3, #6]
     f8e:	09db      	lsrs	r3, r3, #7
	{
		if (usbd.epBank1IsReady(ep)) {
     f90:	d015      	beq.n	fbe <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
			// previous transfer is still not complete

			// convert the timeout from microseconds to a number of times through
			// the wait loop; it takes (roughly) 23 clock cycles per iteration.
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
     f92:	4b2d      	ldr	r3, [pc, #180]	; (1048 <_ZN14USBDeviceClass4sendEmPKvm+0x108>)
     f94:	492d      	ldr	r1, [pc, #180]	; (104c <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
     f96:	6818      	ldr	r0, [r3, #0]
     f98:	f000 ff32 	bl	1e00 <__aeabi_uidiv>
     f9c:	4b2c      	ldr	r3, [pc, #176]	; (1050 <_ZN14USBDeviceClass4sendEmPKvm+0x110>)
     f9e:	2117      	movs	r1, #23
     fa0:	4358      	muls	r0, r3
     fa2:	f000 ff2d 	bl	1e00 <__aeabi_uidiv>

			// Wait for (previous) transfer to complete
			// inspired by Paul Stoffregen's work on Teensy
			while (!usbd.epBank1IsTransferComplete(ep)) {
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
     fa6:	4b2b      	ldr	r3, [pc, #172]	; (1054 <_ZN14USBDeviceClass4sendEmPKvm+0x114>)

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
     fa8:	9a02      	ldr	r2, [sp, #8]
     faa:	1912      	adds	r2, r2, r4
     fac:	79d2      	ldrb	r2, [r2, #7]
			// the wait loop; it takes (roughly) 23 clock cycles per iteration.
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;

			// Wait for (previous) transfer to complete
			// inspired by Paul Stoffregen's work on Teensy
			while (!usbd.epBank1IsTransferComplete(ep)) {
     fae:	0792      	lsls	r2, r2, #30
     fb0:	d405      	bmi.n	fbe <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
     fb2:	5d9a      	ldrb	r2, [r3, r6]
     fb4:	2a00      	cmp	r2, #0
     fb6:	d133      	bne.n	1020 <_ZN14USBDeviceClass4sendEmPKvm+0xe0>
     fb8:	3801      	subs	r0, #1
     fba:	d331      	bcc.n	1020 <_ZN14USBDeviceClass4sendEmPKvm+0xe0>
     fbc:	e7f4      	b.n	fa8 <_ZN14USBDeviceClass4sendEmPKvm+0x68>
					return -1;
				}
			}
		}

		LastTransmitTimedOut[ep] = 0;
     fbe:	2200      	movs	r2, #0
     fc0:	4b24      	ldr	r3, [pc, #144]	; (1054 <_ZN14USBDeviceClass4sendEmPKvm+0x114>)
     fc2:	1e2c      	subs	r4, r5, #0
     fc4:	559a      	strb	r2, [r3, r6]
     fc6:	2c3f      	cmp	r4, #63	; 0x3f
     fc8:	d900      	bls.n	fcc <_ZN14USBDeviceClass4sendEmPKvm+0x8c>
     fca:	243f      	movs	r4, #63	; 0x3f
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
     fcc:	4f22      	ldr	r7, [pc, #136]	; (1058 <_ZN14USBDeviceClass4sendEmPKvm+0x118>)
     fce:	01b3      	lsls	r3, r6, #6
     fd0:	18ff      	adds	r7, r7, r3
     fd2:	0022      	movs	r2, r4
     fd4:	9903      	ldr	r1, [sp, #12]
     fd6:	0038      	movs	r0, r7
     fd8:	f000 ffce 	bl	1f78 <memcpy>
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     fdc:	9b00      	ldr	r3, [sp, #0]
     fde:	4a19      	ldr	r2, [pc, #100]	; (1044 <_ZN14USBDeviceClass4sendEmPKvm+0x104>)
     fe0:	015b      	lsls	r3, r3, #5
     fe2:	18d3      	adds	r3, r2, r3
     fe4:	615f      	str	r7, [r3, #20]

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     fe6:	6998      	ldr	r0, [r3, #24]
     fe8:	04a2      	lsls	r2, r4, #18
     fea:	0c91      	lsrs	r1, r2, #18
     fec:	0b82      	lsrs	r2, r0, #14
     fee:	0392      	lsls	r2, r2, #14
     ff0:	430a      	orrs	r2, r1
     ff2:	619a      	str	r2, [r3, #24]

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     ff4:	9b00      	ldr	r3, [sp, #0]
     ff6:	9a02      	ldr	r2, [sp, #8]
     ff8:	3308      	adds	r3, #8
     ffa:	015b      	lsls	r3, r3, #5
     ffc:	18d3      	adds	r3, r2, r3
     ffe:	2202      	movs	r2, #2

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1000:	2180      	movs	r1, #128	; 0x80

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    1002:	71da      	strb	r2, [r3, #7]

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1004:	795a      	ldrb	r2, [r3, #5]
    1006:	4249      	negs	r1, r1
    1008:	430a      	orrs	r2, r1
    100a:	715a      	strb	r2, [r3, #5]
		usbd.epBank1AckTransferComplete(ep);

		// RAM buffer is full, we can send data (IN)
		usbd.epBank1SetReady(ep);

		written += length;
    100c:	9b01      	ldr	r3, [sp, #4]
		len -= length;
    100e:	1b2d      	subs	r5, r5, r4
		usbd.epBank1AckTransferComplete(ep);

		// RAM buffer is full, we can send data (IN)
		usbd.epBank1SetReady(ep);

		written += length;
    1010:	191b      	adds	r3, r3, r4
    1012:	9301      	str	r3, [sp, #4]
		len -= length;
		data = (char *)data + length;
    1014:	9b03      	ldr	r3, [sp, #12]
    1016:	191b      	adds	r3, r3, r4
    1018:	9303      	str	r3, [sp, #12]

	txLEDPulse = TX_RX_LED_PULSE_MS;
#endif

	// Flash area
	while (len != 0)
    101a:	e7aa      	b.n	f72 <_ZN14USBDeviceClass4sendEmPKvm+0x32>
    101c:	9801      	ldr	r0, [sp, #4]
    101e:	e00a      	b.n	1036 <_ZN14USBDeviceClass4sendEmPKvm+0xf6>

			// Wait for (previous) transfer to complete
			// inspired by Paul Stoffregen's work on Teensy
			while (!usbd.epBank1IsTransferComplete(ep)) {
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
					LastTransmitTimedOut[ep] = 1;
    1020:	2201      	movs	r2, #1
    1022:	559a      	strb	r2, [r3, r6]

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1024:	9b00      	ldr	r3, [sp, #0]
    1026:	015b      	lsls	r3, r3, #5
    1028:	18ff      	adds	r7, r7, r3
    102a:	69bb      	ldr	r3, [r7, #24]
    102c:	0b9b      	lsrs	r3, r3, #14
    102e:	039b      	lsls	r3, r3, #14
    1030:	61bb      	str	r3, [r7, #24]

					// set byte count to zero, so that ZLP is sent
					// instead of stale data
					usbd.epBank1SetByteCount(ep, 0);
					return -1;
    1032:	2001      	movs	r0, #1
    1034:	4240      	negs	r0, r0
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
    1036:	b005      	add	sp, #20
    1038:	bdf0      	pop	{r4, r5, r6, r7, pc}
    103a:	46c0      	nop			; (mov r8, r8)
    103c:	200006fc 	.word	0x200006fc
    1040:	2000040c 	.word	0x2000040c
    1044:	200005f8 	.word	0x200005f8
    1048:	20000080 	.word	0x20000080
    104c:	000f4240 	.word	0x000f4240
    1050:	00011170 	.word	0x00011170
    1054:	20000244 	.word	0x20000244
    1058:	2000024c 	.word	0x2000024c

0000105c <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    105c:	b570      	push	{r4, r5, r6, lr}
    105e:	000c      	movs	r4, r1
    1060:	001d      	movs	r5, r3
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    1062:	4e0d      	ldr	r6, [pc, #52]	; (1098 <_ZN14USBDeviceClass7armSendEmPKvm+0x3c>)
    1064:	01a3      	lsls	r3, r4, #6
    1066:	18f6      	adds	r6, r6, r3
	}
	return written;
}

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    1068:	0011      	movs	r1, r2
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    106a:	0030      	movs	r0, r6
    106c:	002a      	movs	r2, r5
    106e:	f000 ff83 	bl	1f78 <memcpy>
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1072:	b2e1      	uxtb	r1, r4
    1074:	014c      	lsls	r4, r1, #5
    1076:	4909      	ldr	r1, [pc, #36]	; (109c <_ZN14USBDeviceClass7armSendEmPKvm+0x40>)
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    1078:	4b09      	ldr	r3, [pc, #36]	; (10a0 <_ZN14USBDeviceClass7armSendEmPKvm+0x44>)

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    107a:	1909      	adds	r1, r1, r4
    107c:	614e      	str	r6, [r1, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    107e:	698a      	ldr	r2, [r1, #24]
    1080:	4013      	ands	r3, r2
    1082:	618b      	str	r3, [r1, #24]

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1084:	6988      	ldr	r0, [r1, #24]
    1086:	04ab      	lsls	r3, r5, #18
    1088:	0c9a      	lsrs	r2, r3, #18
    108a:	0b83      	lsrs	r3, r0, #14
    108c:	039b      	lsls	r3, r3, #14
    108e:	4313      	orrs	r3, r2
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
	usbd.epBank1SetMultiPacketSize(ep, 0);
	usbd.epBank1SetByteCount(ep, len);

	return len;
}
    1090:	0028      	movs	r0, r5
    1092:	618b      	str	r3, [r1, #24]
    1094:	bd70      	pop	{r4, r5, r6, pc}
    1096:	46c0      	nop			; (mov r8, r8)
    1098:	2000024c 	.word	0x2000024c
    109c:	200005f8 	.word	0x200005f8
    10a0:	f0003fff 	.word	0xf0003fff

000010a4 <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    10a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    10a6:	4b11      	ldr	r3, [pc, #68]	; (10ec <_ZN14USBDeviceClass11sendControlEPKvm+0x48>)

	return len;
}

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    10a8:	9001      	str	r0, [sp, #4]
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    10aa:	781b      	ldrb	r3, [r3, #0]

	return len;
}

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    10ac:	000f      	movs	r7, r1
    10ae:	0015      	movs	r5, r2
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    10b0:	2b00      	cmp	r3, #0
    10b2:	d118      	bne.n	10e6 <_ZN14USBDeviceClass11sendControlEPKvm+0x42>
		return length;

	if (_pack_message == true) {
    10b4:	4b0e      	ldr	r3, [pc, #56]	; (10f0 <_ZN14USBDeviceClass11sendControlEPKvm+0x4c>)
    10b6:	0016      	movs	r6, r2
    10b8:	781c      	ldrb	r4, [r3, #0]
    10ba:	2c00      	cmp	r4, #0
    10bc:	d008      	beq.n	10d0 <_ZN14USBDeviceClass11sendControlEPKvm+0x2c>
		memcpy(&_pack_buffer[_pack_size], data, len);
    10be:	4e0d      	ldr	r6, [pc, #52]	; (10f4 <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
    10c0:	480d      	ldr	r0, [pc, #52]	; (10f8 <_ZN14USBDeviceClass11sendControlEPKvm+0x54>)
    10c2:	8834      	ldrh	r4, [r6, #0]
    10c4:	1900      	adds	r0, r0, r4
		_pack_size += len;
    10c6:	1964      	adds	r4, r4, r5

	if (_dry_run == true)
		return length;

	if (_pack_message == true) {
		memcpy(&_pack_buffer[_pack_size], data, len);
    10c8:	f000 ff56 	bl	1f78 <memcpy>
		_pack_size += len;
    10cc:	8034      	strh	r4, [r6, #0]
    10ce:	e00a      	b.n	10e6 <_ZN14USBDeviceClass11sendControlEPKvm+0x42>
		return length;
	}

 	while (len > 0)
    10d0:	2e00      	cmp	r6, #0
    10d2:	d008      	beq.n	10e6 <_ZN14USBDeviceClass11sendControlEPKvm+0x42>
 	{
		sent = armSend(EP0, data + pos, len);
    10d4:	193a      	adds	r2, r7, r4
    10d6:	0033      	movs	r3, r6
    10d8:	2100      	movs	r1, #0
    10da:	9801      	ldr	r0, [sp, #4]
    10dc:	f7ff ffbe 	bl	105c <_ZN14USBDeviceClass7armSendEmPKvm>
		pos += sent;
    10e0:	1824      	adds	r4, r4, r0
		len -= sent;
    10e2:	1a36      	subs	r6, r6, r0
		memcpy(&_pack_buffer[_pack_size], data, len);
		_pack_size += len;
		return length;
	}

 	while (len > 0)
    10e4:	e7f4      	b.n	10d0 <_ZN14USBDeviceClass11sendControlEPKvm+0x2c>
		pos += sent;
		len -= sent;
 	}

	return length;
}
    10e6:	0028      	movs	r0, r5
    10e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    10ea:	46c0      	nop			; (mov r8, r8)
    10ec:	200005ee 	.word	0x200005ee
    10f0:	200005ec 	.word	0x200005ec
    10f4:	20000242 	.word	0x20000242
    10f8:	20000141 	.word	0x20000141

000010fc <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>:

// Send a USB descriptor string. The string is stored as a
// plain ASCII string but is sent out as UTF-16 with the
// correct 2-byte prefix
bool USBDeviceClass::sendStringDescriptor(const uint8_t *string, uint8_t maxlen)
{
    10fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (maxlen < 2)
		return false;
    10fe:	2000      	movs	r0, #0

// Send a USB descriptor string. The string is stored as a
// plain ASCII string but is sent out as UTF-16 with the
// correct 2-byte prefix
bool USBDeviceClass::sendStringDescriptor(const uint8_t *string, uint8_t maxlen)
{
    1100:	af00      	add	r7, sp, #0
    1102:	000e      	movs	r6, r1
    1104:	1e15      	subs	r5, r2, #0
	if (maxlen < 2)
    1106:	2d01      	cmp	r5, #1
    1108:	d927      	bls.n	115a <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x5e>
		return false;

	uint8_t buffer[maxlen];
    110a:	1dd3      	adds	r3, r2, #7
    110c:	466a      	mov	r2, sp
    110e:	08db      	lsrs	r3, r3, #3
    1110:	00db      	lsls	r3, r3, #3
    1112:	1ad3      	subs	r3, r2, r3
    1114:	469d      	mov	sp, r3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    1116:	0008      	movs	r0, r1
    1118:	f000 ffa8 	bl	206c <strlen>
bool USBDeviceClass::sendStringDescriptor(const uint8_t *string, uint8_t maxlen)
{
	if (maxlen < 2)
		return false;

	uint8_t buffer[maxlen];
    111c:	466c      	mov	r4, sp
	buffer[0] = strlen((const char*)string) * 2 + 2;
	buffer[1] = 0x03;
    111e:	2303      	movs	r3, #3

	uint8_t i;
	for (i = 2; i < maxlen && *string; i++) {
    1120:	2202      	movs	r2, #2
		buffer[i++] = *string++;
		if (i == maxlen) break;
		buffer[i] = 0;
    1122:	2100      	movs	r1, #0
{
	if (maxlen < 2)
		return false;

	uint8_t buffer[maxlen];
	buffer[0] = strlen((const char*)string) * 2 + 2;
    1124:	3001      	adds	r0, #1
    1126:	0040      	lsls	r0, r0, #1
    1128:	7020      	strb	r0, [r4, #0]
	buffer[1] = 0x03;
    112a:	7063      	strb	r3, [r4, #1]

	uint8_t i;
	for (i = 2; i < maxlen && *string; i++) {
    112c:	42aa      	cmp	r2, r5
    112e:	d20d      	bcs.n	114c <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x50>
    1130:	7830      	ldrb	r0, [r6, #0]
    1132:	2800      	cmp	r0, #0
    1134:	d00a      	beq.n	114c <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x50>
		buffer[i++] = *string++;
    1136:	1c53      	adds	r3, r2, #1
    1138:	b2db      	uxtb	r3, r3
    113a:	3601      	adds	r6, #1
    113c:	54a0      	strb	r0, [r4, r2]
		if (i == maxlen) break;
    113e:	429d      	cmp	r5, r3
    1140:	d003      	beq.n	114a <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
	uint8_t buffer[maxlen];
	buffer[0] = strlen((const char*)string) * 2 + 2;
	buffer[1] = 0x03;

	uint8_t i;
	for (i = 2; i < maxlen && *string; i++) {
    1142:	3202      	adds	r2, #2
		buffer[i++] = *string++;
		if (i == maxlen) break;
		buffer[i] = 0;
    1144:	54e1      	strb	r1, [r4, r3]
	uint8_t buffer[maxlen];
	buffer[0] = strlen((const char*)string) * 2 + 2;
	buffer[1] = 0x03;

	uint8_t i;
	for (i = 2; i < maxlen && *string; i++) {
    1146:	b2d2      	uxtb	r2, r2
    1148:	e7f0      	b.n	112c <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x30>
		buffer[i++] = *string++;
    114a:	002a      	movs	r2, r5
		if (i == maxlen) break;
		buffer[i] = 0;
	}

	return USBDevice.sendControl(buffer, i);
    114c:	0021      	movs	r1, r4
    114e:	4804      	ldr	r0, [pc, #16]	; (1160 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x64>)
    1150:	f7ff ffa8 	bl	10a4 <_ZN14USBDeviceClass11sendControlEPKvm>
    1154:	1e43      	subs	r3, r0, #1
    1156:	4198      	sbcs	r0, r3
    1158:	b2c0      	uxtb	r0, r0
}
    115a:	46bd      	mov	sp, r7
    115c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    115e:	46c0      	nop			; (mov r8, r8)
    1160:	200005ef 	.word	0x200005ef

00001164 <_ZN14USBDeviceClass17sendConfigurationEm>:
}

// Construct a dynamic configuration descriptor
// This really needs dynamic endpoint allocation etc
uint32_t USBDeviceClass::sendConfiguration(uint32_t maxlen)
{
    1164:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t total = 0;
    1166:	2700      	movs	r7, #0
	// Count and measure interfaces
	_dry_run = true;
    1168:	2601      	movs	r6, #1
}

// Construct a dynamic configuration descriptor
// This really needs dynamic endpoint allocation etc
uint32_t USBDeviceClass::sendConfiguration(uint32_t maxlen)
{
    116a:	b087      	sub	sp, #28
	uint32_t total = 0;
	// Count and measure interfaces
	_dry_run = true;
    116c:	4b1e      	ldr	r3, [pc, #120]	; (11e8 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
}

// Construct a dynamic configuration descriptor
// This really needs dynamic endpoint allocation etc
uint32_t USBDeviceClass::sendConfiguration(uint32_t maxlen)
{
    116e:	9100      	str	r1, [sp, #0]
	uint32_t total = 0;
	// Count and measure interfaces
	_dry_run = true;
	uint8_t interfaces = SendInterfaces(&total);
    1170:	a902      	add	r1, sp, #8
// This really needs dynamic endpoint allocation etc
uint32_t USBDeviceClass::sendConfiguration(uint32_t maxlen)
{
	uint32_t total = 0;
	// Count and measure interfaces
	_dry_run = true;
    1172:	701e      	strb	r6, [r3, #0]
}

// Construct a dynamic configuration descriptor
// This really needs dynamic endpoint allocation etc
uint32_t USBDeviceClass::sendConfiguration(uint32_t maxlen)
{
    1174:	0005      	movs	r5, r0
	uint32_t total = 0;
    1176:	9702      	str	r7, [sp, #8]
	// Count and measure interfaces
	_dry_run = true;
	uint8_t interfaces = SendInterfaces(&total);
    1178:	f7ff fc1f 	bl	9ba <_ZN14USBDeviceClass14SendInterfacesEPm>

	_Pragma("pack(1)")
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    117c:	ac03      	add	r4, sp, #12
uint32_t USBDeviceClass::sendConfiguration(uint32_t maxlen)
{
	uint32_t total = 0;
	// Count and measure interfaces
	_dry_run = true;
	uint8_t interfaces = SendInterfaces(&total);
    117e:	9001      	str	r0, [sp, #4]

	_Pragma("pack(1)")
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    1180:	2209      	movs	r2, #9
    1182:	0039      	movs	r1, r7
    1184:	0020      	movs	r0, r4
    1186:	f000 ff00 	bl	1f8a <memset>
    118a:	2309      	movs	r3, #9
    118c:	7023      	strb	r3, [r4, #0]
    118e:	2302      	movs	r3, #2
    1190:	7063      	strb	r3, [r4, #1]
    1192:	337e      	adds	r3, #126	; 0x7e
    1194:	71e3      	strb	r3, [r4, #7]
    1196:	337a      	adds	r3, #122	; 0x7a
    1198:	7223      	strb	r3, [r4, #8]
    119a:	9b02      	ldr	r3, [sp, #8]
    119c:	7166      	strb	r6, [r4, #5]
    119e:	3309      	adds	r3, #9
    11a0:	8063      	strh	r3, [r4, #2]
    11a2:	466b      	mov	r3, sp
    11a4:	791b      	ldrb	r3, [r3, #4]
    11a6:	7123      	strb	r3, [r4, #4]
	_Pragma("pack()")

	//	Now send them
	_dry_run = false;
    11a8:	4b0f      	ldr	r3, [pc, #60]	; (11e8 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
    11aa:	701f      	strb	r7, [r3, #0]

	if (maxlen == sizeof(ConfigDescriptor)) {
    11ac:	9b00      	ldr	r3, [sp, #0]
    11ae:	2b09      	cmp	r3, #9
    11b0:	d102      	bne.n	11b8 <_ZN14USBDeviceClass17sendConfigurationEm+0x54>
		sendControl(&config, sizeof(ConfigDescriptor));
    11b2:	001a      	movs	r2, r3
    11b4:	0021      	movs	r1, r4
    11b6:	e011      	b.n	11dc <_ZN14USBDeviceClass17sendConfigurationEm+0x78>
uint8_t _pack_buffer[256];

void USBDeviceClass::packMessages(bool val)
{
	if (val) {
		_pack_message = true;
    11b8:	4b0c      	ldr	r3, [pc, #48]	; (11ec <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
	}

	total = 0;

	packMessages(true);
	sendControl(&config, sizeof(ConfigDescriptor));
    11ba:	2209      	movs	r2, #9
uint8_t _pack_buffer[256];

void USBDeviceClass::packMessages(bool val)
{
	if (val) {
		_pack_message = true;
    11bc:	701e      	strb	r6, [r3, #0]
		_pack_size = 0;
    11be:	4e0c      	ldr	r6, [pc, #48]	; (11f0 <_ZN14USBDeviceClass17sendConfigurationEm+0x8c>)
	}

	total = 0;

	packMessages(true);
	sendControl(&config, sizeof(ConfigDescriptor));
    11c0:	0021      	movs	r1, r4
    11c2:	0028      	movs	r0, r5
	if (maxlen == sizeof(ConfigDescriptor)) {
		sendControl(&config, sizeof(ConfigDescriptor));
		return true;
	}

	total = 0;
    11c4:	9702      	str	r7, [sp, #8]

void USBDeviceClass::packMessages(bool val)
{
	if (val) {
		_pack_message = true;
		_pack_size = 0;
    11c6:	8037      	strh	r7, [r6, #0]
	}

	total = 0;

	packMessages(true);
	sendControl(&config, sizeof(ConfigDescriptor));
    11c8:	f7ff ff6c 	bl	10a4 <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    11cc:	a902      	add	r1, sp, #8
    11ce:	0028      	movs	r0, r5
    11d0:	f7ff fbf3 	bl	9ba <_ZN14USBDeviceClass14SendInterfacesEPm>
{
	if (val) {
		_pack_message = true;
		_pack_size = 0;
	} else {
		_pack_message = false;
    11d4:	4b05      	ldr	r3, [pc, #20]	; (11ec <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
		sendControl(_pack_buffer, _pack_size);
    11d6:	8832      	ldrh	r2, [r6, #0]
    11d8:	4906      	ldr	r1, [pc, #24]	; (11f4 <_ZN14USBDeviceClass17sendConfigurationEm+0x90>)
{
	if (val) {
		_pack_message = true;
		_pack_size = 0;
	} else {
		_pack_message = false;
    11da:	701f      	strb	r7, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    11dc:	0028      	movs	r0, r5
    11de:	f7ff ff61 	bl	10a4 <_ZN14USBDeviceClass11sendControlEPKvm>
	sendControl(&config, sizeof(ConfigDescriptor));
	SendInterfaces(&total);
	packMessages(false);

	return true;
}
    11e2:	2001      	movs	r0, #1
    11e4:	b007      	add	sp, #28
    11e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11e8:	200005ee 	.word	0x200005ee
    11ec:	200005ec 	.word	0x200005ec
    11f0:	20000242 	.word	0x20000242
    11f4:	20000141 	.word	0x20000141

000011f8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:

bool USBDeviceClass::sendDescriptor(USBSetup &setup)
{
    11f8:	b570      	push	{r4, r5, r6, lr}
	uint8_t t = setup.wValueH;
    11fa:	78ce      	ldrb	r6, [r1, #3]

	return true;
}

bool USBDeviceClass::sendDescriptor(USBSetup &setup)
{
    11fc:	b08a      	sub	sp, #40	; 0x28
    11fe:	0005      	movs	r5, r0
    1200:	000c      	movs	r4, r1
	uint8_t desc_length = 0;
	bool _cdcComposite;
	int ret;
	const uint8_t *desc_addr = 0;

	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    1202:	2e02      	cmp	r6, #2
    1204:	d107      	bne.n	1216 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1e>
	{
		return USBDevice.sendConfiguration(setup.wLength);
    1206:	88c9      	ldrh	r1, [r1, #6]
    1208:	4821      	ldr	r0, [pc, #132]	; (1290 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x98>)
    120a:	f7ff ffab 	bl	1164 <_ZN14USBDeviceClass17sendConfigurationEm>
    120e:	1e43      	subs	r3, r0, #1
    1210:	4198      	sbcs	r0, r3
    1212:	b2c0      	uxtb	r0, r0
    1214:	e03a      	b.n	128c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x94>
	}

#ifdef PLUGGABLE_USB_ENABLED
	ret = PluggableUSB().getDescriptor(setup);
    1216:	f000 fd8b 	bl	1d30 <_Z12PluggableUSBv>
    121a:	0021      	movs	r1, r4
    121c:	f000 fd59 	bl	1cd2 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    1220:	2800      	cmp	r0, #0
    1222:	d003      	beq.n	122c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x34>
		return (ret > 0 ? true : false);
    1224:	17c3      	asrs	r3, r0, #31
    1226:	1a18      	subs	r0, r3, r0
    1228:	0fc0      	lsrs	r0, r0, #31
    122a:	e02f      	b.n	128c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x94>
	}
#endif

	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    122c:	2e01      	cmp	r6, #1
    122e:	d104      	bne.n	123a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x42>
		if (setup.wLength == 8)
			_cdcComposite = 1;

		desc_addr = _cdcComposite ?  (const uint8_t*)&USB_DeviceDescriptorB : (const uint8_t*)&USB_DeviceDescriptor;

		if (*desc_addr > setup.wLength) {
    1230:	88e2      	ldrh	r2, [r4, #6]
    1232:	4918      	ldr	r1, [pc, #96]	; (1294 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x9c>)
    1234:	2a11      	cmp	r2, #17
    1236:	d824      	bhi.n	1282 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x8a>
    1238:	e020      	b.n	127c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x84>
			desc_length = setup.wLength;
		}
	}
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    123a:	2e03      	cmp	r6, #3
    123c:	d126      	bne.n	128c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x94>
	{
		if (setup.wValueL == 0) {
    123e:	78a3      	ldrb	r3, [r4, #2]
    1240:	2b00      	cmp	r3, #0
    1242:	d104      	bne.n	124e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x56>
#endif
		}
		else {
			return false;
		}
		if (*desc_addr > setup.wLength) {
    1244:	88e2      	ldrh	r2, [r4, #6]
    1246:	4914      	ldr	r1, [pc, #80]	; (1298 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xa0>)
    1248:	2a03      	cmp	r2, #3
    124a:	d917      	bls.n	127c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x84>
    124c:	e019      	b.n	1282 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x8a>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
	{
		if (setup.wValueL == 0) {
			desc_addr = (const uint8_t*)&STRING_LANGUAGE;
		}
		else if (setup.wValueL == IPRODUCT) {
    124e:	2b02      	cmp	r3, #2
    1250:	d102      	bne.n	1258 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x60>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    1252:	79a2      	ldrb	r2, [r4, #6]
    1254:	4911      	ldr	r1, [pc, #68]	; (129c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xa4>)
    1256:	e003      	b.n	1260 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x68>
		}
		else if (setup.wValueL == IMANUFACTURER) {
    1258:	2b01      	cmp	r3, #1
    125a:	d105      	bne.n	1268 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    125c:	79a2      	ldrb	r2, [r4, #6]
    125e:	4910      	ldr	r1, [pc, #64]	; (12a0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xa8>)
    1260:	0028      	movs	r0, r5
    1262:	f7ff ff4b 	bl	10fc <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    1266:	e011      	b.n	128c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x94>
		}
		else if (setup.wValueL == ISERIAL) {
    1268:	2b03      	cmp	r3, #3
    126a:	d10f      	bne.n	128c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x94>
#ifdef PLUGGABLE_USB_ENABLED
			char name[ISERIAL_MAX_LEN];
			PluggableUSB().getShortName(name);
    126c:	f000 fd60 	bl	1d30 <_Z12PluggableUSBv>
    1270:	a901      	add	r1, sp, #4
    1272:	f000 fd3e 	bl	1cf2 <_ZN13PluggableUSB_12getShortNameEPc>
			return sendStringDescriptor((uint8_t*)name, setup.wLength);
    1276:	79a2      	ldrb	r2, [r4, #6]
    1278:	a901      	add	r1, sp, #4
    127a:	e7f1      	b.n	1260 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x68>
		}
		else {
			return false;
		}
		if (*desc_addr > setup.wLength) {
			desc_length = setup.wLength;
    127c:	b2d2      	uxtb	r2, r2

	if (desc_addr == 0) {
		return false;
	}

	if (desc_length == 0) {
    127e:	2a00      	cmp	r2, #0
    1280:	d100      	bne.n	1284 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x8c>
		desc_length = *desc_addr;
    1282:	780a      	ldrb	r2, [r1, #0]
	}

	sendControl(desc_addr, desc_length);
    1284:	0028      	movs	r0, r5
    1286:	f7ff ff0d 	bl	10a4 <_ZN14USBDeviceClass11sendControlEPKvm>

	return true;
    128a:	2001      	movs	r0, #1
}
    128c:	b00a      	add	sp, #40	; 0x28
    128e:	bd70      	pop	{r4, r5, r6, pc}
    1290:	200005ef 	.word	0x200005ef
    1294:	000020f8 	.word	0x000020f8
    1298:	000020f4 	.word	0x000020f4
    129c:	0000210a 	.word	0x0000210a
    12a0:	000020e8 	.word	0x000020e8

000012a4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    12a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    12a6:	0006      	movs	r6, r0
	switch (setup.bRequest) {
    12a8:	7848      	ldrb	r0, [r1, #1]
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    12aa:	000d      	movs	r5, r1
	switch (setup.bRequest) {
    12ac:	280b      	cmp	r0, #11
    12ae:	d83d      	bhi.n	132c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x88>
    12b0:	f000 fd9c 	bl	1dec <__gnu_thumb1_case_uqi>
    12b4:	273c1606 	.word	0x273c1606
    12b8:	703e383c 	.word	0x703e383c
    12bc:	67644642 	.word	0x67644642
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    12c0:	7809      	ldrb	r1, [r1, #0]
    12c2:	aa01      	add	r2, sp, #4
    12c4:	2900      	cmp	r1, #0
    12c6:	d106      	bne.n	12d6 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
			armSend(0, buff, 2);
    12c8:	2302      	movs	r3, #2
		if (setup.bmRequestType == 0)  // device
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
    12ca:	7011      	strb	r1, [r2, #0]
    12cc:	7051      	strb	r1, [r2, #1]
			armSend(0, buff, 2);
    12ce:	0030      	movs	r0, r6
    12d0:	f7ff fec4 	bl	105c <_ZN14USBDeviceClass7armSendEmPKvm>
    12d4:	e02a      	b.n	132c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x88>
		// if( setup.bmRequestType == 2 ) // Endpoint:
		else
		{
			// Send the endpoint status
			// Check if the endpoint if currently halted
			uint8_t buff[] = { 0, 0 };
    12d6:	2300      	movs	r3, #0
    12d8:	7013      	strb	r3, [r2, #0]
    12da:	7053      	strb	r3, [r2, #1]
			if (isEndpointHalt == 1)
    12dc:	4b2e      	ldr	r3, [pc, #184]	; (1398 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    12de:	e007      	b.n	12f0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x4c>
			return true;
		}

	case CLEAR_FEATURE:
		// Check which is the selected feature
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    12e0:	788a      	ldrb	r2, [r1, #2]
    12e2:	2300      	movs	r3, #0
    12e4:	2a01      	cmp	r2, #1
    12e6:	d109      	bne.n	12fc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x58>
		{
			// Enable remote wake-up and send a ZLP
			uint8_t buff[] = { 0, 0 };
    12e8:	aa01      	add	r2, sp, #4
    12ea:	7013      	strb	r3, [r2, #0]
    12ec:	7053      	strb	r3, [r2, #1]
			if (isRemoteWakeUpEnabled == 1)
    12ee:	4b2b      	ldr	r3, [pc, #172]	; (139c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
    12f0:	781b      	ldrb	r3, [r3, #0]
    12f2:	2b01      	cmp	r3, #1
    12f4:	d100      	bne.n	12f8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x54>
				buff[0] = 1;
    12f6:	7013      	strb	r3, [r2, #0]
			armSend(0, buff, 2);
    12f8:	2302      	movs	r3, #2
    12fa:	e01f      	b.n	133c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x98>
			return true;
		}
		else // if( setup.wValueL == 0) // ENDPOINTHALT
		{
			isEndpointHalt = 0;
    12fc:	4a26      	ldr	r2, [pc, #152]	; (1398 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    12fe:	7013      	strb	r3, [r2, #0]
    1300:	e042      	b.n	1388 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe4>
			return true;
		}

	case SET_FEATURE:
		// Check which is the selected feature
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    1302:	788c      	ldrb	r4, [r1, #2]
    1304:	2c01      	cmp	r4, #1
    1306:	d106      	bne.n	1316 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x72>
		{
			// Enable remote wake-up and send a ZLP
			isRemoteWakeUpEnabled = 1;
			uint8_t buff[] = { 0 };
    1308:	2100      	movs	r1, #0
	case SET_FEATURE:
		// Check which is the selected feature
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
		{
			// Enable remote wake-up and send a ZLP
			isRemoteWakeUpEnabled = 1;
    130a:	4b24      	ldr	r3, [pc, #144]	; (139c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
			uint8_t buff[] = { 0 };
    130c:	aa01      	add	r2, sp, #4
	case SET_FEATURE:
		// Check which is the selected feature
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
		{
			// Enable remote wake-up and send a ZLP
			isRemoteWakeUpEnabled = 1;
    130e:	701c      	strb	r4, [r3, #0]
			uint8_t buff[] = { 0 };
    1310:	7011      	strb	r1, [r2, #0]
			armSend(0, buff, 1);
    1312:	0023      	movs	r3, r4
    1314:	e7db      	b.n	12ce <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
			return true;
		}
		if (setup.wValueL == 0) // ENDPOINTHALT
    1316:	2c00      	cmp	r4, #0
    1318:	d104      	bne.n	1324 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
		{
			// Halt endpoint
			isEndpointHalt = 1;
    131a:	2001      	movs	r0, #1
    131c:	4b1e      	ldr	r3, [pc, #120]	; (1398 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    131e:	4a20      	ldr	r2, [pc, #128]	; (13a0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    1320:	7018      	strb	r0, [r3, #0]
    1322:	e026      	b.n	1372 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xce>
			sendZlp(0);
			return true;
		}

	case SET_ADDRESS:
		setAddress(setup.wValueL);
    1324:	78a9      	ldrb	r1, [r5, #2]
    1326:	0030      	movs	r0, r6
    1328:	f7ff fc12 	bl	b50 <_ZN14USBDeviceClass10setAddressEm>
		return true;
    132c:	2001      	movs	r0, #1
    132e:	e032      	b.n	1396 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf2>

	case GET_DESCRIPTOR:
		return sendDescriptor(setup);
    1330:	0030      	movs	r0, r6
    1332:	f7ff ff61 	bl	11f8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    1336:	e02e      	b.n	1396 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf2>

	case SET_DESCRIPTOR:
		return false;

	case GET_CONFIGURATION:
		armSend(0, (void*)&_usbConfiguration, 1);
    1338:	2301      	movs	r3, #1
    133a:	4a1a      	ldr	r2, [pc, #104]	; (13a4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    133c:	2100      	movs	r1, #0
    133e:	e7c6      	b.n	12ce <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		return true;

	case SET_CONFIGURATION:
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    1340:	780b      	ldrb	r3, [r1, #0]
			#endif

			sendZlp(0);
			return true;
		} else {
			return false;
    1342:	2000      	movs	r0, #0
	case GET_CONFIGURATION:
		armSend(0, (void*)&_usbConfiguration, 1);
		return true;

	case SET_CONFIGURATION:
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    1344:	06db      	lsls	r3, r3, #27
    1346:	d126      	bne.n	1396 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf2>

			initEndpoints();
    1348:	0030      	movs	r0, r6
    134a:	f7ff fcd5 	bl	cf8 <_ZN14USBDeviceClass13initEndpointsEv>

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    134e:	202a      	movs	r0, #42	; 0x2a
    1350:	2402      	movs	r4, #2
			_usbConfiguration = setup.wValueL;
    1352:	78aa      	ldrb	r2, [r5, #2]
    1354:	4b13      	ldr	r3, [pc, #76]	; (13a4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    1356:	30ff      	adds	r0, #255	; 0xff
    1358:	601a      	str	r2, [r3, #0]
    135a:	4a11      	ldr	r2, [pc, #68]	; (13a0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    135c:	6813      	ldr	r3, [r2, #0]
    135e:	5c19      	ldrb	r1, [r3, r0]
    1360:	4321      	orrs	r1, r4
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    1362:	244a      	movs	r4, #74	; 0x4a
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    1364:	5419      	strb	r1, [r3, r0]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    1366:	34ff      	adds	r4, #255	; 0xff
    1368:	5d19      	ldrb	r1, [r3, r4]
    136a:	3829      	subs	r0, #41	; 0x29
    136c:	38ff      	subs	r0, #255	; 0xff
    136e:	4301      	orrs	r1, r0
    1370:	5519      	strb	r1, [r3, r4]

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1372:	6993      	ldr	r3, [r2, #24]
    1374:	0b9b      	lsrs	r3, r3, #14
    1376:	039b      	lsls	r3, r3, #14
    1378:	6193      	str	r3, [r2, #24]
			usbd.epBank1EnableTransferComplete(CDC_ENDPOINT_ACM);
			usbd.epBank0EnableTransferComplete(CDC_ENDPOINT_OUT);
			#endif

			sendZlp(0);
			return true;
    137a:	e00c      	b.n	1396 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf2>
		} else {
			return false;
		}

	case GET_INTERFACE:
		armSend(0, (void*)&_usbSetInterface, 1);
    137c:	2301      	movs	r3, #1
    137e:	4a0a      	ldr	r2, [pc, #40]	; (13a8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    1380:	e7dc      	b.n	133c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x98>
		return true;

	case SET_INTERFACE:
		_usbSetInterface = setup.wValueL;
    1382:	788a      	ldrb	r2, [r1, #2]
    1384:	4b08      	ldr	r3, [pc, #32]	; (13a8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    1386:	601a      	str	r2, [r3, #0]
    1388:	4a05      	ldr	r2, [pc, #20]	; (13a0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    138a:	6993      	ldr	r3, [r2, #24]
    138c:	0b9b      	lsrs	r3, r3, #14
    138e:	039b      	lsls	r3, r3, #14
    1390:	6193      	str	r3, [r2, #24]
    1392:	e7cb      	b.n	132c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x88>

	case GET_DESCRIPTOR:
		return sendDescriptor(setup);

	case SET_DESCRIPTOR:
		return false;
    1394:	2000      	movs	r0, #0
		return true;

	default:
		return true;
	}
}
    1396:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    1398:	20000140 	.word	0x20000140
    139c:	200005ed 	.word	0x200005ed
    13a0:	200005f8 	.word	0x200005f8
    13a4:	200006fc 	.word	0x200006fc
    13a8:	200005f0 	.word	0x200005f0

000013ac <_ZN14USBDeviceClass10ISRHandlerEv>:

void USBDeviceClass::ISRHandler()
{

	if (_pack_message == true) {
    13ac:	4b4b      	ldr	r3, [pc, #300]	; (14dc <_ZN14USBDeviceClass10ISRHandlerEv+0x130>)
		return true;
	}
}

void USBDeviceClass::ISRHandler()
{
    13ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	if (_pack_message == true) {
    13b0:	781d      	ldrb	r5, [r3, #0]
		return true;
	}
}

void USBDeviceClass::ISRHandler()
{
    13b2:	0007      	movs	r7, r0

	if (_pack_message == true) {
    13b4:	2d00      	cmp	r5, #0
    13b6:	d000      	beq.n	13ba <_ZN14USBDeviceClass10ISRHandlerEv+0xe>
    13b8:	e08f      	b.n	14da <_ZN14USBDeviceClass10ISRHandlerEv+0x12e>
	// Authorize attach if Vbus is present
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
	inline void detach() { usb.CTRLB.bit.DETACH = 1; }

	// USB Interrupts
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    13ba:	4c49      	ldr	r4, [pc, #292]	; (14e0 <_ZN14USBDeviceClass10ISRHandlerEv+0x134>)
    13bc:	6823      	ldr	r3, [r4, #0]
    13be:	8b9b      	ldrh	r3, [r3, #28]
		return;
	}
	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    13c0:	071b      	lsls	r3, r3, #28
    13c2:	d50d      	bpl.n	13e0 <_ZN14USBDeviceClass10ISRHandlerEv+0x34>
    13c4:	0028      	movs	r0, r5
    13c6:	f7ff f909 	bl	5dc <_ZN14USBDeviceClass6initEPEmm.part.5>
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    13ca:	6822      	ldr	r2, [r4, #0]
    13cc:	2010      	movs	r0, #16
    13ce:	0011      	movs	r1, r2
    13d0:	31ff      	adds	r1, #255	; 0xff
    13d2:	7a8b      	ldrb	r3, [r1, #10]
    13d4:	4303      	orrs	r3, r0
    13d6:	728b      	strb	r3, [r1, #10]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    13d8:	4b42      	ldr	r3, [pc, #264]	; (14e4 <_ZN14USBDeviceClass10ISRHandlerEv+0x138>)
    13da:	601d      	str	r5, [r3, #0]
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
	inline void detach() { usb.CTRLB.bit.DETACH = 1; }

	// USB Interrupts
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    13dc:	2308      	movs	r3, #8
    13de:	8393      	strh	r3, [r2, #28]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
	inline void disableEndOfResetInterrupt()   { usb.INTENCLR.bit.EORST = 1; }

	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    13e0:	6823      	ldr	r3, [r4, #0]
    13e2:	8b9a      	ldrh	r2, [r3, #28]

		usbd.ackEndOfResetInterrupt();
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    13e4:	0752      	lsls	r2, r2, #29
    13e6:	d51f      	bpl.n	1428 <_ZN14USBDeviceClass10ISRHandlerEv+0x7c>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    13e8:	2204      	movs	r2, #4
    13ea:	839a      	strh	r2, [r3, #28]
	{
		usbd.ackStartOfFrameInterrupt();

		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
    13ec:	4a3e      	ldr	r2, [pc, #248]	; (14e8 <_ZN14USBDeviceClass10ISRHandlerEv+0x13c>)
    13ee:	7813      	ldrb	r3, [r2, #0]
    13f0:	2b00      	cmp	r3, #0
    13f2:	d00a      	beq.n	140a <_ZN14USBDeviceClass10ISRHandlerEv+0x5e>
			txLEDPulse--;
    13f4:	7813      	ldrb	r3, [r2, #0]
    13f6:	3b01      	subs	r3, #1
    13f8:	b2db      	uxtb	r3, r3
    13fa:	7013      	strb	r3, [r2, #0]
			if (txLEDPulse == 0)
    13fc:	7813      	ldrb	r3, [r2, #0]
    13fe:	2b00      	cmp	r3, #0
    1400:	d103      	bne.n	140a <_ZN14USBDeviceClass10ISRHandlerEv+0x5e>
				digitalWrite(PIN_LED_TXL, HIGH);
    1402:	2101      	movs	r1, #1
    1404:	201a      	movs	r0, #26
    1406:	f000 f989 	bl	171c <digitalWrite>
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
    140a:	4a38      	ldr	r2, [pc, #224]	; (14ec <_ZN14USBDeviceClass10ISRHandlerEv+0x140>)
    140c:	7813      	ldrb	r3, [r2, #0]
    140e:	2b00      	cmp	r3, #0
    1410:	d00a      	beq.n	1428 <_ZN14USBDeviceClass10ISRHandlerEv+0x7c>
			rxLEDPulse--;
    1412:	7813      	ldrb	r3, [r2, #0]
    1414:	3b01      	subs	r3, #1
    1416:	b2db      	uxtb	r3, r3
    1418:	7013      	strb	r3, [r2, #0]
			if (rxLEDPulse == 0)
    141a:	7813      	ldrb	r3, [r2, #0]
    141c:	2b00      	cmp	r3, #0
    141e:	d103      	bne.n	1428 <_ZN14USBDeviceClass10ISRHandlerEv+0x7c>
				digitalWrite(PIN_LED_RXL, HIGH);
    1420:	2101      	movs	r1, #1
    1422:	2019      	movs	r0, #25
    1424:	f000 f97a 	bl	171c <digitalWrite>
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }

	// Interrupts
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    1428:	6823      	ldr	r3, [r4, #0]
    142a:	33ff      	adds	r3, #255	; 0xff
    142c:	7a1a      	ldrb	r2, [r3, #8]
		}
#endif
	}

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    142e:	06d2      	lsls	r2, r2, #27
    1430:	d526      	bpl.n	1480 <_ZN14USBDeviceClass10ISRHandlerEv+0xd4>
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    1432:	2210      	movs	r2, #16
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1434:	2140      	movs	r1, #64	; 0x40
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    1436:	721a      	strb	r2, [r3, #8]
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1438:	795a      	ldrb	r2, [r3, #5]
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
			// Standard Requests
			ok = handleStandardSetup(*setup);
    143a:	0038      	movs	r0, r7
    143c:	430a      	orrs	r2, r1
    143e:	715a      	strb	r2, [r3, #5]
		/* Clear the Bank 0 ready flag on Control OUT */
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    1440:	2360      	movs	r3, #96	; 0x60
    1442:	492b      	ldr	r1, [pc, #172]	; (14f0 <_ZN14USBDeviceClass10ISRHandlerEv+0x144>)
    1444:	780a      	ldrb	r2, [r1, #0]
    1446:	421a      	tst	r2, r3
    1448:	d102      	bne.n	1450 <_ZN14USBDeviceClass10ISRHandlerEv+0xa4>
			// Standard Requests
			ok = handleStandardSetup(*setup);
    144a:	f7ff ff2b 	bl	12a4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
    144e:	e001      	b.n	1454 <_ZN14USBDeviceClass10ISRHandlerEv+0xa8>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(*setup);
    1450:	f7ff fba0 	bl	b94 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
		}

		if (ok) {
    1454:	2800      	cmp	r0, #0
    1456:	d006      	beq.n	1466 <_ZN14USBDeviceClass10ISRHandlerEv+0xba>

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1458:	2180      	movs	r1, #128	; 0x80
    145a:	6823      	ldr	r3, [r4, #0]
    145c:	4249      	negs	r1, r1
    145e:	33ff      	adds	r3, #255	; 0xff
    1460:	799a      	ldrb	r2, [r3, #6]
    1462:	430a      	orrs	r2, r1
    1464:	e001      	b.n	146a <_ZN14USBDeviceClass10ISRHandlerEv+0xbe>
{
	// TODO: test
	// TODO: use .bit. notation

	// Stall endpoint
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    1466:	2220      	movs	r2, #32
    1468:	4b22      	ldr	r3, [pc, #136]	; (14f4 <_ZN14USBDeviceClass10ISRHandlerEv+0x148>)
    146a:	719a      	strb	r2, [r3, #6]
	// Interrupts
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    146c:	6823      	ldr	r3, [r4, #0]
    146e:	33ff      	adds	r3, #255	; 0xff
    1470:	7a1a      	ldrb	r2, [r3, #8]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    1472:	0652      	lsls	r2, r2, #25
    1474:	d504      	bpl.n	1480 <_ZN14USBDeviceClass10ISRHandlerEv+0xd4>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
    1476:	2140      	movs	r1, #64	; 0x40
    1478:	7219      	strb	r1, [r3, #8]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }

	inline void epBank0DisableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENCLR.bit.RXSTP = 1; }
	inline void epBank0DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL0 = 1; }
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    147a:	7a5a      	ldrb	r2, [r3, #9]
    147c:	430a      	orrs	r2, r1
    147e:	725a      	strb	r2, [r3, #9]
	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }

	// Interrupts
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }
    1480:	6823      	ldr	r3, [r4, #0]
		}

	} // end Received Setup handler

	uint8_t i=0;
	uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
    1482:	2600      	movs	r6, #0
    1484:	8c1d      	ldrh	r5, [r3, #32]
    1486:	2301      	movs	r3, #1
    1488:	439d      	bics	r5, r3
    148a:	b2ed      	uxtb	r5, r5
	while (ept_int != 0)
	{
		// Check if endpoint has a pending interrupt
		if ((ept_int & (1 << i)) != 0)
    148c:	9301      	str	r3, [sp, #4]
    148e:	b2f1      	uxtb	r1, r6

	} // end Received Setup handler

	uint8_t i=0;
	uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
	while (ept_int != 0)
    1490:	2d00      	cmp	r5, #0
    1492:	d022      	beq.n	14da <_ZN14USBDeviceClass10ISRHandlerEv+0x12e>
	{
		// Check if endpoint has a pending interrupt
		if ((ept_int & (1 << i)) != 0)
    1494:	002b      	movs	r3, r5
    1496:	4133      	asrs	r3, r6
    1498:	9a01      	ldr	r2, [sp, #4]
    149a:	4213      	tst	r3, r2
    149c:	d015      	beq.n	14ca <_ZN14USBDeviceClass10ISRHandlerEv+0x11e>

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    149e:	0033      	movs	r3, r6
    14a0:	6822      	ldr	r2, [r4, #0]
    14a2:	3308      	adds	r3, #8
    14a4:	015b      	lsls	r3, r3, #5
    14a6:	18d3      	adds	r3, r2, r3
    14a8:	79da      	ldrb	r2, [r3, #7]
		{
			// Endpoint Transfer Complete (0/1) Interrupt
			if (usbd.epBank0IsTransferComplete(i) ||
    14aa:	07d2      	lsls	r2, r2, #31
    14ac:	d402      	bmi.n	14b4 <_ZN14USBDeviceClass10ISRHandlerEv+0x108>
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    14ae:	79db      	ldrb	r3, [r3, #7]
    14b0:	079b      	lsls	r3, r3, #30
    14b2:	d507      	bpl.n	14c4 <_ZN14USBDeviceClass10ISRHandlerEv+0x118>
			    usbd.epBank1IsTransferComplete(i))
			{
				if (epHandlers[i]) {
    14b4:	4b10      	ldr	r3, [pc, #64]	; (14f8 <_ZN14USBDeviceClass10ISRHandlerEv+0x14c>)
    14b6:	00b2      	lsls	r2, r6, #2
    14b8:	58d0      	ldr	r0, [r2, r3]
    14ba:	2800      	cmp	r0, #0
    14bc:	d009      	beq.n	14d2 <_ZN14USBDeviceClass10ISRHandlerEv+0x126>
					epHandlers[i]->handleEndpoint();
    14be:	6803      	ldr	r3, [r0, #0]
    14c0:	681b      	ldr	r3, [r3, #0]
    14c2:	4798      	blx	r3
				} else {
					handleEndpoint(i);
				}
			}
			ept_int &= ~(1 << i);
    14c4:	9b01      	ldr	r3, [sp, #4]
    14c6:	40b3      	lsls	r3, r6
    14c8:	439d      	bics	r5, r3
    14ca:	3601      	adds	r6, #1
		}
		i++;
		if (i > USB_EPT_NUM)
    14cc:	2e09      	cmp	r6, #9
    14ce:	d1de      	bne.n	148e <_ZN14USBDeviceClass10ISRHandlerEv+0xe2>
    14d0:	e003      	b.n	14da <_ZN14USBDeviceClass10ISRHandlerEv+0x12e>
			    usbd.epBank1IsTransferComplete(i))
			{
				if (epHandlers[i]) {
					epHandlers[i]->handleEndpoint();
				} else {
					handleEndpoint(i);
    14d2:	0038      	movs	r0, r7
    14d4:	f7ff fa88 	bl	9e8 <_ZN14USBDeviceClass14handleEndpointEh>
    14d8:	e7f4      	b.n	14c4 <_ZN14USBDeviceClass10ISRHandlerEv+0x118>
		}
		i++;
		if (i > USB_EPT_NUM)
			break;  // fire exit
	}
}
    14da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    14dc:	200005ec 	.word	0x200005ec
    14e0:	200005f8 	.word	0x200005f8
    14e4:	200006fc 	.word	0x200006fc
    14e8:	2000040c 	.word	0x2000040c
    14ec:	200005f4 	.word	0x200005f4
    14f0:	20000410 	.word	0x20000410
    14f4:	410050ff 	.word	0x410050ff
    14f8:	200005d0 	.word	0x200005d0

000014fc <UDD_Handler>:
static char isEndpointHalt = 0;

extern void (*gpf_isr)(void);

// USB_Handler ISR
extern "C" void UDD_Handler(void) {
    14fc:	b510      	push	{r4, lr}
	USBDevice.ISRHandler();
    14fe:	4802      	ldr	r0, [pc, #8]	; (1508 <UDD_Handler+0xc>)
    1500:	f7ff ff54 	bl	13ac <_ZN14USBDeviceClass10ISRHandlerEv>
}
    1504:	bd10      	pop	{r4, pc}
    1506:	46c0      	nop			; (mov r8, r8)
    1508:	200005ef 	.word	0x200005ef

0000150c <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv>:

typedef uint8_t ep_t;

class USBDevice_SAMD21G18x {
public:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    150c:	4a01      	ldr	r2, [pc, #4]	; (1514 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0x8>)
    150e:	4b02      	ldr	r3, [pc, #8]	; (1518 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0xc>)
    1510:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    1512:	4770      	bx	lr
    1514:	41005000 	.word	0x41005000
    1518:	200005f8 	.word	0x200005f8

0000151c <init>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
    151c:	21fa      	movs	r1, #250	; 0xfa
void init( void )
{
  uint32_t ul ;

  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    151e:	4b33      	ldr	r3, [pc, #204]	; (15ec <init+0xd0>)
 *   - At reset, ResetHandler did the system clock configuration. Core is running at 48MHz.
 *   - Watchdog is disabled by default, unless someone plays with NVM User page
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
    1520:	b510      	push	{r4, lr}
    1522:	6818      	ldr	r0, [r3, #0]
    1524:	0089      	lsls	r1, r1, #2
    1526:	f000 fc6b 	bl	1e00 <__aeabi_uidiv>
    152a:	4b31      	ldr	r3, [pc, #196]	; (15f0 <init+0xd4>)
    152c:	3801      	subs	r0, #1
    152e:	4298      	cmp	r0, r3
    1530:	d824      	bhi.n	157c <init+0x60>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    1532:	4930      	ldr	r1, [pc, #192]	; (15f4 <init+0xd8>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1534:	4a30      	ldr	r2, [pc, #192]	; (15f8 <init+0xdc>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    1536:	6048      	str	r0, [r1, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1538:	20c0      	movs	r0, #192	; 0xc0
    153a:	6a13      	ldr	r3, [r2, #32]
    153c:	0600      	lsls	r0, r0, #24
    153e:	021b      	lsls	r3, r3, #8
    1540:	0a1b      	lsrs	r3, r3, #8
    1542:	4303      	orrs	r3, r0
    1544:	6213      	str	r3, [r2, #32]
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    1546:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1548:	2307      	movs	r3, #7
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    154a:	608c      	str	r4, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    154c:	600b      	str	r3, [r1, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    154e:	2180      	movs	r1, #128	; 0x80
    1550:	6a13      	ldr	r3, [r2, #32]
    1552:	0609      	lsls	r1, r1, #24
    1554:	021b      	lsls	r3, r3, #8
    1556:	0a1b      	lsrs	r3, r3, #8
    1558:	430b      	orrs	r3, r1
//
//  // Clock EIC for I/O interrupts
//	PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    155a:	21fc      	movs	r1, #252	; 0xfc
    155c:	6213      	str	r3, [r2, #32]
    155e:	4b27      	ldr	r3, [pc, #156]	; (15fc <init+0xe0>)
    1560:	6a1a      	ldr	r2, [r3, #32]
    1562:	430a      	orrs	r2, r1

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    1564:	21fc      	movs	r1, #252	; 0xfc
//
//  // Clock EIC for I/O interrupts
//	PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    1566:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    1568:	6a1a      	ldr	r2, [r3, #32]
    156a:	0189      	lsls	r1, r1, #6
    156c:	430a      	orrs	r2, r1

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    156e:	21a0      	movs	r1, #160	; 0xa0

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    1570:	621a      	str	r2, [r3, #32]

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    1572:	6a1a      	ldr	r2, [r3, #32]
    1574:	02c9      	lsls	r1, r1, #11
    1576:	430a      	orrs	r2, r1
    1578:	621a      	str	r2, [r3, #32]
    157a:	e000      	b.n	157e <init+0x62>
    157c:	e7fe      	b.n	157c <init+0x60>

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for ( ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
  {
	  pinMode( ul, INPUT ) ;
    157e:	0020      	movs	r0, r4
    1580:	2100      	movs	r1, #0

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for ( ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    1582:	3401      	adds	r4, #1
  {
	  pinMode( ul, INPUT ) ;
    1584:	f000 f876 	bl	1674 <pinMode>

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for ( ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    1588:	2c14      	cmp	r4, #20
    158a:	d1f8      	bne.n	157e <init+0x62>
	  pinMode( ul, INPUT ) ;
  }

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    158c:	4a1c      	ldr	r2, [pc, #112]	; (1600 <init+0xe4>)
    158e:	7853      	ldrb	r3, [r2, #1]
    1590:	4c1b      	ldr	r4, [pc, #108]	; (1600 <init+0xe4>)
    1592:	b25b      	sxtb	r3, r3
    1594:	2b00      	cmp	r3, #0
    1596:	dbfa      	blt.n	158e <init+0x72>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    1598:	4b1a      	ldr	r3, [pc, #104]	; (1604 <init+0xe8>)
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    159a:	491b      	ldr	r1, [pc, #108]	; (1608 <init+0xec>)

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    159c:	8063      	strh	r3, [r4, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    159e:	7e4b      	ldrb	r3, [r1, #25]
    15a0:	4a19      	ldr	r2, [pc, #100]	; (1608 <init+0xec>)
    15a2:	09db      	lsrs	r3, r3, #7
    15a4:	2b01      	cmp	r3, #1
    15a6:	d0fa      	beq.n	159e <init+0x82>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    15a8:	23e4      	movs	r3, #228	; 0xe4
    15aa:	00db      	lsls	r3, r3, #3
    15ac:	8093      	strh	r3, [r2, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    15ae:	233f      	movs	r3, #63	; 0x3f
    15b0:	70d3      	strb	r3, [r2, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    15b2:	7e53      	ldrb	r3, [r2, #25]
    15b4:	4914      	ldr	r1, [pc, #80]	; (1608 <init+0xec>)
    15b6:	09db      	lsrs	r3, r3, #7
    15b8:	2b01      	cmp	r3, #1
    15ba:	d0fa      	beq.n	15b2 <init+0x96>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    15bc:	23c0      	movs	r3, #192	; 0xc0

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    15be:	2000      	movs	r0, #0

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    15c0:	015b      	lsls	r3, r3, #5
    15c2:	610b      	str	r3, [r1, #16]

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    15c4:	7088      	strb	r0, [r1, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    15c6:	f000 f825 	bl	1614 <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    15ca:	7863      	ldrb	r3, [r4, #1]
    15cc:	b25b      	sxtb	r3, r3
    15ce:	2b00      	cmp	r3, #0
    15d0:	dbfb      	blt.n	15ca <init+0xae>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    15d2:	4a0e      	ldr	r2, [pc, #56]	; (160c <init+0xf0>)
    15d4:	4b0a      	ldr	r3, [pc, #40]	; (1600 <init+0xe4>)
    15d6:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    15d8:	4a0d      	ldr	r2, [pc, #52]	; (1610 <init+0xf4>)
    15da:	79d3      	ldrb	r3, [r2, #7]
    15dc:	09db      	lsrs	r3, r3, #7
    15de:	2b01      	cmp	r3, #1
    15e0:	d0fb      	beq.n	15da <init+0xbe>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    15e2:	2241      	movs	r2, #65	; 0x41
    15e4:	4b0a      	ldr	r3, [pc, #40]	; (1610 <init+0xf4>)
    15e6:	705a      	strb	r2, [r3, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
}
    15e8:	bd10      	pop	{r4, pc}
    15ea:	46c0      	nop			; (mov r8, r8)
    15ec:	20000080 	.word	0x20000080
    15f0:	00ffffff 	.word	0x00ffffff
    15f4:	e000e010 	.word	0xe000e010
    15f8:	e000ed00 	.word	0xe000ed00
    15fc:	40000400 	.word	0x40000400
    1600:	40000c00 	.word	0x40000c00
    1604:	0000401e 	.word	0x0000401e
    1608:	42004000 	.word	0x42004000
    160c:	00004021 	.word	0x00004021
    1610:	42004800 	.word	0x42004800

00001614 <analogReference>:
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
    1614:	b510      	push	{r4, lr}
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1616:	4c15      	ldr	r4, [pc, #84]	; (166c <analogReference+0x58>)
    1618:	4a14      	ldr	r2, [pc, #80]	; (166c <analogReference+0x58>)
    161a:	7e61      	ldrb	r1, [r4, #25]
    161c:	0013      	movs	r3, r2
    161e:	09c9      	lsrs	r1, r1, #7
    1620:	2901      	cmp	r1, #1
    1622:	d0f9      	beq.n	1618 <analogReference+0x4>
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
  syncADC();
  switch (mode)
    1624:	3801      	subs	r0, #1
    1626:	2804      	cmp	r0, #4
    1628:	d813      	bhi.n	1652 <analogReference+0x3e>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    162a:	6919      	ldr	r1, [r3, #16]
    162c:	4a10      	ldr	r2, [pc, #64]	; (1670 <analogReference+0x5c>)
    162e:	400a      	ands	r2, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1630:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    1632:	611a      	str	r2, [r3, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1634:	785a      	ldrb	r2, [r3, #1]
    1636:	438a      	bics	r2, r1
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
  syncADC();
  switch (mode)
    1638:	f000 fbd8 	bl	1dec <__gnu_thumb1_case_uqi>
    163c:	07090503 	.word	0x07090503
    1640:	03          	.byte	0x03
    1641:	00          	.byte	0x00
  {
    case AR_INTERNAL:
    case AR_INTERNAL2V23:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    1642:	390e      	subs	r1, #14
    1644:	e002      	b.n	164c <analogReference+0x38>
      break;

    case AR_EXTERNAL:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    1646:	390c      	subs	r1, #12
    1648:	e000      	b.n	164c <analogReference+0x38>
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    164a:	390d      	subs	r1, #13
    164c:	430a      	orrs	r2, r1
    164e:	705a      	strb	r2, [r3, #1]
      break;
    1650:	e00a      	b.n	1668 <analogReference+0x54>

    case AR_DEFAULT:
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    1652:	21f0      	movs	r1, #240	; 0xf0
    1654:	6913      	ldr	r3, [r2, #16]
    1656:	0509      	lsls	r1, r1, #20
    1658:	430b      	orrs	r3, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    165a:	210f      	movs	r1, #15
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
      break;

    case AR_DEFAULT:
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    165c:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    165e:	7853      	ldrb	r3, [r2, #1]
    1660:	438b      	bics	r3, r1
    1662:	390d      	subs	r1, #13
    1664:	430b      	orrs	r3, r1
    1666:	7053      	strb	r3, [r2, #1]
      break;
  }
}
    1668:	bd10      	pop	{r4, pc}
    166a:	46c0      	nop			; (mov r8, r8)
    166c:	42004000 	.word	0x42004000
    1670:	f0ffffff 	.word	0xf0ffffff

00001674 <pinMode>:
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1674:	2218      	movs	r2, #24
#ifdef __cplusplus
 extern "C" {
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
    1676:	b570      	push	{r4, r5, r6, lr}
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1678:	0016      	movs	r6, r2
#ifdef __cplusplus
 extern "C" {
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
    167a:	0005      	movs	r5, r0
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    167c:	4346      	muls	r6, r0
    167e:	2008      	movs	r0, #8
    1680:	4b24      	ldr	r3, [pc, #144]	; (1714 <pinMode+0xa0>)
    1682:	199e      	adds	r6, r3, r6
    1684:	5630      	ldrsb	r0, [r6, r0]
    1686:	001c      	movs	r4, r3
    1688:	1c43      	adds	r3, r0, #1
    168a:	d041      	beq.n	1710 <pinMode+0x9c>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    168c:	2903      	cmp	r1, #3
    168e:	d83f      	bhi.n	1710 <pinMode+0x9c>
    1690:	0013      	movs	r3, r2
    1692:	0008      	movs	r0, r1
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    1694:	436b      	muls	r3, r5
    1696:	56e2      	ldrsb	r2, [r4, r3]
    1698:	18e3      	adds	r3, r4, r3
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    169a:	f000 fba7 	bl	1dec <__gnu_thumb1_case_uqi>
    169e:	2802      	.short	0x2802
    16a0:	1b0e      	.short	0x1b0e
  {
    case INPUT:
      // Set pin to input mode
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    16a2:	2002      	movs	r0, #2
    16a4:	6859      	ldr	r1, [r3, #4]
    16a6:	01d3      	lsls	r3, r2, #7
    16a8:	4a1b      	ldr	r2, [pc, #108]	; (1718 <pinMode+0xa4>)
    16aa:	189b      	adds	r3, r3, r2
    16ac:	185a      	adds	r2, r3, r1
    16ae:	3240      	adds	r2, #64	; 0x40
    16b0:	7010      	strb	r0, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    16b2:	2201      	movs	r2, #1
    16b4:	408a      	lsls	r2, r1
    16b6:	605a      	str	r2, [r3, #4]
    break ;
    16b8:	e02a      	b.n	1710 <pinMode+0x9c>

    case INPUT_PULLUP:
      // Set pin to input mode with pull-up resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    16ba:	2006      	movs	r0, #6
    16bc:	6859      	ldr	r1, [r3, #4]
    16be:	01d3      	lsls	r3, r2, #7
    16c0:	4a15      	ldr	r2, [pc, #84]	; (1718 <pinMode+0xa4>)
    16c2:	189b      	adds	r3, r3, r2
    16c4:	185a      	adds	r2, r3, r1
    16c6:	3240      	adds	r2, #64	; 0x40
    16c8:	7010      	strb	r0, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    16ca:	2201      	movs	r2, #1
    16cc:	408a      	lsls	r2, r1
    16ce:	605a      	str	r2, [r3, #4]

      // Enable pull level (cf '22.6.3.2 Input Configuration' and '22.8.7 Data Output Value Set')
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    16d0:	619a      	str	r2, [r3, #24]
    break ;
    16d2:	e01d      	b.n	1710 <pinMode+0x9c>

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    16d4:	2006      	movs	r0, #6
    16d6:	6859      	ldr	r1, [r3, #4]
    16d8:	01d3      	lsls	r3, r2, #7
    16da:	4a0f      	ldr	r2, [pc, #60]	; (1718 <pinMode+0xa4>)
    16dc:	189b      	adds	r3, r3, r2
    16de:	185a      	adds	r2, r3, r1
    16e0:	3240      	adds	r2, #64	; 0x40
    16e2:	7010      	strb	r0, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    16e4:	2201      	movs	r2, #1
    16e6:	408a      	lsls	r2, r1
    16e8:	605a      	str	r2, [r3, #4]

      // Enable pull level (cf '22.6.3.2 Input Configuration' and '22.8.6 Data Output Value Clear')
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    16ea:	615a      	str	r2, [r3, #20]
    break ;
    16ec:	e010      	b.n	1710 <pinMode+0x9c>

    case OUTPUT:
      // enable input, to support reading back values
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].bit.INEN = 1 ;
    16ee:	2402      	movs	r4, #2
    16f0:	6858      	ldr	r0, [r3, #4]
    16f2:	01d3      	lsls	r3, r2, #7
    16f4:	4a08      	ldr	r2, [pc, #32]	; (1718 <pinMode+0xa4>)
    16f6:	189b      	adds	r3, r3, r2
    16f8:	181a      	adds	r2, r3, r0
    16fa:	3240      	adds	r2, #64	; 0x40
    16fc:	7811      	ldrb	r1, [r2, #0]
    16fe:	4321      	orrs	r1, r4
    1700:	7011      	strb	r1, [r2, #0]

      // disable pullups
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].bit.PULLEN = 0 ;
    1702:	7811      	ldrb	r1, [r2, #0]
    1704:	1924      	adds	r4, r4, r4
    1706:	43a1      	bics	r1, r4
    1708:	7011      	strb	r1, [r2, #0]

      // Set pin to output mode
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    170a:	2201      	movs	r2, #1
    170c:	4082      	lsls	r2, r0
    170e:	609a      	str	r2, [r3, #8]

    default:
      // do nothing
    break ;
  }
}
    1710:	bd70      	pop	{r4, r5, r6, pc}
    1712:	46c0      	nop			; (mov r8, r8)
    1714:	00002118 	.word	0x00002118
    1718:	41004400 	.word	0x41004400

0000171c <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    171c:	2318      	movs	r3, #24
    171e:	2208      	movs	r2, #8
    1720:	4358      	muls	r0, r3
    break ;
  }
}

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
    1722:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1724:	4e12      	ldr	r6, [pc, #72]	; (1770 <digitalWrite+0x54>)
    1726:	1833      	adds	r3, r6, r0
    1728:	569a      	ldrsb	r2, [r3, r2]
    172a:	3201      	adds	r2, #1
    172c:	d01e      	beq.n	176c <digitalWrite+0x50>
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
  uint32_t pinMask = (1ul << pin);
    172e:	2201      	movs	r2, #1
    1730:	0015      	movs	r5, r2
  {
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    1732:	685c      	ldr	r4, [r3, #4]
  uint32_t pinMask = (1ul << pin);

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    1734:	5783      	ldrsb	r3, [r0, r6]
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
  uint32_t pinMask = (1ul << pin);
    1736:	40a5      	lsls	r5, r4

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    1738:	480e      	ldr	r0, [pc, #56]	; (1774 <digitalWrite+0x58>)
    173a:	01db      	lsls	r3, r3, #7
    173c:	181e      	adds	r6, r3, r0
    173e:	68b0      	ldr	r0, [r6, #8]
    1740:	4228      	tst	r0, r5
    1742:	d10c      	bne.n	175e <digitalWrite+0x42>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    1744:	0008      	movs	r0, r1
    1746:	1e47      	subs	r7, r0, #1
    1748:	41b8      	sbcs	r0, r7
    174a:	4002      	ands	r2, r0
    174c:	0090      	lsls	r0, r2, #2
    174e:	2204      	movs	r2, #4
    1750:	1934      	adds	r4, r6, r4
    1752:	3440      	adds	r4, #64	; 0x40
    1754:	7826      	ldrb	r6, [r4, #0]
    1756:	4396      	bics	r6, r2
    1758:	0032      	movs	r2, r6
    175a:	4302      	orrs	r2, r0
    175c:	7022      	strb	r2, [r4, #0]
  }

  switch ( ulVal )
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    175e:	4a05      	ldr	r2, [pc, #20]	; (1774 <digitalWrite+0x58>)
    1760:	189b      	adds	r3, r3, r2
  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
  }

  switch ( ulVal )
    1762:	2900      	cmp	r1, #0
    1764:	d101      	bne.n	176a <digitalWrite+0x4e>
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    1766:	615d      	str	r5, [r3, #20]
    break ;
    1768:	e000      	b.n	176c <digitalWrite+0x50>

    default:
      PORT->Group[port].OUTSET.reg = pinMask;
    176a:	619d      	str	r5, [r3, #24]
    break ;
  }

  return ;
}
    176c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    176e:	46c0      	nop			; (mov r8, r8)
    1770:	00002118 	.word	0x00002118
    1774:	41004400 	.word	0x41004400

00001778 <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    1778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    177a:	2318      	movs	r3, #24

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    177c:	0002      	movs	r2, r0
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    177e:	4343      	muls	r3, r0
    1780:	2008      	movs	r0, #8
    1782:	4c2c      	ldr	r4, [pc, #176]	; (1834 <pinPeripheral+0xbc>)
    1784:	18e3      	adds	r3, r4, r3
    1786:	5618      	ldrsb	r0, [r3, r0]
    1788:	0023      	movs	r3, r4
  {
    return -1 ;
    178a:	0004      	movs	r4, r0
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    178c:	3001      	adds	r0, #1
    178e:	d04e      	beq.n	182e <pinPeripheral+0xb6>
  {
    return -1 ;
  }

  switch ( ulPeripheral )
    1790:	1c48      	adds	r0, r1, #1
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    1792:	2400      	movs	r4, #0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
  {
    return -1 ;
  }

  switch ( ulPeripheral )
    1794:	280c      	cmp	r0, #12
    1796:	d84a      	bhi.n	182e <pinPeripheral+0xb6>
    1798:	f000 fb28 	bl	1dec <__gnu_thumb1_case_uqi>
    179c:	1a1a1a47 	.word	0x1a1a1a47
    17a0:	1a1a1a1a 	.word	0x1a1a1a1a
    17a4:	0707071a 	.word	0x0707071a
    17a8:	07          	.byte	0x07
    17a9:	00          	.byte	0x00
    case PIO_OUTPUT:
      // Disable peripheral muxing, done in pinMode
//			PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].bit.PMUXEN = 0 ;

      // Configure pin mode, if requested
      if ( ulPeripheral == PIO_INPUT )
    17aa:	2909      	cmp	r1, #9
    17ac:	d101      	bne.n	17b2 <pinPeripheral+0x3a>
      {
        pinMode( ulPin, INPUT ) ;
    17ae:	2100      	movs	r1, #0
    17b0:	e002      	b.n	17b8 <pinPeripheral+0x40>
      }
      else
      {
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    17b2:	290a      	cmp	r1, #10
    17b4:	d104      	bne.n	17c0 <pinPeripheral+0x48>
        {
          pinMode( ulPin, INPUT_PULLUP ) ;
    17b6:	3908      	subs	r1, #8
    17b8:	0010      	movs	r0, r2
    17ba:	f7ff ff5b 	bl	1674 <pinMode>
    17be:	e023      	b.n	1808 <pinPeripheral+0x90>
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    17c0:	2400      	movs	r4, #0
        {
          pinMode( ulPin, INPUT_PULLUP ) ;
        }
        else
        {
          if ( ulPeripheral == PIO_OUTPUT )
    17c2:	290b      	cmp	r1, #11
    17c4:	d133      	bne.n	182e <pinPeripheral+0xb6>
          {
            pinMode( ulPin, OUTPUT ) ;
    17c6:	390a      	subs	r1, #10
    17c8:	0010      	movs	r0, r2
    17ca:	f7ff ff53 	bl	1674 <pinMode>
    17ce:	e02e      	b.n	182e <pinPeripheral+0xb6>
                                                                    PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_PMUXEN | PORT_WRCONFIG_PMUX( ulPeripheral ) |
                                                                    PORT_WRCONFIG_WRPINCFG |
                                                                    PORT_WRCONFIG_PINMASK( g_APinDescription[ulPin].ulPin - 16 ) ;
      }
#else
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    17d0:	2018      	movs	r0, #24
    17d2:	4342      	muls	r2, r0
    17d4:	1898      	adds	r0, r3, r2
    17d6:	6846      	ldr	r6, [r0, #4]
    17d8:	2501      	movs	r5, #1
    17da:	0034      	movs	r4, r6
    17dc:	569a      	ldrsb	r2, [r3, r2]
    17de:	402c      	ands	r4, r5
      {
        uint32_t temp ;

        // Get whole current setup for both odd and even pins and remove odd one
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    17e0:	01d3      	lsls	r3, r2, #7
    17e2:	0870      	lsrs	r0, r6, #1
    17e4:	4a14      	ldr	r2, [pc, #80]	; (1838 <pinPeripheral+0xc0>)
                                                                    PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_PMUXEN | PORT_WRCONFIG_PMUX( ulPeripheral ) |
                                                                    PORT_WRCONFIG_WRPINCFG |
                                                                    PORT_WRCONFIG_PINMASK( g_APinDescription[ulPin].ulPin - 16 ) ;
      }
#else
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    17e6:	2c00      	cmp	r4, #0
    17e8:	d010      	beq.n	180c <pinPeripheral+0x94>
      {
        uint32_t temp ;

        // Get whole current setup for both odd and even pins and remove odd one
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    17ea:	189a      	adds	r2, r3, r2
        // Set new muxing
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    17ec:	230f      	movs	r3, #15
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
      {
        uint32_t temp ;

        // Get whole current setup for both odd and even pins and remove odd one
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    17ee:	1810      	adds	r0, r2, r0
    17f0:	3030      	adds	r0, #48	; 0x30
    17f2:	7804      	ldrb	r4, [r0, #0]
        // Set new muxing
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    17f4:	0109      	lsls	r1, r1, #4
    17f6:	4023      	ands	r3, r4
    17f8:	4319      	orrs	r1, r3
    17fa:	b2c9      	uxtb	r1, r1
        // Enable port mux
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    17fc:	1993      	adds	r3, r2, r6
        uint32_t temp ;

        // Get whole current setup for both odd and even pins and remove odd one
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
        // Set new muxing
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    17fe:	7001      	strb	r1, [r0, #0]
        // Enable port mux
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    1800:	3340      	adds	r3, #64	; 0x40
    1802:	781a      	ldrb	r2, [r3, #0]
    1804:	4315      	orrs	r5, r2
    1806:	701d      	strb	r5, [r3, #0]
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    1808:	2400      	movs	r4, #0
    180a:	e010      	b.n	182e <pinPeripheral+0xb6>
      else // even pin
      {
        uint32_t temp ;

        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    180c:	270f      	movs	r7, #15
      }
      else // even pin
      {
        uint32_t temp ;

        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
    180e:	189b      	adds	r3, r3, r2
    1810:	1818      	adds	r0, r3, r0
    1812:	3030      	adds	r0, #48	; 0x30
    1814:	7802      	ldrb	r2, [r0, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    1816:	199b      	adds	r3, r3, r6
      else // even pin
      {
        uint32_t temp ;

        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    1818:	43ba      	bics	r2, r7
    181a:	4311      	orrs	r1, r2
    181c:	b2c9      	uxtb	r1, r1
    181e:	7001      	strb	r1, [r0, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    1820:	3340      	adds	r3, #64	; 0x40
    1822:	781a      	ldrb	r2, [r3, #0]
    1824:	4315      	orrs	r5, r2
    1826:	701d      	strb	r5, [r3, #0]
    1828:	e001      	b.n	182e <pinPeripheral+0xb6>
      }
#endif
    break ;

    case PIO_NOT_A_PIN:
      return -1l ;
    182a:	2401      	movs	r4, #1
    182c:	4264      	negs	r4, r4
    break ;
  }

  return 0l ;
}
    182e:	0020      	movs	r0, r4
    1830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1832:	46c0      	nop			; (mov r8, r8)
    1834:	00002118 	.word	0x00002118
    1838:	41004400 	.word	0x41004400

0000183c <SERCOM0_Handler>:
SERCOM sercom5( SERCOM5 ) ;

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
void SERCOM0_Handler()
{
    183c:	b510      	push	{r4, lr}
  Serial1.IrqHandler();
    183e:	4802      	ldr	r0, [pc, #8]	; (1848 <SERCOM0_Handler+0xc>)
    1840:	f000 f9ac 	bl	1b9c <_ZN4Uart10IrqHandlerEv>
}
    1844:	bd10      	pop	{r4, pc}
    1846:	46c0      	nop			; (mov r8, r8)
    1848:	20000760 	.word	0x20000760

0000184c <SERCOM5_Handler>:

void SERCOM5_Handler()
{
    184c:	b510      	push	{r4, lr}
  Serial.IrqHandler();
    184e:	4802      	ldr	r0, [pc, #8]	; (1858 <SERCOM5_Handler+0xc>)
    1850:	f000 f9a4 	bl	1b9c <_ZN4Uart10IrqHandlerEv>
}
    1854:	bd10      	pop	{r4, pc}
    1856:	46c0      	nop			; (mov r8, r8)
    1858:	20000700 	.word	0x20000700

0000185c <_GLOBAL__sub_I_g_APinDescription>:
    185c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
SERCOM sercom2( SERCOM2 ) ;
SERCOM sercom3( SERCOM3 ) ;
SERCOM sercom4( SERCOM4 ) ;
SERCOM sercom5( SERCOM5 ) ;

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    185e:	2401      	movs	r4, #1
    1860:	2603      	movs	r6, #3
} ;

const void* g_apTCInstances[TCC_INST_NUM+TC_INST_NUM]={ TCC0, TCC1, TCC2, TC3, TC4, TC5 } ;

// Multi-serial objects instantiation
SERCOM sercom0( SERCOM0 ) ;
    1862:	4f15      	ldr	r7, [pc, #84]	; (18b8 <_GLOBAL__sub_I_g_APinDescription+0x5c>)
    1864:	4915      	ldr	r1, [pc, #84]	; (18bc <_GLOBAL__sub_I_g_APinDescription+0x60>)
    1866:	0038      	movs	r0, r7
    1868:	f000 f846 	bl	18f8 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    186c:	4914      	ldr	r1, [pc, #80]	; (18c0 <_GLOBAL__sub_I_g_APinDescription+0x64>)
    186e:	4815      	ldr	r0, [pc, #84]	; (18c4 <_GLOBAL__sub_I_g_APinDescription+0x68>)
    1870:	f000 f842 	bl	18f8 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    1874:	4914      	ldr	r1, [pc, #80]	; (18c8 <_GLOBAL__sub_I_g_APinDescription+0x6c>)
    1876:	4815      	ldr	r0, [pc, #84]	; (18cc <_GLOBAL__sub_I_g_APinDescription+0x70>)
    1878:	f000 f83e 	bl	18f8 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    187c:	4914      	ldr	r1, [pc, #80]	; (18d0 <_GLOBAL__sub_I_g_APinDescription+0x74>)
    187e:	4815      	ldr	r0, [pc, #84]	; (18d4 <_GLOBAL__sub_I_g_APinDescription+0x78>)
    1880:	f000 f83a 	bl	18f8 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    1884:	4914      	ldr	r1, [pc, #80]	; (18d8 <_GLOBAL__sub_I_g_APinDescription+0x7c>)
    1886:	4815      	ldr	r0, [pc, #84]	; (18dc <_GLOBAL__sub_I_g_APinDescription+0x80>)
    1888:	f000 f836 	bl	18f8 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    188c:	4d14      	ldr	r5, [pc, #80]	; (18e0 <_GLOBAL__sub_I_g_APinDescription+0x84>)
    188e:	4915      	ldr	r1, [pc, #84]	; (18e4 <_GLOBAL__sub_I_g_APinDescription+0x88>)
    1890:	0028      	movs	r0, r5
    1892:	f000 f831 	bl	18f8 <_ZN6SERCOMC1EP6Sercom>

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    1896:	0039      	movs	r1, r7
    1898:	9600      	str	r6, [sp, #0]
    189a:	0023      	movs	r3, r4
    189c:	9401      	str	r4, [sp, #4]
    189e:	2200      	movs	r2, #0
    18a0:	4811      	ldr	r0, [pc, #68]	; (18e8 <_GLOBAL__sub_I_g_APinDescription+0x8c>)
    18a2:	f000 f955 	bl	1b50 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
    18a6:	9600      	str	r6, [sp, #0]
    18a8:	0029      	movs	r1, r5
    18aa:	9401      	str	r4, [sp, #4]
    18ac:	231e      	movs	r3, #30
    18ae:	221f      	movs	r2, #31
    18b0:	480e      	ldr	r0, [pc, #56]	; (18ec <_GLOBAL__sub_I_g_APinDescription+0x90>)
    18b2:	f000 f94d 	bl	1b50 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
}

void SERCOM5_Handler()
{
  Serial.IrqHandler();
}
    18b6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    18b8:	200007c0 	.word	0x200007c0
    18bc:	42000800 	.word	0x42000800
    18c0:	42000c00 	.word	0x42000c00
    18c4:	200007c4 	.word	0x200007c4
    18c8:	42001000 	.word	0x42001000
    18cc:	200007c8 	.word	0x200007c8
    18d0:	42001400 	.word	0x42001400
    18d4:	200007cc 	.word	0x200007cc
    18d8:	42001800 	.word	0x42001800
    18dc:	200007d0 	.word	0x200007d0
    18e0:	200007d4 	.word	0x200007d4
    18e4:	42001c00 	.word	0x42001c00
    18e8:	20000760 	.word	0x20000760
    18ec:	20000700 	.word	0x20000700

000018f0 <_Znwj>:
    18f0:	b510      	push	{r4, lr}
    18f2:	f000 fb37 	bl	1f64 <malloc>
    18f6:	bd10      	pop	{r4, pc}

000018f8 <_ZN6SERCOMC1EP6Sercom>:
#include "SERCOM.h"
#include "variant.h"

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    18f8:	6001      	str	r1, [r0, #0]
}
    18fa:	4770      	bx	lr

000018fc <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    18fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    18fe:	0015      	movs	r5, r2
    1900:	aa05      	add	r2, sp, #20
    1902:	7814      	ldrb	r4, [r2, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    1904:	6802      	ldr	r2, [r0, #0]
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    1906:	1e9f      	subs	r7, r3, #2
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    1908:	4694      	mov	ip, r2
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    190a:	6816      	ldr	r6, [r2, #0]
    190c:	1e7a      	subs	r2, r7, #1
    190e:	4197      	sbcs	r7, r2
    1910:	4662      	mov	r2, ip
    1912:	07ad      	lsls	r5, r5, #30
    1914:	4335      	orrs	r5, r6
    1916:	063f      	lsls	r7, r7, #24
    1918:	433d      	orrs	r5, r7
    191a:	6015      	str	r5, [r2, #0]

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    191c:	2207      	movs	r2, #7
    191e:	4011      	ands	r1, r2
    1920:	000a      	movs	r2, r1
    1922:	6805      	ldr	r5, [r0, #0]
    1924:	01a0      	lsls	r0, r4, #6
    1926:	4302      	orrs	r2, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    1928:	686e      	ldr	r6, [r5, #4]
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    192a:	2000      	movs	r0, #0
    192c:	2b02      	cmp	r3, #2
    192e:	d000      	beq.n	1932 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x36>
    1930:	0358      	lsls	r0, r3, #13
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    1932:	0031      	movs	r1, r6
    1934:	4311      	orrs	r1, r2
    1936:	4301      	orrs	r1, r0
    1938:	6069      	str	r1, [r5, #4]
}
    193a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000193c <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    193c:	b530      	push	{r4, r5, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    193e:	25c0      	movs	r5, #192	; 0xc0
    1940:	0512      	lsls	r2, r2, #20
    1942:	03ad      	lsls	r5, r5, #14
    1944:	402a      	ands	r2, r5
    1946:	25c0      	movs	r5, #192	; 0xc0
}

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    1948:	6804      	ldr	r4, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    194a:	02ad      	lsls	r5, r5, #10
    194c:	6823      	ldr	r3, [r4, #0]
    194e:	0409      	lsls	r1, r1, #16
    1950:	431a      	orrs	r2, r3
    1952:	4029      	ands	r1, r5
    1954:	4311      	orrs	r1, r2
    1956:	6021      	str	r1, [r4, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    1958:	6802      	ldr	r2, [r0, #0]
    195a:	6853      	ldr	r3, [r2, #4]
    195c:	432b      	orrs	r3, r5
    195e:	6053      	str	r3, [r2, #4]
}
    1960:	bd30      	pop	{r4, r5, pc}

00001962 <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    1962:	2101      	movs	r1, #1
    1964:	6802      	ldr	r2, [r0, #0]
    1966:	6813      	ldr	r3, [r2, #0]
    1968:	430b      	orrs	r3, r1
    196a:	6013      	str	r3, [r2, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    196c:	6803      	ldr	r3, [r0, #0]
    196e:	681a      	ldr	r2, [r3, #0]
    1970:	07d2      	lsls	r2, r2, #31
    1972:	d4fc      	bmi.n	196e <_ZN6SERCOM9resetUARTEv+0xc>
    1974:	69da      	ldr	r2, [r3, #28]
    1976:	07d2      	lsls	r2, r2, #31
    1978:	d4f9      	bmi.n	196e <_ZN6SERCOM9resetUARTEv+0xc>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    197a:	4770      	bx	lr

0000197c <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    197c:	2102      	movs	r1, #2
    197e:	6802      	ldr	r2, [r0, #0]
    1980:	6813      	ldr	r3, [r2, #0]
    1982:	430b      	orrs	r3, r1
    1984:	6013      	str	r3, [r2, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    1986:	6802      	ldr	r2, [r0, #0]
    1988:	69d3      	ldr	r3, [r2, #28]
    198a:	079b      	lsls	r3, r3, #30
    198c:	d4fc      	bmi.n	1988 <_ZN6SERCOM10enableUARTEv+0xc>
}
    198e:	4770      	bx	lr

00001990 <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    1990:	6803      	ldr	r3, [r0, #0]
    1992:	7e1a      	ldrb	r2, [r3, #24]
}

void SERCOM::flushUART()
{
  // Skip checking transmission completion if data register is empty
  if(isDataRegisterEmptyUART())
    1994:	07d2      	lsls	r2, r2, #31
    1996:	d402      	bmi.n	199e <_ZN6SERCOM9flushUARTEv+0xe>
    return;

  // Wait for transmission to complete
  while(!sercom->USART.INTFLAG.bit.TXC);
    1998:	7e1a      	ldrb	r2, [r3, #24]
    199a:	0792      	lsls	r2, r2, #30
    199c:	d5fc      	bpl.n	1998 <_ZN6SERCOM9flushUARTEv+0x8>
}
    199e:	4770      	bx	lr

000019a0 <_ZN6SERCOM15clearStatusUARTEv>:

void SERCOM::clearStatusUART()
{
  //Reset (with 0) the STATUS register
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    19a0:	2200      	movs	r2, #0
    19a2:	6803      	ldr	r3, [r0, #0]
    19a4:	835a      	strh	r2, [r3, #26]
}
    19a6:	4770      	bx	lr

000019a8 <_ZN6SERCOM17availableDataUARTEv>:

bool SERCOM::availableDataUART()
{
  //RXC : Receive Complete
  return sercom->USART.INTFLAG.bit.RXC;
    19a8:	6803      	ldr	r3, [r0, #0]
    19aa:	7e18      	ldrb	r0, [r3, #24]
    19ac:	0740      	lsls	r0, r0, #29
    19ae:	0fc0      	lsrs	r0, r0, #31
}
    19b0:	4770      	bx	lr

000019b2 <_ZN6SERCOM11isUARTErrorEv>:

bool SERCOM::isUARTError()
{
  return sercom->USART.INTFLAG.bit.ERROR;
    19b2:	6803      	ldr	r3, [r0, #0]
    19b4:	7e18      	ldrb	r0, [r3, #24]
    19b6:	09c0      	lsrs	r0, r0, #7
}
    19b8:	4770      	bx	lr

000019ba <_ZN6SERCOM20acknowledgeUARTErrorEv>:

void SERCOM::acknowledgeUARTError()
{
  sercom->USART.INTFLAG.bit.ERROR = 1;
    19ba:	2180      	movs	r1, #128	; 0x80
    19bc:	6802      	ldr	r2, [r0, #0]
    19be:	4249      	negs	r1, r1
    19c0:	7e13      	ldrb	r3, [r2, #24]
    19c2:	430b      	orrs	r3, r1
    19c4:	7613      	strb	r3, [r2, #24]
}
    19c6:	4770      	bx	lr

000019c8 <_ZN6SERCOM12readDataUARTEv>:
  return sercom->USART.INTFLAG.bit.DRE;
}

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    19c8:	6803      	ldr	r3, [r0, #0]
    19ca:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    19cc:	b2c0      	uxtb	r0, r0
}
    19ce:	4770      	bx	lr

000019d0 <_ZN6SERCOM13writeDataUARTEh>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    19d0:	6803      	ldr	r3, [r0, #0]
    19d2:	7e1a      	ldrb	r2, [r3, #24]
}

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    19d4:	07d2      	lsls	r2, r2, #31
    19d6:	d5fc      	bpl.n	19d2 <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    19d8:	b289      	uxth	r1, r1
  return 1;
}
    19da:	2001      	movs	r0, #1
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    19dc:	8519      	strh	r1, [r3, #40]	; 0x28
  return 1;
}
    19de:	4770      	bx	lr

000019e0 <_ZN6SERCOM13initClockNVICEv>:
void SERCOM::initClockNVIC( void )
{
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
    19e0:	6803      	ldr	r3, [r0, #0]
    19e2:	4a22      	ldr	r2, [pc, #136]	; (1a6c <_ZN6SERCOM13initClockNVICEv+0x8c>)
  }
}


void SERCOM::initClockNVIC( void )
{
    19e4:	b530      	push	{r4, r5, lr}
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
    19e6:	4293      	cmp	r3, r2
    19e8:	d011      	beq.n	1a0e <_ZN6SERCOM13initClockNVICEv+0x2e>
  {
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
    19ea:	4a21      	ldr	r2, [pc, #132]	; (1a70 <_ZN6SERCOM13initClockNVICEv+0x90>)
    19ec:	4293      	cmp	r3, r2
    19ee:	d011      	beq.n	1a14 <_ZN6SERCOM13initClockNVICEv+0x34>
  {
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
    19f0:	4a20      	ldr	r2, [pc, #128]	; (1a74 <_ZN6SERCOM13initClockNVICEv+0x94>)
    19f2:	4293      	cmp	r3, r2
    19f4:	d011      	beq.n	1a1a <_ZN6SERCOM13initClockNVICEv+0x3a>
  {
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
    19f6:	4a20      	ldr	r2, [pc, #128]	; (1a78 <_ZN6SERCOM13initClockNVICEv+0x98>)
    19f8:	4293      	cmp	r3, r2
    19fa:	d011      	beq.n	1a20 <_ZN6SERCOM13initClockNVICEv+0x40>
  {
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
  }
  else if(sercom == SERCOM4)
    19fc:	4a1f      	ldr	r2, [pc, #124]	; (1a7c <_ZN6SERCOM13initClockNVICEv+0x9c>)
    19fe:	4293      	cmp	r3, r2
    1a00:	d011      	beq.n	1a26 <_ZN6SERCOM13initClockNVICEv+0x46>
  {
    clockId = GCM_SERCOM4_CORE;
    IdNvic = SERCOM4_IRQn;
  }
  else if(sercom == SERCOM5)
    1a02:	4a1f      	ldr	r2, [pc, #124]	; (1a80 <_ZN6SERCOM13initClockNVICEv+0xa0>)
    1a04:	4293      	cmp	r3, r2
    1a06:	d12f      	bne.n	1a68 <_ZN6SERCOM13initClockNVICEv+0x88>
  {
    clockId = GCM_SERCOM5_CORE;
    IdNvic = SERCOM5_IRQn;
    1a08:	230e      	movs	r3, #14
    clockId = GCM_SERCOM4_CORE;
    IdNvic = SERCOM4_IRQn;
  }
  else if(sercom == SERCOM5)
  {
    clockId = GCM_SERCOM5_CORE;
    1a0a:	2219      	movs	r2, #25
    1a0c:	e00d      	b.n	1a2a <_ZN6SERCOM13initClockNVICEv+0x4a>
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
  {
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
    1a0e:	2309      	movs	r3, #9
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
  {
    clockId = GCM_SERCOM0_CORE;
    1a10:	2214      	movs	r2, #20
    1a12:	e00a      	b.n	1a2a <_ZN6SERCOM13initClockNVICEv+0x4a>
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
  {
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
    1a14:	230a      	movs	r3, #10
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
  {
    clockId = GCM_SERCOM1_CORE;
    1a16:	2215      	movs	r2, #21
    1a18:	e007      	b.n	1a2a <_ZN6SERCOM13initClockNVICEv+0x4a>
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
  {
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
    1a1a:	230b      	movs	r3, #11
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
  {
    clockId = GCM_SERCOM2_CORE;
    1a1c:	2216      	movs	r2, #22
    1a1e:	e004      	b.n	1a2a <_ZN6SERCOM13initClockNVICEv+0x4a>
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
  {
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
    1a20:	230c      	movs	r3, #12
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
  {
    clockId = GCM_SERCOM3_CORE;
    1a22:	2217      	movs	r2, #23
    1a24:	e001      	b.n	1a2a <_ZN6SERCOM13initClockNVICEv+0x4a>
    IdNvic = SERCOM3_IRQn;
  }
  else if(sercom == SERCOM4)
  {
    clockId = GCM_SERCOM4_CORE;
    IdNvic = SERCOM4_IRQn;
    1a26:	230d      	movs	r3, #13
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
  }
  else if(sercom == SERCOM4)
  {
    clockId = GCM_SERCOM4_CORE;
    1a28:	2218      	movs	r2, #24

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    1a2a:	2101      	movs	r1, #1
    1a2c:	b2d8      	uxtb	r0, r3
    1a2e:	4081      	lsls	r1, r0
    1a30:	4c14      	ldr	r4, [pc, #80]	; (1a84 <_ZN6SERCOM13initClockNVICEv+0xa4>)
    1a32:	089b      	lsrs	r3, r3, #2
    1a34:	6021      	str	r1, [r4, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1a36:	2103      	movs	r1, #3
    1a38:	4001      	ands	r1, r0
    1a3a:	20ff      	movs	r0, #255	; 0xff
    1a3c:	009b      	lsls	r3, r3, #2
    1a3e:	191b      	adds	r3, r3, r4
    1a40:	24c0      	movs	r4, #192	; 0xc0
    1a42:	00c9      	lsls	r1, r1, #3
    1a44:	4088      	lsls	r0, r1
    1a46:	00a4      	lsls	r4, r4, #2
    1a48:	591d      	ldr	r5, [r3, r4]
    1a4a:	4385      	bics	r5, r0
    1a4c:	20c0      	movs	r0, #192	; 0xc0
    1a4e:	4088      	lsls	r0, r1
    1a50:	0001      	movs	r1, r0
    1a52:	4329      	orrs	r1, r5
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    1a54:	5119      	str	r1, [r3, r4]
  NVIC_SetPriority (IdNvic, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority */

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;
    1a56:	2380      	movs	r3, #128	; 0x80
    1a58:	01db      	lsls	r3, r3, #7
    1a5a:	431a      	orrs	r2, r3
    1a5c:	4b0a      	ldr	r3, [pc, #40]	; (1a88 <_ZN6SERCOM13initClockNVICEv+0xa8>)
    1a5e:	805a      	strh	r2, [r3, #2]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    1a60:	785a      	ldrb	r2, [r3, #1]
    1a62:	b252      	sxtb	r2, r2
    1a64:	2a00      	cmp	r2, #0
    1a66:	dbfb      	blt.n	1a60 <_ZN6SERCOM13initClockNVICEv+0x80>
  {
    /* Wait for synchronization */
  }
}
    1a68:	bd30      	pop	{r4, r5, pc}
    1a6a:	46c0      	nop			; (mov r8, r8)
    1a6c:	42000800 	.word	0x42000800
    1a70:	42000c00 	.word	0x42000c00
    1a74:	42001000 	.word	0x42001000
    1a78:	42001400 	.word	0x42001400
    1a7c:	42001800 	.word	0x42001800
    1a80:	42001c00 	.word	0x42001c00
    1a84:	e000e100 	.word	0xe000e100
    1a88:	40000c00 	.word	0x40000c00

00001a8c <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
/* 	=========================
 *	===== Sercom UART
 *	=========================
*/
void SERCOM::initUART(SercomUartMode mode, SercomUartSampleRate sampleRate, uint32_t baudrate)
{
    1a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a8e:	0004      	movs	r4, r0
    1a90:	000f      	movs	r7, r1
    1a92:	0016      	movs	r6, r2
    1a94:	001d      	movs	r5, r3
  initClockNVIC();
    1a96:	f7ff ffa3 	bl	19e0 <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    1a9a:	0020      	movs	r0, r4
    1a9c:	f7ff ff61 	bl	1962 <_ZN6SERCOM9resetUARTEv>

  //Setting the CTRLA register
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    1aa0:	231c      	movs	r3, #28
    1aa2:	00ba      	lsls	r2, r7, #2
    1aa4:	4013      	ands	r3, r2
    1aa6:	0772      	lsls	r2, r6, #29
    1aa8:	6821      	ldr	r1, [r4, #0]
    1aaa:	0c12      	lsrs	r2, r2, #16
    1aac:	4313      	orrs	r3, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    1aae:	600b      	str	r3, [r1, #0]

  //Setting the Interrupt register
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
                                SERCOM_USART_INTENSET_ERROR; //All others errors
    1ab0:	2384      	movs	r3, #132	; 0x84
    1ab2:	6822      	ldr	r2, [r4, #0]
    1ab4:	7593      	strb	r3, [r2, #22]

  if ( mode == UART_INT_CLOCK )
    1ab6:	2f01      	cmp	r7, #1
    1ab8:	d11a      	bne.n	1af0 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x64>
  {
    uint16_t sampleRateValue;

    if (sampleRate == SAMPLE_RATE_x16) {
      sampleRateValue = 16;
    1aba:	2110      	movs	r1, #16

  if ( mode == UART_INT_CLOCK )
  {
    uint16_t sampleRateValue;

    if (sampleRate == SAMPLE_RATE_x16) {
    1abc:	2e01      	cmp	r6, #1
    1abe:	d000      	beq.n	1ac2 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x36>
      sampleRateValue = 16;
    } else {
      sampleRateValue = 8;
    1ac0:	3908      	subs	r1, #8
    }

    // Asynchronous fractional mode (Table 24-2 in datasheet)
    //   BAUD = fref / (sampleRateValue * fbaud)
    // (multiply by 8, to calculate fractional piece)
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    1ac2:	4b0c      	ldr	r3, [pc, #48]	; (1af4 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x68>)
    1ac4:	4369      	muls	r1, r5
    1ac6:	6818      	ldr	r0, [r3, #0]
    1ac8:	00c0      	lsls	r0, r0, #3
    1aca:	f000 f999 	bl	1e00 <__aeabi_uidiv>

    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    1ace:	2307      	movs	r3, #7
    1ad0:	6821      	ldr	r1, [r4, #0]
    1ad2:	4003      	ands	r3, r0
    1ad4:	898d      	ldrh	r5, [r1, #12]
    1ad6:	035a      	lsls	r2, r3, #13
    1ad8:	04eb      	lsls	r3, r5, #19
    1ada:	0cdb      	lsrs	r3, r3, #19
    1adc:	4313      	orrs	r3, r2
    1ade:	818b      	strh	r3, [r1, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    1ae0:	6821      	ldr	r1, [r4, #0]
    1ae2:	0400      	lsls	r0, r0, #16
    1ae4:	898a      	ldrh	r2, [r1, #12]
    1ae6:	0cc3      	lsrs	r3, r0, #19
    1ae8:	0b50      	lsrs	r0, r2, #13
    1aea:	0340      	lsls	r0, r0, #13
    1aec:	4318      	orrs	r0, r3
    1aee:	8188      	strh	r0, [r1, #12]
  }
}
    1af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1af2:	46c0      	nop			; (mov r8, r8)
    1af4:	20000080 	.word	0x20000080

00001af8 <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
    1af8:	2001      	movs	r0, #1
    1afa:	4770      	bx	lr

00001afc <_ZN4Uart5beginEm>:
  uc_padRX=_padRX ;
  uc_padTX=_padTX;
}

void Uart::begin(unsigned long baudrate)
{
    1afc:	b510      	push	{r4, lr}
  begin(baudrate, (uint8_t)SERIAL_8N1);
    1afe:	6803      	ldr	r3, [r0, #0]
    1b00:	2213      	movs	r2, #19
    1b02:	69db      	ldr	r3, [r3, #28]
    1b04:	4798      	blx	r3
}
    1b06:	bd10      	pop	{r4, pc}

00001b08 <_ZN4Uart3endEv>:

  sercom->enableUART();
}

void Uart::end()
{
    1b08:	b510      	push	{r4, lr}
    1b0a:	0004      	movs	r4, r0
  sercom->resetUART();
    1b0c:	6900      	ldr	r0, [r0, #16]
    1b0e:	f7ff ff28 	bl	1962 <_ZN6SERCOM9resetUARTEv>
  rxBuffer.clear();
    1b12:	0020      	movs	r0, r4
    1b14:	3014      	adds	r0, #20
    1b16:	f000 f947 	bl	1da8 <_ZN10RingBuffer5clearEv>
}
    1b1a:	bd10      	pop	{r4, pc}

00001b1c <_ZN4Uart5flushEv>:

void Uart::flush()
{
    1b1c:	b510      	push	{r4, lr}
  sercom->flushUART();
    1b1e:	6900      	ldr	r0, [r0, #16]
    1b20:	f7ff ff36 	bl	1990 <_ZN6SERCOM9flushUARTEv>
}
    1b24:	bd10      	pop	{r4, pc}

00001b26 <_ZN4Uart9availableEv>:
    sercom->clearStatusUART();
  }
}

int Uart::available()
{
    1b26:	b510      	push	{r4, lr}
  return rxBuffer.available();
    1b28:	3014      	adds	r0, #20
    1b2a:	f000 f94f 	bl	1dcc <_ZN10RingBuffer9availableEv>
}
    1b2e:	bd10      	pop	{r4, pc}

00001b30 <_ZN4Uart4peekEv>:
{
  return (sercom->isDataRegisterEmptyUART() ? 1 : 0);
}

int Uart::peek()
{
    1b30:	b510      	push	{r4, lr}
  return rxBuffer.peek();
    1b32:	3014      	adds	r0, #20
    1b34:	f000 f950 	bl	1dd8 <_ZN10RingBuffer4peekEv>
}
    1b38:	bd10      	pop	{r4, pc}

00001b3a <_ZN4Uart4readEv>:

int Uart::read()
{
    1b3a:	b510      	push	{r4, lr}
  return rxBuffer.read_char();
    1b3c:	3014      	adds	r0, #20
    1b3e:	f000 f937 	bl	1db0 <_ZN10RingBuffer9read_charEv>
}
    1b42:	bd10      	pop	{r4, pc}

00001b44 <_ZN4Uart5writeEh>:

size_t Uart::write(const uint8_t data)
{
    1b44:	b510      	push	{r4, lr}
  sercom->writeDataUART(data);
    1b46:	6900      	ldr	r0, [r0, #16]
    1b48:	f7ff ff42 	bl	19d0 <_ZN6SERCOM13writeDataUARTEh>
  return 1;
}
    1b4c:	2001      	movs	r0, #1
    1b4e:	bd10      	pop	{r4, pc}

00001b50 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:

#include "Uart.h"
#include "Arduino.h"
#include "wiring_private.h"

Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX)
    1b50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1b52:	001d      	movs	r5, r3
    1b54:	ab08      	add	r3, sp, #32
    1b56:	781b      	ldrb	r3, [r3, #0]
    1b58:	0004      	movs	r4, r0
    1b5a:	9300      	str	r3, [sp, #0]
    1b5c:	ab09      	add	r3, sp, #36	; 0x24
    1b5e:	781b      	ldrb	r3, [r3, #0]
    1b60:	0016      	movs	r6, r2
    1b62:	9301      	str	r3, [sp, #4]
    1b64:	2300      	movs	r3, #0
    1b66:	6043      	str	r3, [r0, #4]
    1b68:	23fa      	movs	r3, #250	; 0xfa
    1b6a:	009b      	lsls	r3, r3, #2
    1b6c:	6083      	str	r3, [r0, #8]
    1b6e:	4b0a      	ldr	r3, [pc, #40]	; (1b98 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x48>)
    1b70:	000f      	movs	r7, r1
    1b72:	3308      	adds	r3, #8
    1b74:	6003      	str	r3, [r0, #0]
    1b76:	3014      	adds	r0, #20
    1b78:	f000 f900 	bl	1d7c <_ZN10RingBufferC1Ev>
{
  sercom = _s;
  uc_pinRX = _pinRX;
  uc_pinTX = _pinTX;
  uc_padRX=_padRX ;
    1b7c:	466a      	mov	r2, sp
#include "wiring_private.h"

Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX)
{
  sercom = _s;
  uc_pinRX = _pinRX;
    1b7e:	0023      	movs	r3, r4
  uc_pinTX = _pinTX;
  uc_padRX=_padRX ;
    1b80:	7812      	ldrb	r2, [r2, #0]
#include "wiring_private.h"

Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX)
{
  sercom = _s;
  uc_pinRX = _pinRX;
    1b82:	335c      	adds	r3, #92	; 0x5c
#include "Arduino.h"
#include "wiring_private.h"

Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX)
{
  sercom = _s;
    1b84:	6127      	str	r7, [r4, #16]
  uc_pinRX = _pinRX;
  uc_pinTX = _pinTX;
  uc_padRX=_padRX ;
    1b86:	709a      	strb	r2, [r3, #2]
  uc_padTX=_padTX;
    1b88:	466a      	mov	r2, sp
    1b8a:	7912      	ldrb	r2, [r2, #4]
#include "wiring_private.h"

Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX)
{
  sercom = _s;
  uc_pinRX = _pinRX;
    1b8c:	701e      	strb	r6, [r3, #0]
  uc_pinTX = _pinTX;
    1b8e:	705d      	strb	r5, [r3, #1]
  uc_padRX=_padRX ;
  uc_padTX=_padTX;
}
    1b90:	0020      	movs	r0, r4
{
  sercom = _s;
  uc_pinRX = _pinRX;
  uc_pinTX = _pinTX;
  uc_padRX=_padRX ;
  uc_padTX=_padTX;
    1b92:	70da      	strb	r2, [r3, #3]
}
    1b94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1b96:	46c0      	nop			; (mov r8, r8)
    1b98:	00002538 	.word	0x00002538

00001b9c <_ZN4Uart10IrqHandlerEv>:
{
  sercom->flushUART();
}

void Uart::IrqHandler()
{
    1b9c:	b510      	push	{r4, lr}
    1b9e:	0004      	movs	r4, r0
  if (sercom->availableDataUART()) {
    1ba0:	6900      	ldr	r0, [r0, #16]
    1ba2:	f7ff ff01 	bl	19a8 <_ZN6SERCOM17availableDataUARTEv>
    1ba6:	2800      	cmp	r0, #0
    1ba8:	d007      	beq.n	1bba <_ZN4Uart10IrqHandlerEv+0x1e>
    rxBuffer.store_char(sercom->readDataUART());
    1baa:	6920      	ldr	r0, [r4, #16]
    1bac:	f7ff ff0c 	bl	19c8 <_ZN6SERCOM12readDataUARTEv>
    1bb0:	0001      	movs	r1, r0
    1bb2:	0020      	movs	r0, r4
    1bb4:	3014      	adds	r0, #20
    1bb6:	f000 f8ec 	bl	1d92 <_ZN10RingBuffer10store_charEh>
  }

  if (sercom->isUARTError()) {
    1bba:	6920      	ldr	r0, [r4, #16]
    1bbc:	f7ff fef9 	bl	19b2 <_ZN6SERCOM11isUARTErrorEv>
    1bc0:	2800      	cmp	r0, #0
    1bc2:	d005      	beq.n	1bd0 <_ZN4Uart10IrqHandlerEv+0x34>
    sercom->acknowledgeUARTError();
    1bc4:	6920      	ldr	r0, [r4, #16]
    1bc6:	f7ff fef8 	bl	19ba <_ZN6SERCOM20acknowledgeUARTErrorEv>
    // TODO: if (sercom->isBufferOverflowErrorUART()) ....
    // TODO: if (sercom->isFrameErrorUART()) ....
    // TODO: if (sercom->isParityErrorUART()) ....
    sercom->clearStatusUART();
    1bca:	6920      	ldr	r0, [r4, #16]
    1bcc:	f7ff fee8 	bl	19a0 <_ZN6SERCOM15clearStatusUARTEv>
  }
}
    1bd0:	bd10      	pop	{r4, pc}

00001bd2 <_ZN4Uart16extractNbStopBitEt>:
  return 1;
}

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
    1bd2:	23f0      	movs	r3, #240	; 0xf0
    1bd4:	4019      	ands	r1, r3
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    1bd6:	3930      	subs	r1, #48	; 0x30
    1bd8:	0008      	movs	r0, r1
    1bda:	4241      	negs	r1, r0
    1bdc:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
    1bde:	4770      	bx	lr

00001be0 <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    1be0:	23f0      	movs	r3, #240	; 0xf0
    1be2:	011b      	lsls	r3, r3, #4
    1be4:	4019      	ands	r1, r3
    1be6:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    1be8:	2006      	movs	r0, #6
  }
}

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    1bea:	009b      	lsls	r3, r3, #2
    1bec:	4299      	cmp	r1, r3
    1bee:	d00a      	beq.n	1c06 <_ZN4Uart15extractCharSizeEt+0x26>
    1bf0:	3301      	adds	r3, #1
    1bf2:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    1bf4:	3001      	adds	r0, #1
  }
}

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    1bf6:	4299      	cmp	r1, r3
    1bf8:	d005      	beq.n	1c06 <_ZN4Uart15extractCharSizeEt+0x26>
    1bfa:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;
    1bfc:	3802      	subs	r0, #2
  }
}

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    1bfe:	005b      	lsls	r3, r3, #1
    1c00:	4299      	cmp	r1, r3
    1c02:	d000      	beq.n	1c06 <_ZN4Uart15extractCharSizeEt+0x26>
    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    1c04:	2000      	movs	r0, #0

  }
}
    1c06:	4770      	bx	lr

00001c08 <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    1c08:	230f      	movs	r3, #15
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    1c0a:	2000      	movs	r0, #0
  }
}

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    1c0c:	4019      	ands	r1, r3
    1c0e:	2901      	cmp	r1, #1
    1c10:	d004      	beq.n	1c1c <_ZN4Uart13extractParityEt+0x14>
  {
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;
    1c12:	3902      	subs	r1, #2
    1c14:	424b      	negs	r3, r1
    1c16:	414b      	adcs	r3, r1
    1c18:	3002      	adds	r0, #2
    1c1a:	1ac0      	subs	r0, r0, r3
      return SERCOM_EVEN_PARITY;

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
    1c1c:	4770      	bx	lr
	...

00001c20 <_ZN4Uart5beginEmt>:
  begin(baudrate, (uint8_t)SERIAL_8N1);
}

void Uart::begin(unsigned long baudrate, uint16_t config)
{
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1c20:	0003      	movs	r3, r0
{
  begin(baudrate, (uint8_t)SERIAL_8N1);
}

void Uart::begin(unsigned long baudrate, uint16_t config)
{
    1c22:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1c24:	2518      	movs	r5, #24
{
  begin(baudrate, (uint8_t)SERIAL_8N1);
}

void Uart::begin(unsigned long baudrate, uint16_t config)
{
    1c26:	b085      	sub	sp, #20
    1c28:	9103      	str	r1, [sp, #12]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1c2a:	335c      	adds	r3, #92	; 0x5c
{
  begin(baudrate, (uint8_t)SERIAL_8N1);
}

void Uart::begin(unsigned long baudrate, uint16_t config)
{
    1c2c:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1c2e:	7818      	ldrb	r0, [r3, #0]
    1c30:	002b      	movs	r3, r5
    1c32:	2108      	movs	r1, #8
    1c34:	4343      	muls	r3, r0
    1c36:	4f1b      	ldr	r7, [pc, #108]	; (1ca4 <_ZN4Uart5beginEmt+0x84>)
{
  begin(baudrate, (uint8_t)SERIAL_8N1);
}

void Uart::begin(unsigned long baudrate, uint16_t config)
{
    1c38:	0016      	movs	r6, r2
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1c3a:	18fb      	adds	r3, r7, r3
    1c3c:	5659      	ldrsb	r1, [r3, r1]
    1c3e:	f7ff fd9b 	bl	1778 <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
    1c42:	0023      	movs	r3, r4
    1c44:	2108      	movs	r1, #8
    1c46:	335d      	adds	r3, #93	; 0x5d
    1c48:	7818      	ldrb	r0, [r3, #0]
    1c4a:	4345      	muls	r5, r0
    1c4c:	197f      	adds	r7, r7, r5
    1c4e:	5679      	ldrsb	r1, [r7, r1]
    1c50:	f7ff fd92 	bl	1778 <pinPeripheral>

  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    1c54:	2201      	movs	r2, #1
    1c56:	9b03      	ldr	r3, [sp, #12]
    1c58:	0011      	movs	r1, r2
    1c5a:	6920      	ldr	r0, [r4, #16]
    1c5c:	f7ff ff16 	bl	1a8c <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    1c60:	0031      	movs	r1, r6
    1c62:	0020      	movs	r0, r4
    1c64:	f7ff ffbc 	bl	1be0 <_ZN4Uart15extractCharSizeEt>
    1c68:	0031      	movs	r1, r6
    1c6a:	0005      	movs	r5, r0
    1c6c:	0020      	movs	r0, r4
    1c6e:	f7ff ffcb 	bl	1c08 <_ZN4Uart13extractParityEt>
    1c72:	0031      	movs	r1, r6
    1c74:	0007      	movs	r7, r0
    1c76:	0020      	movs	r0, r4
    1c78:	f7ff ffab 	bl	1bd2 <_ZN4Uart16extractNbStopBitEt>
    1c7c:	003b      	movs	r3, r7
    1c7e:	9000      	str	r0, [sp, #0]
    1c80:	0029      	movs	r1, r5
    1c82:	6920      	ldr	r0, [r4, #16]
    1c84:	2201      	movs	r2, #1
    1c86:	f7ff fe39 	bl	18fc <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    1c8a:	0023      	movs	r3, r4
    1c8c:	335e      	adds	r3, #94	; 0x5e
    1c8e:	781a      	ldrb	r2, [r3, #0]
    1c90:	7859      	ldrb	r1, [r3, #1]
    1c92:	6920      	ldr	r0, [r4, #16]
    1c94:	f7ff fe52 	bl	193c <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>

  sercom->enableUART();
    1c98:	6920      	ldr	r0, [r4, #16]
    1c9a:	f7ff fe6f 	bl	197c <_ZN6SERCOM10enableUARTEv>
}
    1c9e:	b005      	add	sp, #20
    1ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ca2:	46c0      	nop			; (mov r8, r8)
    1ca4:	00002118 	.word	0x00002118

00001ca8 <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    1ca8:	b570      	push	{r4, r5, r6, lr}
    1caa:	000e      	movs	r6, r1
	int sent = 0;
    1cac:	2400      	movs	r4, #0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1cae:	6845      	ldr	r5, [r0, #4]
    1cb0:	2d00      	cmp	r5, #0
    1cb2:	d009      	beq.n	1cc8 <_ZN13PluggableUSB_12getInterfaceEPh+0x20>
		int res = node->getInterface(interfaceCount);
    1cb4:	682b      	ldr	r3, [r5, #0]
    1cb6:	0031      	movs	r1, r6
    1cb8:	685b      	ldr	r3, [r3, #4]
    1cba:	0028      	movs	r0, r5
    1cbc:	4798      	blx	r3
		if (res < 0)
    1cbe:	2800      	cmp	r0, #0
    1cc0:	db04      	blt.n	1ccc <_ZN13PluggableUSB_12getInterfaceEPh+0x24>
			return -1;
		sent += res;
    1cc2:	1824      	adds	r4, r4, r0

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
	int sent = 0;
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1cc4:	68ed      	ldr	r5, [r5, #12]
    1cc6:	e7f3      	b.n	1cb0 <_ZN13PluggableUSB_12getInterfaceEPh+0x8>
    1cc8:	0020      	movs	r0, r4
    1cca:	e001      	b.n	1cd0 <_ZN13PluggableUSB_12getInterfaceEPh+0x28>
		int res = node->getInterface(interfaceCount);
		if (res < 0)
			return -1;
    1ccc:	2001      	movs	r0, #1
    1cce:	4240      	negs	r0, r0
		sent += res;
	}
	return sent;
}
    1cd0:	bd70      	pop	{r4, r5, r6, pc}

00001cd2 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    1cd2:	b570      	push	{r4, r5, r6, lr}
    1cd4:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1cd6:	6844      	ldr	r4, [r0, #4]
    1cd8:	2c00      	cmp	r4, #0
    1cda:	d008      	beq.n	1cee <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1c>
		int ret = node->getDescriptor(setup);
    1cdc:	6823      	ldr	r3, [r4, #0]
    1cde:	0029      	movs	r1, r5
    1ce0:	689b      	ldr	r3, [r3, #8]
    1ce2:	0020      	movs	r0, r4
    1ce4:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
    1ce6:	2800      	cmp	r0, #0
    1ce8:	d102      	bne.n	1cf0 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1e>
}

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1cea:	68e4      	ldr	r4, [r4, #12]
    1cec:	e7f4      	b.n	1cd8 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x6>
		int ret = node->getDescriptor(setup);
		// ret!=0 -> request has been processed
		if (ret)
			return ret;
	}
	return 0;
    1cee:	0020      	movs	r0, r4
}
    1cf0:	bd70      	pop	{r4, r5, r6, pc}

00001cf2 <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
    1cf2:	b570      	push	{r4, r5, r6, lr}
    1cf4:	000d      	movs	r5, r1
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    1cf6:	6844      	ldr	r4, [r0, #4]
    1cf8:	2c00      	cmp	r4, #0
    1cfa:	d007      	beq.n	1d0c <_ZN13PluggableUSB_12getShortNameEPc+0x1a>
               iSerialNum += node->getShortName(iSerialNum);
    1cfc:	6823      	ldr	r3, [r4, #0]
    1cfe:	0029      	movs	r1, r5
    1d00:	0020      	movs	r0, r4
    1d02:	68db      	ldr	r3, [r3, #12]
    1d04:	4798      	blx	r3
}

void PluggableUSB_::getShortName(char *iSerialNum)
{
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    1d06:	68e4      	ldr	r4, [r4, #12]
               iSerialNum += node->getShortName(iSerialNum);
    1d08:	182d      	adds	r5, r5, r0
}

void PluggableUSB_::getShortName(char *iSerialNum)
{
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    1d0a:	e7f5      	b.n	1cf8 <_ZN13PluggableUSB_12getShortNameEPc+0x6>
               iSerialNum += node->getShortName(iSerialNum);
       }
       *iSerialNum = 0;
    1d0c:	702c      	strb	r4, [r5, #0]
}
    1d0e:	bd70      	pop	{r4, r5, r6, pc}

00001d10 <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    1d10:	b570      	push	{r4, r5, r6, lr}
    1d12:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1d14:	6844      	ldr	r4, [r0, #4]
    1d16:	2c00      	cmp	r4, #0
    1d18:	d008      	beq.n	1d2c <_ZN13PluggableUSB_5setupER8USBSetup+0x1c>
		if (node->setup(setup)) {
    1d1a:	6823      	ldr	r3, [r4, #0]
    1d1c:	0029      	movs	r1, r5
    1d1e:	681b      	ldr	r3, [r3, #0]
    1d20:	0020      	movs	r0, r4
    1d22:	4798      	blx	r3
    1d24:	2800      	cmp	r0, #0
    1d26:	d102      	bne.n	1d2e <_ZN13PluggableUSB_5setupER8USBSetup+0x1e>
}

bool PluggableUSB_::setup(USBSetup& setup)
{
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1d28:	68e4      	ldr	r4, [r4, #12]
    1d2a:	e7f4      	b.n	1d16 <_ZN13PluggableUSB_5setupER8USBSetup+0x6>
		if (node->setup(setup)) {
			return true;
		}
	}
	return false;
    1d2c:	0020      	movs	r0, r4
}
    1d2e:	bd70      	pop	{r4, r5, r6, pc}

00001d30 <_Z12PluggableUSBv>:
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    1d30:	2101      	movs	r1, #1
    1d32:	4a06      	ldr	r2, [pc, #24]	; (1d4c <_Z12PluggableUSBv+0x1c>)
	return true;
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
    1d34:	b510      	push	{r4, lr}
	static PluggableUSB_ obj;
    1d36:	6813      	ldr	r3, [r2, #0]
    1d38:	4805      	ldr	r0, [pc, #20]	; (1d50 <_Z12PluggableUSBv+0x20>)
    1d3a:	400b      	ands	r3, r1
    1d3c:	d105      	bne.n	1d4a <_Z12PluggableUSBv+0x1a>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    1d3e:	2402      	movs	r4, #2
    1d40:	7004      	strb	r4, [r0, #0]
    1d42:	1924      	adds	r4, r4, r4
    1d44:	7044      	strb	r4, [r0, #1]
    1d46:	6043      	str	r3, [r0, #4]
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    1d48:	6011      	str	r1, [r2, #0]
	return obj;
}
    1d4a:	bd10      	pop	{r4, pc}
    1d4c:	200007e0 	.word	0x200007e0
    1d50:	200007d8 	.word	0x200007d8

00001d54 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    1d54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1d56:	0006      	movs	r6, r0
    1d58:	000d      	movs	r5, r1
    1d5a:	000c      	movs	r4, r1
    1d5c:	188b      	adds	r3, r1, r2
    1d5e:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
    1d60:	9b01      	ldr	r3, [sp, #4]
    1d62:	1b67      	subs	r7, r4, r5
    1d64:	429c      	cmp	r4, r3
    1d66:	d007      	beq.n	1d78 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    1d68:	6833      	ldr	r3, [r6, #0]
    1d6a:	7821      	ldrb	r1, [r4, #0]
    1d6c:	681b      	ldr	r3, [r3, #0]
    1d6e:	0030      	movs	r0, r6
    1d70:	4798      	blx	r3
    1d72:	3401      	adds	r4, #1
    1d74:	2800      	cmp	r0, #0
    1d76:	d1f3      	bne.n	1d60 <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
    1d78:	0038      	movs	r0, r7
    1d7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00001d7c <_ZN10RingBufferC1Ev>:
*/

#include "RingBuffer.h"
#include <string.h>

RingBuffer::RingBuffer( void )
    1d7c:	b510      	push	{r4, lr}
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    1d7e:	2240      	movs	r2, #64	; 0x40
    1d80:	2100      	movs	r1, #0
*/

#include "RingBuffer.h"
#include <string.h>

RingBuffer::RingBuffer( void )
    1d82:	0004      	movs	r4, r0
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    1d84:	f000 f901 	bl	1f8a <memset>
  }
}

void RingBuffer::clear()
{
	_iHead = 0;
    1d88:	2300      	movs	r3, #0

RingBuffer::RingBuffer( void )
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    clear();
}
    1d8a:	0020      	movs	r0, r4
  }
}

void RingBuffer::clear()
{
	_iHead = 0;
    1d8c:	6423      	str	r3, [r4, #64]	; 0x40
	_iTail = 0;
    1d8e:	6463      	str	r3, [r4, #68]	; 0x44

RingBuffer::RingBuffer( void )
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    clear();
}
    1d90:	bd10      	pop	{r4, pc}

00001d92 <_ZN10RingBuffer10store_charEh>:
	return _aucBuffer[_iTail];
}

int RingBuffer::nextIndex(int index)
{
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    1d92:	233f      	movs	r3, #63	; 0x3f
    clear();
}

void RingBuffer::store_char( uint8_t c )
{
  int i = nextIndex(_iHead);
    1d94:	6c02      	ldr	r2, [r0, #64]	; 0x40
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    clear();
}

void RingBuffer::store_char( uint8_t c )
{
    1d96:	b510      	push	{r4, lr}
	return _aucBuffer[_iTail];
}

int RingBuffer::nextIndex(int index)
{
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    1d98:	1c54      	adds	r4, r2, #1
    1d9a:	4023      	ands	r3, r4

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if ( i != _iTail )
    1d9c:	6c44      	ldr	r4, [r0, #68]	; 0x44
    1d9e:	429c      	cmp	r4, r3
    1da0:	d001      	beq.n	1da6 <_ZN10RingBuffer10store_charEh+0x14>
  {
    _aucBuffer[_iHead] = c ;
    1da2:	5481      	strb	r1, [r0, r2]
    _iHead = i ;
    1da4:	6403      	str	r3, [r0, #64]	; 0x40
  }
}
    1da6:	bd10      	pop	{r4, pc}

00001da8 <_ZN10RingBuffer5clearEv>:

void RingBuffer::clear()
{
	_iHead = 0;
    1da8:	2300      	movs	r3, #0
    1daa:	6403      	str	r3, [r0, #64]	; 0x40
	_iTail = 0;
    1dac:	6443      	str	r3, [r0, #68]	; 0x44
}
    1dae:	4770      	bx	lr

00001db0 <_ZN10RingBuffer9read_charEv>:

int RingBuffer::read_char()
{
	if(_iTail == _iHead)
    1db0:	6c43      	ldr	r3, [r0, #68]	; 0x44
    1db2:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1db4:	4293      	cmp	r3, r2
    1db6:	d006      	beq.n	1dc6 <_ZN10RingBuffer9read_charEv+0x16>
		return -1;

	uint8_t value = _aucBuffer[_iTail];
	_iTail = nextIndex(_iTail);
    1db8:	213f      	movs	r1, #63	; 0x3f
int RingBuffer::read_char()
{
	if(_iTail == _iHead)
		return -1;

	uint8_t value = _aucBuffer[_iTail];
    1dba:	5cc2      	ldrb	r2, [r0, r3]
	_iTail = nextIndex(_iTail);
    1dbc:	3301      	adds	r3, #1
    1dbe:	400b      	ands	r3, r1
    1dc0:	6443      	str	r3, [r0, #68]	; 0x44

	return value;
    1dc2:	0010      	movs	r0, r2
    1dc4:	e001      	b.n	1dca <_ZN10RingBuffer9read_charEv+0x1a>
}

int RingBuffer::read_char()
{
	if(_iTail == _iHead)
		return -1;
    1dc6:	2001      	movs	r0, #1
    1dc8:	4240      	negs	r0, r0

	uint8_t value = _aucBuffer[_iTail];
	_iTail = nextIndex(_iTail);

	return value;
}
    1dca:	4770      	bx	lr

00001dcc <_ZN10RingBuffer9availableEv>:

int RingBuffer::available()
{
	int delta = _iHead - _iTail;
    1dcc:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1dce:	6c40      	ldr	r0, [r0, #68]	; 0x44
    1dd0:	1a18      	subs	r0, r3, r0

	if(delta < 0)
    1dd2:	d500      	bpl.n	1dd6 <_ZN10RingBuffer9availableEv+0xa>
		return SERIAL_BUFFER_SIZE + delta;
    1dd4:	3040      	adds	r0, #64	; 0x40
	else
		return delta;
}
    1dd6:	4770      	bx	lr

00001dd8 <_ZN10RingBuffer4peekEv>:

int RingBuffer::peek()
{
	if(_iTail == _iHead)
    1dd8:	6c43      	ldr	r3, [r0, #68]	; 0x44
    1dda:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1ddc:	4293      	cmp	r3, r2
    1dde:	d001      	beq.n	1de4 <_ZN10RingBuffer4peekEv+0xc>
		return -1;

	return _aucBuffer[_iTail];
    1de0:	5cc0      	ldrb	r0, [r0, r3]
    1de2:	e001      	b.n	1de8 <_ZN10RingBuffer4peekEv+0x10>
}

int RingBuffer::peek()
{
	if(_iTail == _iHead)
		return -1;
    1de4:	2001      	movs	r0, #1
    1de6:	4240      	negs	r0, r0

	return _aucBuffer[_iTail];
}
    1de8:	4770      	bx	lr
	...

00001dec <__gnu_thumb1_case_uqi>:
    1dec:	b402      	push	{r1}
    1dee:	4671      	mov	r1, lr
    1df0:	0849      	lsrs	r1, r1, #1
    1df2:	0049      	lsls	r1, r1, #1
    1df4:	5c09      	ldrb	r1, [r1, r0]
    1df6:	0049      	lsls	r1, r1, #1
    1df8:	448e      	add	lr, r1
    1dfa:	bc02      	pop	{r1}
    1dfc:	4770      	bx	lr
    1dfe:	46c0      	nop			; (mov r8, r8)

00001e00 <__aeabi_uidiv>:
    1e00:	2200      	movs	r2, #0
    1e02:	0843      	lsrs	r3, r0, #1
    1e04:	428b      	cmp	r3, r1
    1e06:	d374      	bcc.n	1ef2 <__aeabi_uidiv+0xf2>
    1e08:	0903      	lsrs	r3, r0, #4
    1e0a:	428b      	cmp	r3, r1
    1e0c:	d35f      	bcc.n	1ece <__aeabi_uidiv+0xce>
    1e0e:	0a03      	lsrs	r3, r0, #8
    1e10:	428b      	cmp	r3, r1
    1e12:	d344      	bcc.n	1e9e <__aeabi_uidiv+0x9e>
    1e14:	0b03      	lsrs	r3, r0, #12
    1e16:	428b      	cmp	r3, r1
    1e18:	d328      	bcc.n	1e6c <__aeabi_uidiv+0x6c>
    1e1a:	0c03      	lsrs	r3, r0, #16
    1e1c:	428b      	cmp	r3, r1
    1e1e:	d30d      	bcc.n	1e3c <__aeabi_uidiv+0x3c>
    1e20:	22ff      	movs	r2, #255	; 0xff
    1e22:	0209      	lsls	r1, r1, #8
    1e24:	ba12      	rev	r2, r2
    1e26:	0c03      	lsrs	r3, r0, #16
    1e28:	428b      	cmp	r3, r1
    1e2a:	d302      	bcc.n	1e32 <__aeabi_uidiv+0x32>
    1e2c:	1212      	asrs	r2, r2, #8
    1e2e:	0209      	lsls	r1, r1, #8
    1e30:	d065      	beq.n	1efe <__aeabi_uidiv+0xfe>
    1e32:	0b03      	lsrs	r3, r0, #12
    1e34:	428b      	cmp	r3, r1
    1e36:	d319      	bcc.n	1e6c <__aeabi_uidiv+0x6c>
    1e38:	e000      	b.n	1e3c <__aeabi_uidiv+0x3c>
    1e3a:	0a09      	lsrs	r1, r1, #8
    1e3c:	0bc3      	lsrs	r3, r0, #15
    1e3e:	428b      	cmp	r3, r1
    1e40:	d301      	bcc.n	1e46 <__aeabi_uidiv+0x46>
    1e42:	03cb      	lsls	r3, r1, #15
    1e44:	1ac0      	subs	r0, r0, r3
    1e46:	4152      	adcs	r2, r2
    1e48:	0b83      	lsrs	r3, r0, #14
    1e4a:	428b      	cmp	r3, r1
    1e4c:	d301      	bcc.n	1e52 <__aeabi_uidiv+0x52>
    1e4e:	038b      	lsls	r3, r1, #14
    1e50:	1ac0      	subs	r0, r0, r3
    1e52:	4152      	adcs	r2, r2
    1e54:	0b43      	lsrs	r3, r0, #13
    1e56:	428b      	cmp	r3, r1
    1e58:	d301      	bcc.n	1e5e <__aeabi_uidiv+0x5e>
    1e5a:	034b      	lsls	r3, r1, #13
    1e5c:	1ac0      	subs	r0, r0, r3
    1e5e:	4152      	adcs	r2, r2
    1e60:	0b03      	lsrs	r3, r0, #12
    1e62:	428b      	cmp	r3, r1
    1e64:	d301      	bcc.n	1e6a <__aeabi_uidiv+0x6a>
    1e66:	030b      	lsls	r3, r1, #12
    1e68:	1ac0      	subs	r0, r0, r3
    1e6a:	4152      	adcs	r2, r2
    1e6c:	0ac3      	lsrs	r3, r0, #11
    1e6e:	428b      	cmp	r3, r1
    1e70:	d301      	bcc.n	1e76 <__aeabi_uidiv+0x76>
    1e72:	02cb      	lsls	r3, r1, #11
    1e74:	1ac0      	subs	r0, r0, r3
    1e76:	4152      	adcs	r2, r2
    1e78:	0a83      	lsrs	r3, r0, #10
    1e7a:	428b      	cmp	r3, r1
    1e7c:	d301      	bcc.n	1e82 <__aeabi_uidiv+0x82>
    1e7e:	028b      	lsls	r3, r1, #10
    1e80:	1ac0      	subs	r0, r0, r3
    1e82:	4152      	adcs	r2, r2
    1e84:	0a43      	lsrs	r3, r0, #9
    1e86:	428b      	cmp	r3, r1
    1e88:	d301      	bcc.n	1e8e <__aeabi_uidiv+0x8e>
    1e8a:	024b      	lsls	r3, r1, #9
    1e8c:	1ac0      	subs	r0, r0, r3
    1e8e:	4152      	adcs	r2, r2
    1e90:	0a03      	lsrs	r3, r0, #8
    1e92:	428b      	cmp	r3, r1
    1e94:	d301      	bcc.n	1e9a <__aeabi_uidiv+0x9a>
    1e96:	020b      	lsls	r3, r1, #8
    1e98:	1ac0      	subs	r0, r0, r3
    1e9a:	4152      	adcs	r2, r2
    1e9c:	d2cd      	bcs.n	1e3a <__aeabi_uidiv+0x3a>
    1e9e:	09c3      	lsrs	r3, r0, #7
    1ea0:	428b      	cmp	r3, r1
    1ea2:	d301      	bcc.n	1ea8 <__aeabi_uidiv+0xa8>
    1ea4:	01cb      	lsls	r3, r1, #7
    1ea6:	1ac0      	subs	r0, r0, r3
    1ea8:	4152      	adcs	r2, r2
    1eaa:	0983      	lsrs	r3, r0, #6
    1eac:	428b      	cmp	r3, r1
    1eae:	d301      	bcc.n	1eb4 <__aeabi_uidiv+0xb4>
    1eb0:	018b      	lsls	r3, r1, #6
    1eb2:	1ac0      	subs	r0, r0, r3
    1eb4:	4152      	adcs	r2, r2
    1eb6:	0943      	lsrs	r3, r0, #5
    1eb8:	428b      	cmp	r3, r1
    1eba:	d301      	bcc.n	1ec0 <__aeabi_uidiv+0xc0>
    1ebc:	014b      	lsls	r3, r1, #5
    1ebe:	1ac0      	subs	r0, r0, r3
    1ec0:	4152      	adcs	r2, r2
    1ec2:	0903      	lsrs	r3, r0, #4
    1ec4:	428b      	cmp	r3, r1
    1ec6:	d301      	bcc.n	1ecc <__aeabi_uidiv+0xcc>
    1ec8:	010b      	lsls	r3, r1, #4
    1eca:	1ac0      	subs	r0, r0, r3
    1ecc:	4152      	adcs	r2, r2
    1ece:	08c3      	lsrs	r3, r0, #3
    1ed0:	428b      	cmp	r3, r1
    1ed2:	d301      	bcc.n	1ed8 <__aeabi_uidiv+0xd8>
    1ed4:	00cb      	lsls	r3, r1, #3
    1ed6:	1ac0      	subs	r0, r0, r3
    1ed8:	4152      	adcs	r2, r2
    1eda:	0883      	lsrs	r3, r0, #2
    1edc:	428b      	cmp	r3, r1
    1ede:	d301      	bcc.n	1ee4 <__aeabi_uidiv+0xe4>
    1ee0:	008b      	lsls	r3, r1, #2
    1ee2:	1ac0      	subs	r0, r0, r3
    1ee4:	4152      	adcs	r2, r2
    1ee6:	0843      	lsrs	r3, r0, #1
    1ee8:	428b      	cmp	r3, r1
    1eea:	d301      	bcc.n	1ef0 <__aeabi_uidiv+0xf0>
    1eec:	004b      	lsls	r3, r1, #1
    1eee:	1ac0      	subs	r0, r0, r3
    1ef0:	4152      	adcs	r2, r2
    1ef2:	1a41      	subs	r1, r0, r1
    1ef4:	d200      	bcs.n	1ef8 <__aeabi_uidiv+0xf8>
    1ef6:	4601      	mov	r1, r0
    1ef8:	4152      	adcs	r2, r2
    1efa:	4610      	mov	r0, r2
    1efc:	4770      	bx	lr
    1efe:	e7ff      	b.n	1f00 <__aeabi_uidiv+0x100>
    1f00:	b501      	push	{r0, lr}
    1f02:	2000      	movs	r0, #0
    1f04:	f000 f806 	bl	1f14 <__aeabi_idiv0>
    1f08:	bd02      	pop	{r1, pc}
    1f0a:	46c0      	nop			; (mov r8, r8)

00001f0c <__aeabi_uidivmod>:
    1f0c:	2900      	cmp	r1, #0
    1f0e:	d0f7      	beq.n	1f00 <__aeabi_uidiv+0x100>
    1f10:	e776      	b.n	1e00 <__aeabi_uidiv>
    1f12:	4770      	bx	lr

00001f14 <__aeabi_idiv0>:
    1f14:	4770      	bx	lr
    1f16:	46c0      	nop			; (mov r8, r8)

00001f18 <__libc_init_array>:
    1f18:	4b0e      	ldr	r3, [pc, #56]	; (1f54 <__libc_init_array+0x3c>)
    1f1a:	b570      	push	{r4, r5, r6, lr}
    1f1c:	2500      	movs	r5, #0
    1f1e:	001e      	movs	r6, r3
    1f20:	4c0d      	ldr	r4, [pc, #52]	; (1f58 <__libc_init_array+0x40>)
    1f22:	1ae4      	subs	r4, r4, r3
    1f24:	10a4      	asrs	r4, r4, #2
    1f26:	42a5      	cmp	r5, r4
    1f28:	d004      	beq.n	1f34 <__libc_init_array+0x1c>
    1f2a:	00ab      	lsls	r3, r5, #2
    1f2c:	58f3      	ldr	r3, [r6, r3]
    1f2e:	4798      	blx	r3
    1f30:	3501      	adds	r5, #1
    1f32:	e7f8      	b.n	1f26 <__libc_init_array+0xe>
    1f34:	f000 f8b0 	bl	2098 <_init>
    1f38:	4b08      	ldr	r3, [pc, #32]	; (1f5c <__libc_init_array+0x44>)
    1f3a:	2500      	movs	r5, #0
    1f3c:	001e      	movs	r6, r3
    1f3e:	4c08      	ldr	r4, [pc, #32]	; (1f60 <__libc_init_array+0x48>)
    1f40:	1ae4      	subs	r4, r4, r3
    1f42:	10a4      	asrs	r4, r4, #2
    1f44:	42a5      	cmp	r5, r4
    1f46:	d004      	beq.n	1f52 <__libc_init_array+0x3a>
    1f48:	00ab      	lsls	r3, r5, #2
    1f4a:	58f3      	ldr	r3, [r6, r3]
    1f4c:	4798      	blx	r3
    1f4e:	3501      	adds	r5, #1
    1f50:	e7f8      	b.n	1f44 <__libc_init_array+0x2c>
    1f52:	bd70      	pop	{r4, r5, r6, pc}
    1f54:	200000e8 	.word	0x200000e8
    1f58:	200000e8 	.word	0x200000e8
    1f5c:	200000e8 	.word	0x200000e8
    1f60:	200000f8 	.word	0x200000f8

00001f64 <malloc>:
    1f64:	b510      	push	{r4, lr}
    1f66:	4b03      	ldr	r3, [pc, #12]	; (1f74 <malloc+0x10>)
    1f68:	0001      	movs	r1, r0
    1f6a:	6818      	ldr	r0, [r3, #0]
    1f6c:	f000 f816 	bl	1f9c <_malloc_r>
    1f70:	bd10      	pop	{r4, pc}
    1f72:	46c0      	nop			; (mov r8, r8)
    1f74:	200000e4 	.word	0x200000e4

00001f78 <memcpy>:
    1f78:	2300      	movs	r3, #0
    1f7a:	b510      	push	{r4, lr}
    1f7c:	429a      	cmp	r2, r3
    1f7e:	d003      	beq.n	1f88 <memcpy+0x10>
    1f80:	5ccc      	ldrb	r4, [r1, r3]
    1f82:	54c4      	strb	r4, [r0, r3]
    1f84:	3301      	adds	r3, #1
    1f86:	e7f9      	b.n	1f7c <memcpy+0x4>
    1f88:	bd10      	pop	{r4, pc}

00001f8a <memset>:
    1f8a:	0003      	movs	r3, r0
    1f8c:	1882      	adds	r2, r0, r2
    1f8e:	4293      	cmp	r3, r2
    1f90:	d002      	beq.n	1f98 <memset+0xe>
    1f92:	7019      	strb	r1, [r3, #0]
    1f94:	3301      	adds	r3, #1
    1f96:	e7fa      	b.n	1f8e <memset+0x4>
    1f98:	4770      	bx	lr
	...

00001f9c <_malloc_r>:
    1f9c:	2303      	movs	r3, #3
    1f9e:	b570      	push	{r4, r5, r6, lr}
    1fa0:	1ccd      	adds	r5, r1, #3
    1fa2:	439d      	bics	r5, r3
    1fa4:	3508      	adds	r5, #8
    1fa6:	0006      	movs	r6, r0
    1fa8:	2d0c      	cmp	r5, #12
    1faa:	d201      	bcs.n	1fb0 <_malloc_r+0x14>
    1fac:	250c      	movs	r5, #12
    1fae:	e005      	b.n	1fbc <_malloc_r+0x20>
    1fb0:	2d00      	cmp	r5, #0
    1fb2:	da03      	bge.n	1fbc <_malloc_r+0x20>
    1fb4:	230c      	movs	r3, #12
    1fb6:	2000      	movs	r0, #0
    1fb8:	6033      	str	r3, [r6, #0]
    1fba:	e040      	b.n	203e <_malloc_r+0xa2>
    1fbc:	42a9      	cmp	r1, r5
    1fbe:	d8f9      	bhi.n	1fb4 <_malloc_r+0x18>
    1fc0:	4b1f      	ldr	r3, [pc, #124]	; (2040 <_malloc_r+0xa4>)
    1fc2:	681c      	ldr	r4, [r3, #0]
    1fc4:	001a      	movs	r2, r3
    1fc6:	0021      	movs	r1, r4
    1fc8:	2900      	cmp	r1, #0
    1fca:	d013      	beq.n	1ff4 <_malloc_r+0x58>
    1fcc:	680b      	ldr	r3, [r1, #0]
    1fce:	1b5b      	subs	r3, r3, r5
    1fd0:	d40d      	bmi.n	1fee <_malloc_r+0x52>
    1fd2:	2b0b      	cmp	r3, #11
    1fd4:	d902      	bls.n	1fdc <_malloc_r+0x40>
    1fd6:	600b      	str	r3, [r1, #0]
    1fd8:	18cc      	adds	r4, r1, r3
    1fda:	e01e      	b.n	201a <_malloc_r+0x7e>
    1fdc:	428c      	cmp	r4, r1
    1fde:	d102      	bne.n	1fe6 <_malloc_r+0x4a>
    1fe0:	6863      	ldr	r3, [r4, #4]
    1fe2:	6013      	str	r3, [r2, #0]
    1fe4:	e01a      	b.n	201c <_malloc_r+0x80>
    1fe6:	684b      	ldr	r3, [r1, #4]
    1fe8:	6063      	str	r3, [r4, #4]
    1fea:	000c      	movs	r4, r1
    1fec:	e016      	b.n	201c <_malloc_r+0x80>
    1fee:	000c      	movs	r4, r1
    1ff0:	6849      	ldr	r1, [r1, #4]
    1ff2:	e7e9      	b.n	1fc8 <_malloc_r+0x2c>
    1ff4:	4c13      	ldr	r4, [pc, #76]	; (2044 <_malloc_r+0xa8>)
    1ff6:	6823      	ldr	r3, [r4, #0]
    1ff8:	2b00      	cmp	r3, #0
    1ffa:	d103      	bne.n	2004 <_malloc_r+0x68>
    1ffc:	0030      	movs	r0, r6
    1ffe:	f000 f823 	bl	2048 <_sbrk_r>
    2002:	6020      	str	r0, [r4, #0]
    2004:	0029      	movs	r1, r5
    2006:	0030      	movs	r0, r6
    2008:	f000 f81e 	bl	2048 <_sbrk_r>
    200c:	1c43      	adds	r3, r0, #1
    200e:	d0d1      	beq.n	1fb4 <_malloc_r+0x18>
    2010:	2303      	movs	r3, #3
    2012:	1cc4      	adds	r4, r0, #3
    2014:	439c      	bics	r4, r3
    2016:	42a0      	cmp	r0, r4
    2018:	d10a      	bne.n	2030 <_malloc_r+0x94>
    201a:	6025      	str	r5, [r4, #0]
    201c:	0020      	movs	r0, r4
    201e:	2207      	movs	r2, #7
    2020:	300b      	adds	r0, #11
    2022:	1d23      	adds	r3, r4, #4
    2024:	4390      	bics	r0, r2
    2026:	1ac3      	subs	r3, r0, r3
    2028:	d009      	beq.n	203e <_malloc_r+0xa2>
    202a:	425a      	negs	r2, r3
    202c:	50e2      	str	r2, [r4, r3]
    202e:	e006      	b.n	203e <_malloc_r+0xa2>
    2030:	1a21      	subs	r1, r4, r0
    2032:	0030      	movs	r0, r6
    2034:	f000 f808 	bl	2048 <_sbrk_r>
    2038:	1c43      	adds	r3, r0, #1
    203a:	d1ee      	bne.n	201a <_malloc_r+0x7e>
    203c:	e7ba      	b.n	1fb4 <_malloc_r+0x18>
    203e:	bd70      	pop	{r4, r5, r6, pc}
    2040:	200007e8 	.word	0x200007e8
    2044:	200007e4 	.word	0x200007e4

00002048 <_sbrk_r>:
    2048:	2300      	movs	r3, #0
    204a:	b570      	push	{r4, r5, r6, lr}
    204c:	4c06      	ldr	r4, [pc, #24]	; (2068 <_sbrk_r+0x20>)
    204e:	0005      	movs	r5, r0
    2050:	0008      	movs	r0, r1
    2052:	6023      	str	r3, [r4, #0]
    2054:	f000 f812 	bl	207c <_sbrk>
    2058:	1c43      	adds	r3, r0, #1
    205a:	d103      	bne.n	2064 <_sbrk_r+0x1c>
    205c:	6823      	ldr	r3, [r4, #0]
    205e:	2b00      	cmp	r3, #0
    2060:	d000      	beq.n	2064 <_sbrk_r+0x1c>
    2062:	602b      	str	r3, [r5, #0]
    2064:	bd70      	pop	{r4, r5, r6, pc}
    2066:	46c0      	nop			; (mov r8, r8)
    2068:	200007f0 	.word	0x200007f0

0000206c <strlen>:
    206c:	2300      	movs	r3, #0
    206e:	5cc2      	ldrb	r2, [r0, r3]
    2070:	3301      	adds	r3, #1
    2072:	2a00      	cmp	r2, #0
    2074:	d1fb      	bne.n	206e <strlen+0x2>
    2076:	1e58      	subs	r0, r3, #1
    2078:	4770      	bx	lr
	...

0000207c <_sbrk>:
    207c:	4a04      	ldr	r2, [pc, #16]	; (2090 <_sbrk+0x14>)
    207e:	6813      	ldr	r3, [r2, #0]
    2080:	2b00      	cmp	r3, #0
    2082:	d003      	beq.n	208c <_sbrk+0x10>
    2084:	1818      	adds	r0, r3, r0
    2086:	6010      	str	r0, [r2, #0]
    2088:	0018      	movs	r0, r3
    208a:	4770      	bx	lr
    208c:	4b01      	ldr	r3, [pc, #4]	; (2094 <_sbrk+0x18>)
    208e:	e7f9      	b.n	2084 <_sbrk+0x8>
    2090:	200007ec 	.word	0x200007ec
    2094:	200007f4 	.word	0x200007f4

00002098 <_init>:
    2098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    209a:	46c0      	nop			; (mov r8, r8)
    209c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    209e:	bc08      	pop	{r3}
    20a0:	469e      	mov	lr, r3
    20a2:	4770      	bx	lr

000020a4 <_fini>:
    20a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20a6:	46c0      	nop			; (mov r8, r8)
    20a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    20aa:	bc08      	pop	{r3}
    20ac:	469e      	mov	lr, r3
    20ae:	4770      	bx	lr

000020b0 <_ZTV7Serial_>:
	...
    20b8:	0465 0000 0491 0000 0479 0000 04ad 0000     e.......y.......
    20c8:	04d1 0000 0485 0000 0461 0000               ........a...

000020d4 <_ZTV26DoubleBufferedEPOutHandler>:
	...
    20dc:	07c5 0000 0889 0000 0701 0000               ............

000020e8 <_ZL19STRING_MANUFACTURER>:
    20e8:	7241 7564 6e69 206f 4c4c 0043               Arduino LLC.

000020f4 <_ZL15STRING_LANGUAGE>:
    20f4:	0304 0409                                   ....

000020f8 <_ZL21USB_DeviceDescriptorB>:
    20f8:	0112 0200 02ef 4001 2341 804d 0100 0201     .......@A#M.....
    2108:	0103                                        ..

0000210a <_ZL14STRING_PRODUCT>:
    210a:	7241 7564 6e69 206f 655a 6f72 0000          Arduino Zero..

00002118 <g_APinDescription>:
    2118:	0000 0000 000b 0000 0002 0000 0004 0000     ................
    2128:	00ff ffff ffff 000b 0000 0000 000a 0000     ................
    2138:	0002 0000 0004 0000 00ff ffff ffff 000a     ................
    2148:	0000 0000 000e 0000 0008 0000 0004 0000     ................
    2158:	00ff ffff ffff 000e 0000 0000 0009 0000     ................
    2168:	0004 0000 001c 0000 00ff 0001 0001 0009     ................
    2178:	0000 0000 0008 0000 0004 0000 001c 0000     ................
    2188:	00ff 0000 0000 0010 0000 0000 000f 0000     ................
    2198:	0004 0000 001c 0000 00ff 0301 0301 000f     ................
    21a8:	0000 0000 0014 0000 0005 0000 002c 0000     ............,...
    21b8:	00ff 0002 0002 0004 0000 0000 0015 0000     ................
    21c8:	0008 0000 0004 0000 00ff ffff ffff 0005     ................
    21d8:	0000 0000 0006 0000 0004 0000 001c 0000     ................
    21e8:	00ff 0100 0100 0006 0000 0000 0007 0000     ................
    21f8:	0004 0000 001c 0000 00ff 0101 0101 0007     ................
    2208:	0000 0000 0012 0000 0004 0000 001c 0000     ................
    2218:	00ff 0300 0300 0002 0000 0000 0010 0000     ................
    2228:	0004 0000 001c 0000 00ff 0200 0200 0000     ................
    2238:	0000 0000 0013 0000 0005 0000 002c 0000     ............,...
    2248:	00ff 0003 0003 0003 0000 0000 0011 0000     ................
    2258:	0004 0000 001c 0000 00ff 0201 0201 0001     ................
    2268:	0000 0000 0002 0000 0001 0000 0002 0000     ................
    2278:	0000 ffff ffff 0002 0001 0000 0008 0000     ................
    2288:	0001 0000 0018 0000 0002 0400 0400 0008     ................
    2298:	0001 0000 0009 0000 0001 0000 0018 0000     ................
    22a8:	0003 0401 0401 0009 0000 0000 0004 0000     ................
    22b8:	0001 0000 0000 0000 0004 ffff ffff 0004     ................
    22c8:	0000 0000 0005 0000 0001 0000 0000 0000     ................
    22d8:	0005 ffff ffff 0005 0001 0000 0002 0000     ................
    22e8:	0001 0000 0000 0000 000a ffff ffff 0002     ................
    22f8:	0000 0000 0016 0000 0002 0000 0004 0000     ................
    2308:	00ff ffff ffff 0006 0000 0000 0017 0000     ................
    2318:	0002 0000 0004 0000 00ff ffff ffff 0007     ................
    2328:	0000 0000 000c 0000 0003 0000 0004 0000     ................
    2338:	00ff ffff ffff 000c 0001 0000 000a 0000     ................
    2348:	0003 0000 0004 0000 00ff ffff ffff 000a     ................
    2358:	0001 0000 000b 0000 0003 0000 0004 0000     ................
    2368:	00ff ffff ffff 000b 0001 0000 0003 0000     ................
    2378:	000b 0000 0004 0000 00ff ffff ffff 00ff     ................
    2388:	0000 0000 001b 0000 000b 0000 0004 0000     ................
    2398:	00ff ffff ffff 00ff 0000 0000 001c 0000     ................
    23a8:	0006 0000 0000 0000 00ff ffff ffff 00ff     ................
    23b8:	0000 0000 0018 0000 0006 0000 0000 0000     ................
    23c8:	00ff ffff ffff 00ff 0000 0000 0019 0000     ................
    23d8:	0006 0000 0000 0000 00ff ffff ffff 00ff     ................
    23e8:	0001 0000 0016 0000 0003 0000 0000 0000     ................
    23f8:	00ff ffff ffff 00ff 0001 0000 0017 0000     ................
    2408:	0003 0000 0000 0000 00ff ffff ffff 00ff     ................
    2418:	0000 0000 0016 0000 0002 0000 0000 0000     ................
    2428:	00ff ffff ffff 00ff 0000 0000 0017 0000     ................
    2438:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    2448:	0000 0000 0013 0000 0002 0000 0000 0000     ................
    2458:	00ff ffff ffff 00ff 0000 0000 0010 0000     ................
    2468:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    2478:	0000 0000 0012 0000 0002 0000 0000 0000     ................
    2488:	00ff ffff ffff 00ff 0000 0000 0011 0000     ................
    2498:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    24a8:	0000 0000 000d 0000 0004 0000 000c 0000     ................
    24b8:	00ff 0001 ffff 000d 0000 0000 0015 0000     ................
    24c8:	0005 0000 000c 0000 00ff 0003 ffff 00ff     ................
    24d8:	0000 0000 0006 0000 0004 0000 000c 0000     ................
    24e8:	00ff 0100 ffff 00ff 0000 0000 0007 0000     ................
    24f8:	0004 0000 000c 0000 00ff 0101 ffff 00ff     ................
    2508:	0000 0000 0003 0000 0001 0000 0002 0000     ................
    2518:	00ff ffff ffff 00ff 0000 0000 0002 0000     ................
    2528:	0001 0000 0002 0000 0014 ffff ffff 0002     ................

00002538 <_ZTV4Uart>:
	...
    2540:	1b45 0000 1d55 0000 1b27 0000 1b3b 0000     E...U...'...;...
    2550:	1b31 0000 1b1d 0000 1afd 0000 1c21 0000     1...........!...
    2560:	1b09 0000 1af9 0000 0043 0000               ........C...

0000256c <__EH_FRAME_BEGIN__>:
    256c:	0000 0000                                   ....
